<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.CodeGenerator</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.CodeGenerator.AsynchronousMethod">
            <summary>
            异步信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.AsynchronousMethod.Method">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.AsynchronousMethod.MemberIndex">
            <summary>
            属性或者字段信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.MemberFullName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.methodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.AsynchronousMethod.methodParameters">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.MethodParameters">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.FristParameter">
            <summary>
            第一个方法参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.NotOutParameters">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.AsynchronousMethod.InputParameters">
            <summary>
            输入参数匹配集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.AsynchronousMethod.OutputParameters">
            <summary>
            输出参数匹配集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.IsFristParameterValueType">
            <summary>
            第一个方法参数是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.AsynchronousMethod.isAsynchronousCallback">
            <summary>
            是否异步回调方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.IsAsynchronousCallback">
            <summary>
            是否异步回调方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.isAsynchronousFunc">
            <summary>
            异步回调是否检测成功状态
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.AsynchronousMethod.checkAsynchronousReturn">
            <summary>
            检测异步回调方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.MethodIsReturn">
            <summary>
            是否有返回值
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.ReturnName">
            <summary>
            返回值参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.PropertyName">
            <summary>
            属性或者字段名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.AsynchronousMethod.StaticPropertyName">
            <summary>
            属性或者字段名称
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CodeLanguage">
            <summary>
            代码生成语言
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CodeLanguage.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CodeLanguage.JavaScript">
            <summary>
            JavaScript
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CodeLanguage.TypeScript">
            <summary>
            TypeScript
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CodeLanguageAttribute">
            <summary>
            代码生成语言扩展
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CodeLanguageAttribute.ExtensionName">
            <summary>
            模板文件扩展名
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Coder">
            <summary>
            模板代码生成器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.templatePath">
            <summary>
            模板文件路径
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Coder.Command">
            <summary>
            模板命令类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.AT">
            <summary>
            输出绑定的数据
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.PUSH">
            <summary>
            子代码段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.LOOP">
            <summary>
            循环
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.FOR">
            <summary>
            循环=LOOP
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.NOTE">
            <summary>
            屏蔽代码段输出
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.IF">
            <summary>
            绑定的数据为true非0非null时输出代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.NOT">
            <summary>
            绑定的数据为false或者0或者null时输出代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.NAME">
            <summary>
            用于标识一个子段模板，可以被别的模板引用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.FROMNAME">
            <summary>
            引用NAME标识一个子段模板
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.Command.PART">
            <summary>
            用于标识一个子段程序代码，用于代码的分类输出
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.parameter">
            <summary>
            安装参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.extensionName">
            <summary>
            模板文件扩展名
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.#ctor(AutoCSer.CodeGenerator.ProjectParameter,System.Type,AutoCSer.CodeGenerator.CodeLanguage)">
            <summary>
            CSharp代码生成器
            </summary>
            <param name="parameter">安装参数</param>
            <param name="type">模板数据视图</param>
            <param name="language">语言</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.fromNameNode(System.String,AutoCSer.SubString@)">
            <summary>
            根据类型名称获取子段模板
            </summary>
            <param name="typeName">类型名称</param>
            <param name="name">子段模板名称</param>
            <returns>子段模板</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.SkinEnd(AutoCSer.CodeGenerator.TreeBuilder.Node)">
            <summary>
            添加代码树节点
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.GetNode(System.String)">
            <summary>
            根据类型名称获取CSharp代码树节点
            </summary>
            <param name="fileName"></param>
            <returns>CSharp代码树节点</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.getTemplateFileName(System.String)">
            <summary>
            根据类型名称获取模板文件名
            </summary>
            <param name="typeName">类型名称</param>
            <returns>模板文件名</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.WarningCode">
            <summary>
            声明与警告+文件头
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.FileEndCode">
            <summary>
            文件结束
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Coder.CodeType">
            <summary>
            已经生成代码的类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.CodeType.TemplateType">
            <summary>
            模板类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.CodeType.Type">
            <summary>
            当前生成代码的应用类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.CodeType.Equals(AutoCSer.CodeGenerator.Coder.CodeType)">
            <summary>
            判断生成代码类型是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.CodeType.Equals(System.Object)">
            <summary>
            判断生成代码类型是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.CodeType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.codes">
            <summary>
            已经生成的代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.codeTypes">
            <summary>
            已经生成代码的类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Coder.nodeCache">
            <summary>
            CSharp代码树节点缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.Add(System.Type,System.Type)">
            <summary>
            添加代码
            </summary>
            <param name="cSharperType">模板类型</param>
            <param name="type">实例类型</param>
            <returns>锁定是否成功</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.Add(System.String,AutoCSer.CodeGenerator.CodeLanguage)">
            <summary>
            添加代码
            </summary>
            <param name="code">代码</param>
            <param name="language">代码生成语言</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.CheckCodeType(System.Type,System.Type)">
            <summary>
            判断是否已经存在代码
            </summary>
            <param name="cSharperType">模板类型</param>
            <param name="type">实例类型</param>
            <returns>是否已经存在代码</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.Output(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            输出代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.WriteFile(System.String,System.String)">
            <summary>
            输出代码
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">文件内容</param>
            <returns>是否写入新内容</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.MoveFile(System.String,System.String)">
            <summary>
            输出代码
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">文件内容</param>
            <returns>是否写入新内容</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Coder.WriteFileSuffix(System.String,System.String)">
            <summary>
            输出代码
            </summary>
            <param name="fileName">文件名</param>
            <param name="content">文件内容</param>
            <returns>是否写入新内容</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CombinationTemplate">
            <summary>
            自定义简单组合模板
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CombinationTemplate.Run(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            安装入口
            </summary>
            <param name="parameter">安装参数</param>
            <returns>是否安装成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CombinationTemplate.Replace">
            <summary>
            一个关键字的模板替换信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CombinationTemplate.Replace.indexs">
            <summary>
            原始数组中的替换位置集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CombinationTemplate.Replace.values">
            <summary>
            替换的目标组合集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CombinationTemplate.Replace.index">
            <summary>
            当前组合索引
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CombinationTemplate.code(System.String)">
            <summary>
            生成代码
            </summary>
            <param name="fileName">模板文件名</param>
            <returns>代码</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Config">
            <summary>
            代码生成项目配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Config.LogConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CSharper">
            <summary>
            CSharp代码生成数据视图生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CSharper.Definition">
            <summary>
            类定义生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CSharper.Definition.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CSharper.Definition.Auto">
            <summary>
            安装属性
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CSharper.Definition.Parameter">
            <summary>
            安装参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CSharper.Definition.typeDefinition">
            <summary>
            类定义生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CSharper.Definition.coder">
            <summary>
            模板代码生成器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CSharper.Definition.codeBuilder">
            <summary>
            模板代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CSharper.Definition.ToString">
            <summary>
            生成类定义字符串
            </summary>
            <returns>类定义字符串</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CSharper.Definition.end">
            <summary>
            模板结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CSharper.Definition.cSharp">
            <summary>
            生成C#模板代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CSharper.Definition.javaScript">
            <summary>
            生成JavaScript模板代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CSharper.Run(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            安装入口
            </summary>
            <param name="parameter">安装参数</param>
            <returns>是否安装成功</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.CSharper.copyDotNetCoreJson(System.String,System.String)">
            <summary>
            复制 JSON 文件
            </summary>
            <param name="path"></param>
            <param name="fileName"></param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CustomConfig">
            <summary>
            自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CustomConfig.IsAutoCSer">
            <summary>
            是否调用 AutoCSer 的代码生成组件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CustomConfig.Default">
            <summary>
            自定义配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CustomConfig.CustomAssemblyName">
            <summary>
            自定义代码生成程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CustomConfig.configFileName">
            <summary>
            自定义配置文件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CustomConfig.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.GeneratorAttribute">
            <summary>
            代码生成器配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.Name">
            <summary>
            安装名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.DependType">
            <summary>
            自动安装依赖,指定当前安装必须后于依赖安装
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.Template">
            <summary>
            模板文件名称，不包括扩展名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.Language">
            <summary>
            代码生成语言
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.IsAuto">
            <summary>
            是否自动生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.IsDotNet2">
            <summary>
            是否支持 .NET 2.0
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.IsMono">
            <summary>
            是否支持 MONO
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.IsTemplate">
            <summary>
            是否生成模板代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.GeneratorAttribute.IsDeclaringTypeName">
            <summary>
            模板文件是否使用嵌套类型名称
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.GeneratorAttribute.GetFileName(System.Type)">
            <summary>
            获取模板文件名，不包括扩展名
            </summary>
            <param name="type">模板数据视图</param>
            <returns>模板文件名</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Html">
            <summary>
            HTML模板
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.cssPageExtension">
            <summary>
            CSS模板文件名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.cssBackgroundRegex">
            <summary>
            css+background
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.Parameter">
            <summary>
            安装参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.includeCss">
            <summary>
            css嵌入文件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.Htmls">
            <summary>
            HTML模板处理集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.WebConfig">
            <summary>
            网站生成配置
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.Run(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            代码生成入口
            </summary>
            <param name="parameter">安装参数</param>
            <returns>是否生成成功</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.copyScript">
            <summary>
            复制脚本文件
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.copyJs(System.IO.DirectoryInfo,System.String,System.String[])">
            <summary>
            复制js相关文件
            </summary>
            <param name="AutoCSerPath">AutoCSer源文件目录</param>
            <param name="projectPath">项目文件目录</param>
            <param name="fileNames">项目文件目录</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.copyJs(System.IO.DirectoryInfo,System.String)">
            <summary>
            复制js相关文件
            </summary>
            <param name="AutoCSerPath">AutoCSer源文件目录</param>
            <param name="projectPath">项目文件目录</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.copyJs(System.IO.FileInfo,System.String)">
            <summary>
            复制js相关文件
            </summary>
            <param name="file"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.copyJs(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            复制js相关文件
            </summary>
            <param name="file">AutoCSer源文件</param>
            <param name="projectFile">项目文件</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.css">
            <summary>
            创建目标css文件
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.cssBackgroundReplace(System.Text.RegularExpressions.Match)">
            <summary>
            css背景图片域名替换
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Html.getIncludeCss(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Html.AutoCSerScriptPath">
            <summary>
            AutoCSer Typescipt文件路径
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.HtmlJs">
            <summary>
            HTML模板处理
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.htmlExtension">
            <summary>
            HTML文件扩展名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.jsExtension">
            <summary>
            JS文件扩展名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.tsExtension">
            <summary>
            TypeScript文件扩展名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.pageExtension">
            <summary>
            模板扩展名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.htmlInclude">
            <summary>
            HTML包含前缀
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.jsInclude">
            <summary>
            js包含前缀
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.enterRegex">
            <summary>
            换行符
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.selectRegex">
            <summary>
            select控件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.imageRegex">
            <summary>
            img控件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.imageSrcRegex">
            <summary>
            img控件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.cssRegex">
            <summary>
            link+css控件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.htmlLinkVersionRegex">
            <summary>
            本地 HTML 链接正则
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.htmlAuto">
            <summary>
            HTML模板参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.fileName">
            <summary>
            文件名称前缀
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.html">
            <summary>
            目标HTML代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.js">
            <summary>
            目标JS代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.includePath">
            <summary>
            项目路径
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.HtmlJs.IncludePath">
            <summary>
            项目路径
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.includes">
            <summary>
            包含标识集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.jsFiles">
            <summary>
            JS文件集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.#ctor(AutoCSer.CodeGenerator.Html,System.String,System.String)">
            <summary>
            HTML模板处理
            </summary>
            <param name="htmlAuto">HTML模板参数</param>
            <param name="fileName">文件名称</param>
            <param name="includePath">导入 HTML/JS 目录</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.create(AutoCSer.LeftArray{AutoCSer.CodeGenerator.HtmlJs}@,System.Boolean)">
            <summary>
            创建HTML文件
            </summary>
            <param name="history">历史记录</param>
            <param name="isHtml">是否HTML</param>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.multiLineNodes">
            <summary>
            多行注释正则
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.singleLineNodes">
            <summary>
            单行注释正则
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.referencePathRegex">
            <summary>
            TypeScript引用注释
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.useStrict">
            <summary>
            js严格模式
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.extends">
            <summary>
            继承代码定义
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.compress(System.String)">
            <summary>
            压缩源代码//showjim应该修改为trie图匹配
            </summary>
            <param name="code">源代码</param>
            <returns>压缩后源代码</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.HtmlJs.Version">
            <summary>
            模板版本号
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.writeHtml(System.String,System.String,System.Boolean)">
            <summary>
            写入目标文件
            </summary>
            <param name="fileName">目标文件名称</param>
            <param name="code">文件内容</param>
            <param name="isWriteJs">是否存在配套 JS 文件</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.htmlLinkVersion(System.Text.RegularExpressions.Match)">
            <summary>
            本地 HTML 链接正则
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.writeFile(System.String,System.String)">
            <summary>
            写入目标文件
            </summary>
            <param name="fileName">目标文件名称</param>
            <param name="code">文件内容</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.Create(AutoCSer.CodeGenerator.Html)">
            <summary>
            创建HTML模板目标文件
            </summary>
            <param name="htmlAuto">HTML模板参数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.HtmlJs.create(AutoCSer.CodeGenerator.Html,System.String,System.Boolean,System.String)">
            <summary>
            添加HTML模板处理
            </summary>
            <param name="htmlAuto">HTML模板参数</param>
            <param name="fileName">文件名称</param>
            <param name="isHtml">是否HTML文件</param>
            <param name="includePath">导入 HTML/JS 目录</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.IGenerator">
            <summary>
            代码生成接口
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.IGenerator.Run(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            代码生成入口
            </summary>
            <param name="parameter">安装参数</param>
            <returns>是否生成成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Messages">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Messages.messages">
            <summary>
            提示信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Messages.isMessage">
            <summary>
            是否存在提示信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Messages.IsMessage">
            <summary>
            是否存在提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Messages.errors">
            <summary>
            错误信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Messages.exceptions">
            <summary>
            异常集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Messages.isError">
            <summary>
            是否存在错误或者异常信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Messages.IsError">
            <summary>
            是否存在错误或者异常信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Messages.Clear">
            <summary>
            清除所有信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Messages.output">
            <summary>
            信息输出到日志
            </summary>
            <returns>是否存在错误信息</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Messages.Add(System.String)">
            <summary>
            添加错误信息
            </summary>
            <param name="error">错误信息</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Messages.Add(System.Exception)">
            <summary>
            添加异常
            </summary>
            <param name="error">异常</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Messages.Message(System.String)">
            <summary>
            添加提示信息
            </summary>
            <param name="value">提示信息</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Messages.Open">
            <summary>
            输出错误信息到日志并打开日志文件
            </summary>
            <returns>安装是否顺利,没有错误或者提示信息</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.ExtensionType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.Null">
            <summary>
            空类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.typeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.fullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.FullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.FullName2">
            <summary>
            .NET 2.0 委托名称补丁
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.typeOnlyName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.TypeOnlyName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.xmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.XmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsStatic">
            <summary>
            是否静态类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsStruct">
            <summary>
            是否值类型(排除可空类型)
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsNull">
            <summary>
            是否引用类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsBool">
            <summary>
            是否逻辑类型(包括可空类型)
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsString">
            <summary>
            是否字符串
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsSubString">
            <summary>
            是否字符串
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsChar">
            <summary>
            是否字符类型(包括可空类型)
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsDateTime">
            <summary>
            是否时间类型(包括可空类型)
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsHashUrl">
            <summary>
            是否#!URL
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.numberTypes">
            <summary>
            数字类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsNumber">
            <summary>
            是否数字类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.numberToStringTypes">
            <summary>
            数字类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsNumberToString">
            <summary>
            是否数字类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.ArrayConstructor">
            <summary>
            数组构造信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IListConstructor">
            <summary>
            列表数组构造信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.ICollectionConstructor">
            <summary>
            集合构造信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IEnumerableConstructor">
            <summary>
            可枚举泛型构造信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.enumerableType">
            <summary>
            可枚举泛型类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.EnumerableType">
            <summary>
            可枚举泛型类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.enumerableArgumentType">
            <summary>
            可枚举泛型参数类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.EnumerableArgumentType">
            <summary>
            可枚举泛型参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.nullType">
            <summary>
            可控类型的值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.NullType">
            <summary>
            可控类型的值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.NotNullType">
            <summary>
            非可控类型为null
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsIEquatable">
            <summary>
            是否泛型等于比较
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.ExtensionType.#ctor(System.Type)">
            <summary>
            成员类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.ExtensionType.op_Implicit(AutoCSer.CodeGenerator.Metadata.ExtensionType)~System.Type">
            <summary>
            隐式转换
            </summary>
            <param name="value">成员类型</param>
            <returns>类型</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.ExtensionType.op_Implicit(System.Type)~AutoCSer.CodeGenerator.Metadata.ExtensionType">
            <summary>
            隐式转换
            </summary>
            <param name="type">类型</param>
            <returns>成员类型</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.ajaxToStringTypes">
            <summary>
            AJAX toString重定向类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.IsAjaxToString">
            <summary>
            是否AJAX toString重定向类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.clientViewType">
            <summary>
            客户端视图绑定类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.ClientViewTypeName">
            <summary>
            客户端视图绑定类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.ClientViewMemberName">
            <summary>
            客户端视图绑定成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.scriptTypes">
            <summary>
            TypeScript 类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.ExtensionType.ScriptType">
            <summary>
            TypeScript 类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.types">
            <summary>
            成员类型隐式转换集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.ExtensionType.typeLock">
            <summary>
            隐式转换集合转换锁
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.ExtensionType.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.MemberIndex">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MemberIndex.MemberType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MemberIndex.MemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MemberIndex.NextMemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MemberIndex.xmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MemberIndex.XmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.#ctor(System.Reflection.FieldInfo,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="field">字段信息</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.#ctor(AutoCSer.Metadata.MemberIndexInfo)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.#ctor(System.Reflection.MethodInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="method">成员方法信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.#ctor(AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String)">
            <summary>
            成员信息
            </summary>
            <param name="type">成员类型</param>
            <param name="name">成员名称</param>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MemberIndex.memberCache">
            <summary>
            类型成员集合缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.getMembers(System.Type)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="type">类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.GetMembers(System.Type,AutoCSer.Metadata.MemberFilters)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.GetMembers``1(System.Type,AutoCSer.Metadata.MemberFilters,System.Boolean,System.Boolean)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MemberIndex.staticMemberCache">
            <summary>
            类型成员集合缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.getStaticMembers(System.Type)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="type">类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.GetStaticMembers(System.Type,AutoCSer.Metadata.MemberFilters)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MemberIndex.GetStaticMembers``1(System.Type,AutoCSer.Metadata.MemberFilters,System.Boolean,System.Boolean)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.MethodIndex">
            <summary>
            成员方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.Method">
            <summary>
            成员方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodIndex.customMember">
            <summary>
            自定义方法相关成员信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.IsGetMember">
            <summary>
            自定义方法是否取值，否则为设置值
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.GenericParameters">
            <summary>
            泛型参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodIndex.genericParameterName">
            <summary>
            泛型参数拼写
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.GenericParameterName">
            <summary>
            泛型参数拼写
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.OutputParameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.MethodName">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.StaticMethodName">
            <summary>
            方法泛型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.GenericMethodName">
            <summary>
            方法泛型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.GenericStaticMethodName">
            <summary>
            方法泛型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.TaskAsyncMethodName">
            <summary>
            异步函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.AwaiterMethodName">
            <summary>
            异步函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.MethodKeyFullName">
            <summary>
            方法全称标识
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.MethodKeyName">
            <summary>
            方法标识
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodIndex.xmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.XmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodIndex.returnXmlDocument">
            <summary>
            返回值XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.ReturnXmlDocument">
            <summary>
            返回值XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodIndex.PropertyParameter">
            <summary>
            自定义方法属性返回值参数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.#ctor(System.Reflection.MethodInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            成员方法
            </summary>
            <param name="method">成员方法信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.#ctor(System.Reflection.MethodInfo,System.Type)">
            <summary>
            成员方法
            </summary>
            <param name="method">成员方法信息</param>
            <param name="awaiterReturnType">await 返回值类型</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.#ctor(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            成员方法
            </summary>
            <param name="field">字段信息</param>
            <param name="isGet">是否取值</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            成员方法
            </summary>
            <param name="property">属性信息</param>
            <param name="isGet">是否取值</param>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodIndex.methodCache">
            <summary>
            类型成员方法缓存
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodIndex.methodCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.compare(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.getMethods(System.Type)">
            <summary>
            获取类型的成员方法集合
            </summary>
            <param name="type">类型</param>
            <returns>成员方法集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.GetMethods(System.Type,AutoCSer.Metadata.MemberFilters,System.Boolean)">
            <summary>
            获取匹配成员方法集合
            </summary>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <returns>匹配的成员方法集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.getMethods``1(System.Type,AutoCSer.LeftArray{AutoCSer.CodeGenerator.Metadata.MethodIndex},System.Boolean,System.Boolean)">
            <summary>
            获取匹配成员方法集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="methods">成员方法集合</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。</param>
            <returns>匹配成员方法集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.GetMethods``1(System.Type,AutoCSer.Metadata.MemberFilters,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取匹配成员方法集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。</param>
            <returns>匹配成员方法集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodIndex.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.MethodParameter">
            <summary>
            函数参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameter.method">
            <summary>
            定义方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.Parameter">
            <summary>
            参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterIndex">
            <summary>
            参数索引位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.GenericParameterType">
            <summary>
            函数泛型参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ValueTypeParameterName">
            <summary>
            值类型参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterJoin">
            <summary>
            参数连接逗号，最后一个参数为null
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterJoinName">
            <summary>
            参数连接名称，最后一个参数不带逗号
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterJoinRefName">
            <summary>
            带引用修饰的参数连接名称，最后一个参数不带逗号
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterTypeRefName">
            <summary>
            带引用修饰的参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterRefName">
            <summary>
            带引用修饰的参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameter.xmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.XmlDocument">
            <summary>
            XML文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.Ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameter.IsRef">
            <summary>
            是否引用参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.IsOut">
            <summary>
            是否输出参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.IsRefOrOut">
            <summary>
            是否输出参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameter.ParameterRef">
            <summary>
            参数引用前缀
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameter.IsPropertyValue">
            <summary>
            是否属性值参数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.#ctor(System.Reflection.MethodInfo,System.Type[],System.Reflection.ParameterInfo,System.Int32,System.Boolean)">
            <summary>
            参数信息
            </summary>
            <param name="method">函数信息</param>
            <param name="genericParameters">方法泛型参数集合</param>
            <param name="parameter">参数信息</param>
            <param name="index">参数索引位置</param>
            <param name="isLast">是否最后一个参数</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.#ctor(AutoCSer.CodeGenerator.Metadata.MethodParameter,System.String)">
            <summary>
            参数信息
            </summary>
            <param name="parameter"></param>
            <param name="parameterName"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.#ctor(System.String,System.Type)">
            <summary>
            参数信息
            </summary>
            <param name="name">参数名称</param>
            <param name="type">参数类型</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.getRefName(System.String)">
            <summary>
            获取带引用修饰的名称
            </summary>
            <param name="name">名称</param>
            <returns>带引用修饰的名称</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.Get(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            获取方法参数信息集合
            </summary>
            <param name="method">方法信息</param>
            <param name="genericParameters">方法泛型参数集合</param>
            <returns>参数信息集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.Get(AutoCSer.CodeGenerator.Metadata.MethodParameter[])">
            <summary>
            获取方法参数信息集合
            </summary>
            <param name="parameters">参数信息集合</param>
            <returns>参数信息集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameter.GetInput(AutoCSer.CodeGenerator.Metadata.MethodParameter[])">
            <summary>
            获取方法输入参数信息集合
            </summary>
            <param name="parameters">参数信息集合</param>
            <returns>输入参数信息集合</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.MethodParameterPair">
            <summary>
            函数参数匹配信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.MethodParameter">
            <summary>
            函数参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.Parameter">
            <summary>
            匹配参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.InputMethodParameter">
            <summary>
            输出参数匹配输入参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.InputParameter">
            <summary>
            输出参数匹配输入参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.ParameterRef">
            <summary>
            参数引用前缀
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.set(AutoCSer.CodeGenerator.Metadata.MethodParameter,AutoCSer.CodeGenerator.Metadata.MethodParameter)">
            <summary>
            设置函数参数匹配信息
            </summary>
            <param name="methodParameter"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.setInputParameter(AutoCSer.CodeGenerator.Metadata.MethodParameterPair[])">
            <summary>
            设置输出参数匹配输入参数
            </summary>
            <param name="inputParameters"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.setInputParameter(AutoCSer.CodeGenerator.Metadata.MethodParameter,AutoCSer.CodeGenerator.Metadata.MethodParameter)">
            <summary>
            设置输出参数匹配输入参数
            </summary>
            <param name="methodParameter"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.get(AutoCSer.CodeGenerator.Metadata.MethodParameter[],AutoCSer.CodeGenerator.Metadata.MethodParameter[])">
            <summary>
            获取函数参数匹配信息
            </summary>
            <param name="methodParameters"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.Get(AutoCSer.CodeGenerator.Metadata.MethodParameter[],AutoCSer.CodeGenerator.Metadata.MethodParameterTypes)">
            <summary>
            获取函数参数匹配信息
            </summary>
            <param name="methodParameters"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.Get(AutoCSer.CodeGenerator.Metadata.MethodParameter[],AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames)">
            <summary>
            获取函数参数匹配信息
            </summary>
            <param name="methodParameters"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterPair.SetInputParameter(AutoCSer.CodeGenerator.Metadata.MethodParameterPair[],AutoCSer.CodeGenerator.Metadata.MethodParameterPair[])">
            <summary>
            设置输出参数匹配输入参数
            </summary>
            <param name="outputParameters"></param>
            <param name="inputParameters"></param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames">
            <summary>
            函数参数类型与名称集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.Parameters">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.hashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.Index">
            <summary>
            参数序号
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.ParameterTypeName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.IsSerializeReferenceMember">
            <summary>
            二进制序列化是否需要检测循环引用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.IsSerializeBox">
            <summary>
            是否添加包装处理申明 AutoCSer.Metadata.BoxSerialize
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.IsParameter">
            <summary>
            参数是否有效
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.#ctor(AutoCSer.CodeGenerator.Metadata.MethodParameter[],System.Boolean,System.Boolean)">
            <summary>
            函数参数类型集合关键字
            </summary>
            <param name="parameters"></param>
            <param name="isSerializeReferenceMember">二进制序列化是否需要检测循环引用</param>
            <param name="isSerializeBox">二进制序列化是否需要检测循环引用</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.#ctor(AutoCSer.CodeGenerator.Metadata.MethodParameter[],System.Type,System.Boolean,System.Boolean)">
            <summary>
            函数参数类型集合关键字
            </summary>
            <param name="parameters"></param>
            <param name="returnType"></param>
            <param name="isSerializeReferenceMember">二进制序列化是否需要检测循环引用</param>
            <param name="isSerializeBox">二进制序列化是否需要检测循环引用</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.Equals(AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.Copy(System.Int32)">
            <summary>
            复制参数集合
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames.compare(AutoCSer.CodeGenerator.Metadata.MethodParameter,AutoCSer.CodeGenerator.Metadata.MethodParameter)">
            <summary>
            比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes">
            <summary>
            函数参数类型集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.hashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.Index">
            <summary>
            参数序号
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.ParameterTypeName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.IsSerializeReferenceMember">
            <summary>
            二进制序列化是否需要检测循环引用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.IsSerializeBox">
            <summary>
            是否添加包装处理申明 AutoCSer.Metadata.BoxSerialize
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.IsSimpleSerialize">
            <summary>
            是否简单序列化
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.IsParameter">
            <summary>
            参数是否有效
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.#ctor(AutoCSer.CodeGenerator.Metadata.MethodParameter[],System.Boolean,System.Boolean)">
            <summary>
            函数参数类型集合关键字
            </summary>
            <param name="parameters"></param>
            <param name="isSerializeReferenceMember">二进制序列化是否需要检测循环引用</param>
            <param name="isSerializeBox">二进制序列化是否需要检测循环引用</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.#ctor(AutoCSer.CodeGenerator.Metadata.MethodParameter[],System.Type,System.Boolean,System.Boolean)">
            <summary>
            函数参数类型集合关键字
            </summary>
            <param name="parameters"></param>
            <param name="returnType"></param>
            <param name="isSerializeReferenceMember">二进制序列化是否需要检测循环引用</param>
            <param name="isSerializeBox">二进制序列化是否需要检测循环引用</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.Equals(AutoCSer.CodeGenerator.Metadata.MethodParameterTypes)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.Copy(System.Int32)">
            <summary>
            复制参数集合
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.Set(AutoCSer.CodeGenerator.Metadata.MethodParameterTypeNames)">
            <summary>
            设置函数参数类型集合关键字
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.compare(AutoCSer.CodeGenerator.Metadata.MethodParameter,AutoCSer.CodeGenerator.Metadata.MethodParameter)">
            <summary>
            比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.MethodParameterTypes.GetParameterTypeName(System.Int32)">
            <summary>
            获取参数类型名称
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Metadata.StaticMemberIndexGroup">
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.StaticMemberIndexGroup.cache">
            <summary>
            成员索引分组集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Metadata.StaticMemberIndexGroup.cacheLock">
            <summary>
            成员索引分组集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.StaticMemberIndexGroup.Get(System.Type)">
            <summary>
            根据类型获取成员索引分组
            </summary>
            <param name="type">对象类型</param>
            <returns>成员索引分组</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Metadata.StaticMemberIndexGroup.Get``1(System.Type,AutoCSer.Metadata.MemberFilters,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取匹配成员集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。</param>
            <returns>匹配成员集合</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.ProjectParameter">
            <summary>
            项目安装参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.CurrentAssembly">
            <summary>
            当前程序集
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.ProjectPath">
            <summary>
            项目路径
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.AssemblyPath">
            <summary>
            程序集文件名全称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.DefaultNamespace">
            <summary>
            项目默认命名空间
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.IsProjectFile">
            <summary>
            是否自动更新项目文件
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.IsAutoCSerCodeGenerator">
            <summary>
            是否 AutoCSer 项目
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.IsCustomCodeGenerator">
            <summary>
            是否自定义代码生成项目
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.IsCombinationTemplate">
            <summary>
            是否自定义简单组合模板
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.ProjectParameter.Types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.ProjectParameter.webConfig">
            <summary>
            网站生成配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.ProjectParameter.WebConfig">
            <summary>
            网站生成配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.ProjectParameter.WebConfigType">
            <summary>
            网站生成配置类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.ProjectParameter.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            自动安装参数
            </summary>
            <param name="projectName">项目名称</param>
            <param name="projectPath">项目路径</param>
            <param name="assemblyPath">程序集文件名全称</param>
            <param name="defaultNamespace">项目默认命名空间</param>
            <param name="isProjectFile">是否自动更新项目文件</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.ProjectParameter.LoadAssembly(System.Boolean@)">
            <summary>
            加载程序集
            </summary>
            <param name="isAssemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.ProjectParameter.run(AutoCSer.CodeGenerator.IGenerator)">
            <summary>
            运行代码生成
            </summary>
            <param name="generator">代码生成接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.ProjectParameter.Start">
            <summary>
            启动代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Ajax">
            <summary>
            AJAX调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Null">
            <summary>
            默认空AJAX调用配置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator">
            <summary>
            AJAX调用代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.typeScript">
            <summary>
            AJAX API代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod">
            <summary>
            方法索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.WebAjaxMethodType">
            <summary>
            获取该方法的类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.MethodIndex">
            <summary>
            方法索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.AsyncIndexName">
            <summary>
            异步处理类索引名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.TypeAttribute">
            <summary>
            类型AJAX调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.TypeCallName">
            <summary>
            类型调用名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.attribute">
            <summary>
            AJAX调用配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.Attribute">
            <summary>
            AJAX调用配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.MaxMemoryStreamSize">
            <summary>
            接收 HTTP Body 数据内存缓冲区的最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.IgnoreCase">
            <summary>
            是否忽略大小写
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.IsPoolType">
            <summary>
            是否使用对象池
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.AjaxCallbackPool">
            <summary>
            AJAX 回调处理类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.callName">
            <summary>
            调用名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.CallName">
            <summary>
            调用名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.InputParameterIndex">
            <summary>
            输入参数索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.InputParameterTypeName">
            <summary>
            输入参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.OutputParameterIndex">
            <summary>
            输入参数索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.OutputParameterTypeName">
            <summary>
            输出参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod.isAsynchronousFunc">
            <summary>
            异步回调是否检测成功状态
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterBuilder">
            <summary>
            参数创建器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterBuilder.ParameterIndexs">
            <summary>
            函数参数类型与名称集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterBuilder.ParameterIndex">
            <summary>
            参数序号
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterBuilder.Clear">
            <summary>
            清楚数据
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterBuilder.Add(AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod)">
            <summary>
            添加方法索引信息
            </summary>
            <param name="method">方法索引信息</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterBuilder.Get">
            <summary>
            获取函数参数类型集合关键字
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod">
            <summary>
            web视图AJAX调用索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.WebViewMethodType">
            <summary>
            获取改方法的类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.Attribute">
            <summary>
            WEB视图配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.MethodIndex">
            <summary>
            方法索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.PageName">
            <summary>
            页面对象名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.CallName">
            <summary>
            调用名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.MaxMemoryStreamSize">
            <summary>
            接收 HTTP Body 数据内存缓冲区的最大字节数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.IsPoolType">
            <summary>
            是否使用对象池
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.IsAwaitMethod">
            <summary>
            是否存在 await 函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethod.IsSetPage">
            <summary>
            页面对象是否需要初始化
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.methods">
            <summary>
            AJAX函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.Methods">
            <summary>
            AJAX 函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ViewMethods">
            <summary>
            web视图AJAX调用
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.SerializeMethods">
            <summary>
            序列化返回值 AJAX 函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.DeSerializeMethods">
            <summary>
            反序列化参数 AJAX 函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.ParameterTypes">
            <summary>
            函数参数类型集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.IsPubError">
            <summary>
            是否存在公用错误处理函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.MethodCount">
            <summary>
            AJAX函数数量
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.IsAttribute">
            <summary>
            是否必须配置自定义属性
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript">
            <summary>
            AJAX API代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript.AutoCSerAPI">
            <summary>
            API 命名空间
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript.code">
            <summary>
            代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript.Create(AutoCSer.CodeGenerator.ProjectParameter,AutoCSer.CodeGenerator.Metadata.ExtensionType,AutoCSer.CodeGenerator.TemplateGenerator.Ajax.Generator.AjaxMethod[])">
            <summary>
            创建代码
            </summary>
            <param name="parameter"></param>
            <param name="type"></param>
            <param name="methodIndexs"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript.OnCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Ajax.TypeScript.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.CSharpTypeDefinition">
            <summary>
            C# 类定义生成
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.CSharpTypeDefinition.#ctor(System.Type,System.Boolean,System.Boolean,System.String)">
            <summary>
            类定义生成
            </summary>
            <param name="type">类型</param>
            <param name="isPartial"></param>
            <param name="isClass"></param>
            <param name="typeNamespace"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.CSharpTypeDefinition.create(System.Type,System.Boolean,System.Boolean,System.String)">
            <summary>
            生成类定义
            </summary>
            <param name="type">类型</param>
            <param name="isPartial">是否部分定义</param>
            <param name="isClass">是否建立类定义</param>
            <param name="typeNamespace"></param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey">
            <summary>
            数据关键字 代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator">
            <summary>
            数据关键字 代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator.PrimaryKeys">
            <summary>
            关键字成员集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator.PrimaryKey0">
            <summary>
            第一个关键字成员
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator.NextPrimaryKeys">
            <summary>
            后续关键字成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator.Run(System.Type,AutoCSer.CodeGenerator.Metadata.MemberIndex[])">
            <summary>
            安装入口
            </summary>
            <param name="type">数据类型</param>
            <param name="primaryKeys">数据类型</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.DataPrimaryKey.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Generator">
            <summary>
            模板生成基类
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator.AutoParameter">
            <summary>
            自动安装参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator.assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Generator.TypeName">
            <summary>
            类名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._code_">
            <summary>
            生成的代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._partCodes_">
            <summary>
            代码段
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Generator.TypeNameDefinition">
            <summary>
            类名称定义
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Generator.NoAccessTypeNameDefinition">
            <summary>
            类名称定义
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._language_">
            <summary>
            代码生成语言
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._definition_">
            <summary>
            类定义生成
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator.outStart(AutoCSer.CodeGenerator.CodeLanguage,System.Boolean)">
            <summary>
            输出类定义开始段代码
            </summary>
            <param name="language">代码生成语言</param>
            <param name="isOutDefinition">是否输出类定义</param>
            <returns>类定义</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._if_">
            <summary>
            临时逻辑变量
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._loopIndex_">
            <summary>
            当前循环索引
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator._loopCount_">
            <summary>
            当前循环数量
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Generator.Async">
            <summary>
            异步关键字
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator.outEnd">
            <summary>
            输出类定义结束段代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator._getCount_``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            获取数据数量
            </summary>
            <param name="value">数据集合</param>
            <returns>null为0</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1">
            <summary>
            自定义属性模板生成基类
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.Attribute">
            <summary>
            自定义属性
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.IsBaseType">
            <summary>
            是否搜索父类属性
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.IsAttribute">
            <summary>
            是否必须配置自定义属性
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.Run(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            安装入口
            </summary>
            <param name="parameter">安装参数</param>
            <returns>是否安装成功</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.GetTypeAttributes">
            <summary>
            获取类型与自定义配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.Generator`1.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.JavaScriptTypeDefinition">
            <summary>
            JavaScript 类定义生成
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.JavaScriptTypeDefinition.#ctor(System.Type)">
            <summary>
            类定义生成
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.MemberGenerator`1">
            <summary>
            自定义属性字段模板生成基类
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.MemberGenerator`1.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression">
            <summary>
            远程表达式 代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator">
            <summary>
            远程表达式 代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter">
            <summary>
            远程表达式参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.Parameter">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.ParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.ParameterName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.ParameterJoinName">
            <summary>
            参数连接名称，最后一个参数不带逗号
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.IsClientNodeParameter">
            <summary>
            是否远程表达式参数类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.RemoteExpressionParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionParameter.Get(AutoCSer.CodeGenerator.Metadata.MethodParameter[])">
            <summary>
            获取远程表达式参数
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression">
            <summary>
            远程表达式成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.Attribute">
            <summary>
            远程表达式成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.Type">
            <summary>
            当前类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.Method">
            <summary>
            成员方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.MemberNodeTypeName">
            <summary>
            远程表达式成员节点类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.GenericMemberNodeTypeName">
            <summary>
            泛型实例化远程表达式成员节点类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.GenericParentMemberNodeTypeName">
            <summary>
            泛型实例化父节点远程表达式成员节点类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.XmlDocument">
            <summary>
            XML 文档注释
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.MemberIsReturn">
            <summary>
            是否存在返回值
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.ReturnTypeIsNull">
            <summary>
            返回值是否可空类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.MemberRemoteExpressionTypeName">
            <summary>
            远程表达式成员节点继承类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.IntputParameters">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.IsClientNodeParameter">
            <summary>
            是否存在表达式节点参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.GenericParameters">
            <summary>
            泛型参数集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.StaticPropertyName">
            <summary>
            静态属性名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.IsStatic">
            <summary>
            是否静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.GenericMemberGroup">
            <summary>
            泛型实例化表达式成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.Expression.CheckGenericMemberGroup">
            <summary>
            检测泛型实例化表达式成员集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.StaticExpression">
            <summary>
            远程表达式成员
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.StaticExpression.IsStatic">
            <summary>
            是否静态成员
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup">
            <summary>
            表达式成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.nodeTypeNames">
            <summary>
            节点名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.type">
            <summary>
            当前类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.memberNodeTypeName">
            <summary>
            泛型实例化父节点远程表达式成员节点类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.Members">
            <summary>
            实例字段 / 属性
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.StaticMembers">
            <summary>
            静态字段 / 属性
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.IsMember">
            <summary>
            成员是否有效
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.#ctor(AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String)">
            <summary>
            表达式成员集合
            </summary>
            <param name="type"></param>
            <param name="memberNodeTypeName"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.ExpressionMemberGroup.addMember``1(AutoCSer.LeftArray{``0}@,``0)">
            <summary>
            添加成员
            </summary>
            <typeparam name="expressionType"></typeparam>
            <param name="members"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.RemoteExpressionTypeName">
            <summary>
            远程表达式容器类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.MemberGroup">
            <summary>
            表达式成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.RemoteExpression.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer">
            <summary>
            TCP 内部服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator">
            <summary>
            TCP 内部服务代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.ServerNameOnly">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.ServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.IsClientCode">
            <summary>
            是否生成客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.IsServerCode">
            <summary>
            是否生成服务器端代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.IsSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer">
            <summary>
            TCP 内部服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator">
            <summary>
            TCP 内部服务代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.ServerNameOnly">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.ServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.IsClientCode">
            <summary>
            是否生成客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.IsServerCode">
            <summary>
            是否生成服务器端代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.IsSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalSimpleServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer">
            <summary>
            TCP 内部服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator">
            <summary>
            TCP 内部服务代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.IsClientCode">
            <summary>
            是否生成客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.IsServerCode">
            <summary>
            是否生成服务器端代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.IsSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpInternalStreamServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer">
            <summary>
            TCP 服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator">
            <summary>
            TCP 服务代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.ServerNameOnly">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.ServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.IsClientCode">
            <summary>
            是否生成客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.IsServerCode">
            <summary>
            是否生成服务器端代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.IsSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer">
            <summary>
            TCP 服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator">
            <summary>
            TCP 服务代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.ServerNameOnly">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.ServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.IsClientCode">
            <summary>
            是否生成客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.IsServerCode">
            <summary>
            是否生成服务器端代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.IsSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenSimpleServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer">
            <summary>
            TCP 服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator">
            <summary>
            TCP 服务代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.ServerNameOnly">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.ServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.IsClientCode">
            <summary>
            是否生成客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.IsServerCode">
            <summary>
            是否生成服务器端代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.IsSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpOpenStreamServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer">
            <summary>
            TCP 服务代码生成基类
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3">
            <summary>
            TCP 服务代码生成
            </summary>
            <typeparam name="attributeType">TCP 服务配置</typeparam>
            <typeparam name="methodAttributeType">TCP 调用函数配置</typeparam>
            <typeparam name="serverSocketType">TCP 服务套接字类型</typeparam>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod">
            <summary>
            方法索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.MethodType">
            <summary>
            获取该方法的类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.ServiceAttribute">
            <summary>
            TCP 服务器端配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.attribute">
            <summary>
            TCP调用配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.Attribute">
            <summary>
            TCP调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.MethodIndex">
            <summary>
            服务方法索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.MethodIdentityCommand">
            <summary>
            TCP 调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.AwaiterMethodIdentityCommand">
            <summary>
            await TCP 调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.MethodStreamName">
            <summary>
            流式套接字调用索引名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.StaticMethodIndex">
            <summary>
            静态服务方法索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.StaticMethodIndexName">
            <summary>
            方法索引名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.StaticMethodIdentityCommand">
            <summary>
            TCP调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.AsynchronousStaticMethodIdentityCommand">
            <summary>
            TCP调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.StaticAwaiterMethodIdentityCommand">
            <summary>
            await TCP 调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsVerifyMethodAsynchronous">
            <summary>
            验证方法是否支持异步
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsVerifyMethod">
            <summary>
            是否验证方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsJsonSerialize">
            <summary>
            是否使用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.returnInputParameter">
            <summary>
            返回值绑定输入参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.ReturnInputParameter">
            <summary>
            返回值绑定输入参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.InputParameterIndex">
            <summary>
            输入参数索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.InputParameterTypeName">
            <summary>
            输入参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsSimpleSerializeInputParamter">
            <summary>
            是否简单序列化输入参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.OutputParameterIndex">
            <summary>
            输入参数索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.OutputParameterTypeName">
            <summary>
            输出参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsSimpleSerializeOutputParamter">
            <summary>
            是否简单序列化输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.clientParameterName">
            <summary>
            客户端标识参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.ClientParameterName">
            <summary>
            客户端标识参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.serverTaskTypeName">
            <summary>
            任务类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.ServerTask">
            <summary>
            服务端任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsMethodServerCall">
            <summary>
            是否定义服务器端调用
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.MethodAsynchronousIdentityCommand">
            <summary>
            TCP调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsOutputParameter">
            <summary>
            是否存在输出参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsClientSynchronous">
            <summary>
            客户端调用是否支持同步
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsClientTaskAsync">
            <summary>
            客户端是否支持 async Task
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsClientAsynchronous">
            <summary>
            客户端调用是否支持异步
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsClientSendOnly">
            <summary>
            是否仅发送数据
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsKeepCallback">
            <summary>
            是否保持异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.clientTaskTypeName">
            <summary>
            任务类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.ClientTask">
            <summary>
            客户端任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsClientAwaiter">
            <summary>
            客户端是否支持 await
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterBoxTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterReferenceTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterBoxReferenceTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.Awaiter">
            <summary>
            await 类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterReturnValueTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterReturnValueBoxTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterReturnValueReferenceTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.awaiterReturnValueBoxReferenceTypeName">
            <summary>
            await 类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.AwaiterReturnValue">
            <summary>
            await 返回值包装类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsSynchronousMethodIdentityCommand">
            <summary>
            是否生成同步 TCP 调用命令名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsAwaiterMethodIdentityCommand">
            <summary>
            是否生成 await TCP 调用命令名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.IsNullMethod">
            <summary>
            是否空方法
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod.checkAsynchronousReturn">
            <summary>
            检测异步回调方法
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod`1">
            <summary>
            方法索引信息
            </summary>
            <typeparam name="methodType">方法索引信息类型</typeparam>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod`1.SetMethod">
            <summary>
            属性或者字段设置值函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.TcpMethod`1.CheckIdentity(`3[],System.Collections.Generic.Dictionary{AutoCSer.HashString,System.Int32},System.Func{`3,System.String},`3)">
            <summary>
            检测方法序号
            </summary>
            <param name="methodIndexs">方法集合</param>
            <param name="rememberIdentityCommand">命令序号记忆数据</param>
            <param name="getMethodKeyName">获取命令名称的委托</param>
            <param name="nullMethod">空方法索引信息</param>
            <returns>方法集合,失败返回null</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder">
            <summary>
            参数创建器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.ParameterIndexs">
            <summary>
            函数参数类型集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.JsonParameterIndexs">
            <summary>
            函数参数类型与名称集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.ParameterIndex">
            <summary>
            参数序号
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.IsSimpleSerialize">
            <summary>
            是否支持简单序列化操作
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.Clear(System.Boolean)">
            <summary>
            清除数据
            </summary>
            <param name="isSimpleSerialize">是否支持简单序列化操作</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.Add(AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase{`0,`1,`2}.TcpMethod)">
            <summary>
            添加方法索引信息
            </summary>
            <param name="method">方法索引信息</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterBuilder.Get">
            <summary>
            获取函数参数类型集合关键字
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ServiceAttribute">
            <summary>
            TCP 服务器端配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.StaticServerName">
            <summary>
            服务类名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ServerRegisterName">
            <summary>
            服务注册名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.AttributeJson">
            <summary>
            TCP服务调用配置JSON
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.ParameterTypes">
            <summary>
            函数参数类型集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.IsVerifyMethod">
            <summary>
            是否存在验证函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.RememberIdentityCommeandName">
            <summary>
            命令序号记忆字段名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.CommandStartIndex">
            <summary>
            用户命令起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.IsCallQueue">
            <summary>
            是否提供独占的 TCP 服务器端同步调用队列
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.IsInternalClient">
            <summary>
            仅程序集可见
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.isSetTcpServer">
            <summary>
            是否存在 AutoCSer.Net.TcpServer.ISetTcpServer 接口函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.nullRememberIdentityName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getRememberIdentityName(System.Type)">
            <summary>
            获取命令序号记忆数据
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getSimpleSerializeMethods``1(``0[])">
            <summary>
            获取简单序列化方法集合
            </summary>
            <typeparam name="tcpMethodType"></typeparam>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getSimpleDeSerializeMethods``1(``0[])">
            <summary>
            简单反序列化方法集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getSerializeMethods``1(``0[])">
            <summary>
            二进制序列化方法集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getDeSerializeMethods``1(``0[])">
            <summary>
            二进制反序列化方法集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getJsonSerializeMethods``1(``0[])">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.GeneratorBase`3.getJsonDeSerializeMethods``1(``0[])">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3">
            <summary>
            TCP 服务代码生成
            </summary>
            <typeparam name="attributeType">TCP 服务配置</typeparam>
            <typeparam name="methodAttributeType">TCP 调用函数配置</typeparam>
            <typeparam name="serverSocketSenderType">TCP 服务套接字数据发送</typeparam>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod">
            <summary>
            方法索引信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod.MethodIndexName">
            <summary>
            方法索引名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod.keepCallbackType">
            <summary>
            保持异步回调类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod.KeepCallbackType">
            <summary>
            保持异步回调类型名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod.IsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod.nullMethod">
            <summary>
            空方法索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.TcpMethod.CheckIdentity(AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator{`0,`1,`2}.TcpMethod[],System.Collections.Generic.Dictionary{AutoCSer.HashString,System.Int32},System.Func{AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator{`0,`1,`2}.TcpMethod,System.String})">
            <summary>
            检测方法序号
            </summary>
            <param name="methodIndexs">方法集合</param>
            <param name="rememberIdentityCommand">命令序号记忆数据</param>
            <param name="getMethodKeyName">获取命令名称的委托</param>
            <returns>方法集合,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.MethodIndexs">
            <summary>
            方法索引集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.SimpleSerializeMethods">
            <summary>
            简单序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.SimpleDeSerializeMethods">
            <summary>
            简单反序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.SerializeMethods">
            <summary>
            二进制序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.DeSerializeMethods">
            <summary>
            二进制反序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.JsonSerializeMethods">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator`3.JsonDeSerializeMethods">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer">
            <summary>
            TCP 服务代码生成基类
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3">
            <summary>
            TCP 服务代码生成
            </summary>
            <typeparam name="attributeType">TCP 服务配置</typeparam>
            <typeparam name="methodAttributeType">TCP 调用函数配置</typeparam>
            <typeparam name="serverSocketType"></typeparam>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.TcpMethod">
            <summary>
            方法索引信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.TcpMethod.IsVerifyMethodAsynchronous">
            <summary>
            验证方法是否支持异步
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.TcpMethod.nullMethod">
            <summary>
            空方法索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.TcpMethod.CheckIdentity(AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator{`0,`1,`2}.TcpMethod[],System.Collections.Generic.Dictionary{AutoCSer.HashString,System.Int32},System.Func{AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator{`0,`1,`2}.TcpMethod,System.String})">
            <summary>
            检测方法序号
            </summary>
            <param name="methodIndexs">方法集合</param>
            <param name="rememberIdentityCommand">命令序号记忆数据</param>
            <param name="getMethodKeyName">获取命令名称的委托</param>
            <returns>方法集合,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.MethodIndexs">
            <summary>
            方法索引集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.SimpleSerializeMethods">
            <summary>
            简单序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.SimpleDeSerializeMethods">
            <summary>
            简单反序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.SerializeMethods">
            <summary>
            二进制序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.DeSerializeMethods">
            <summary>
            二进制反序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.JsonSerializeMethods">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator`3.JsonDeSerializeMethods">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer">
            <summary>
            TCP 静态服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator">
            <summary>
            TCP 静态服务代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.serverPart">
            <summary>
            服务器端位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientPart">
            <summary>
            客户端位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ParameterPart">
            <summary>
            调用参数位置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.PartType">
            <summary>
            生成部分
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.PartType.ServerType">
            <summary>
            服务端 / 客户端
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.PartType.CallType">
            <summary>
            服务代理 / 客户端代理
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.PartType.RemoteLink">
            <summary>
            远程调用链
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server">
            <summary>
            TCP 静态服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.Attribute">
            <summary>
            TCP调用服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.Types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.RemoteLinkTypes">
            <summary>
            远程调用链类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.ClientCodes">
            <summary>
            其它组件添加客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.AttributeType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.IsMethod">
            <summary>
            是否存在方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Server.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ServerType">
            <summary>
            TCP 静态服务类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ServerType.Type">
            <summary>
            TCP调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ServerType.Attribute">
            <summary>
            TCP调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ServerType.Methods">
            <summary>
            方法集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType">
            <summary>
            远程调用链类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.Type">
            <summary>
            TCP调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.ParameterType">
            <summary>
            第一个参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.RemoteKeyMember">
            <summary>
            远程调用链根对象关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.RemoteKeyMethod">
            <summary>
            获取远程调用链根对象的函数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.GetRemoteMethodName">
            <summary>
            获取远程调用链根对象的函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.RemoteMethods">
            <summary>
            远程成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.RemoteMembers">
            <summary>
            远程成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.RemoteLinks">
            <summary>
            远程缓存成员集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.IsRemoteLink">
            <summary>
            是否需要生成远程调用链
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkType.IsRemoteMember">
            <summary>
            是否生成远程成员
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMemberBase">
            <summary>
            远程成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMemberBase.Attribute">
            <summary>
            远程成员配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMemberBase.AttributeIsMethod">
            <summary>
            是否生成函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMemberBase.Member">
            <summary>
            远程成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMemberBase.Method">
            <summary>
            获取函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember">
            <summary>
            远程成员
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember.GetMemberName">
            <summary>
            获取数据函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember.GetTypeMemberName">
            <summary>
            获取数据函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember.RemoteMethodName">
            <summary>
            远程函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember.RemoteTypeMethodName">
            <summary>
            远程函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember.IsMethodReturn">
            <summary>
            函数是否存在返回值
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMember.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod">
            <summary>
            远程成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.Type">
            <summary>
            当前类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.IsMethodReturn">
            <summary>
            函数是否存在返回值
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.MethodParameters">
            <summary>
            函数参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.IsMethod">
            <summary>
            是生成函数还是属性
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.NextParameters">
            <summary>
            函数参数信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.MethodReturnType">
            <summary>
            函数返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.AttributeMemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.AttributeTypeMemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.AttributeMethodName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.AttributeTypeMethodName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMethod.Awaiter">
            <summary>
            Awaiter
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember">
            <summary>
            远程缓存成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember.Attribute">
            <summary>
            远程成员缓存配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember.Member">
            <summary>
            远程成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember.Index">
            <summary>
            层级索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember.IndexName">
            <summary>
            局部变量名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember.ParentIndexName">
            <summary>
            局部变量名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkMember.IsNull">
            <summary>
            是否需要可空检查
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink">
            <summary>
            远程调用链成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.Members">
            <summary>
            前缀成员
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.IndexName">
            <summary>
            局部变量名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.PropertyParameters">
            <summary>
            属性参数集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.GetLinkMemberName">
            <summary>
            获取远程成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.GetLinkTypeMemberName">
            <summary>
            获取远程成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.RemoteLinkMethodName">
            <summary>
            获取远程函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.RemoteLinkTypeMethodName">
            <summary>
            获取远程函数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.IsMethodReturn">
            <summary>
            函数是否存在返回值
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.LinkMemberName">
            <summary>
            远程成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLink.IsAnyNull">
            <summary>
            是否需要可空检查
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder">
            <summary>
            远程调用链成员创建
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.Caches">
            <summary>
            远程缓存成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.members">
            <summary>
            远程缓存成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.Push(AutoCSer.CodeGenerator.Metadata.MemberIndex)">
            <summary>
            添加远程缓存成员
            </summary>
            <param name="member"></param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.cache">
            <summary>
            成员集合缓存
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.cache.Members">
            <summary>
            远程成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.cache.Caches">
            <summary>
            远程缓存成员集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.memberCache">
            <summary>
            成员集合缓存
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteLinkBuilder.getCache(System.Type)">
            <summary>
            获取成员集合
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.Part">
            <summary>
            生成部分
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.TcpServerAttributeType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.servers">
            <summary>
            TCP 静态服务集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.serverTypes">
            <summary>
            TCP 静态服务类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.defaultServerName">
            <summary>
            服务类名称(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.defaultServer">
            <summary>
            TCP调用服务(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.defaultType">
            <summary>
            TCP调用类型(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.TimeVerifyMethod">
            <summary>
            时间验证函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.CurrentRemoteLinkType">
            <summary>
            当前远程调用链类型信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.TimeVerifyClientType">
            <summary>
            客户端时间验证类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.GetTcpCallTypeName(AutoCSer.CodeGenerator.ProjectParameter,AutoCSer.CodeGenerator.Metadata.ExtensionType)">
            <summary>
            获取 TcpCall 调用类型名称
            </summary>
            <param name="namespaceString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.GetRemoteLinkType(System.Type)">
            <summary>
            获取远程调用链类型信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.next(AutoCSer.CodeGenerator.TemplateGenerator.TcpServer.Generator{AutoCSer.Net.TcpStaticServer.ServerAttribute,AutoCSer.Net.TcpStaticServer.MethodAttribute,AutoCSer.Net.TcpInternalServer.ServerSocketSender}.TcpMethod)">
            <summary>
            下一个函数处理
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.getRememberIdentityName">
            <summary>
            获取命令序号记忆数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.clientCodes">
            <summary>
            其它组件产生的客户端代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientCode">
            <summary>
            其它组件产生的客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientCode.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientCode.Attribute">
            <summary>
            TCP 静态服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientCode.Code">
            <summary>
            客户端代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientCode.SegmentationCode">
            <summary>
            客户端代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.AddClientCode(AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.ClientCode)">
            <summary>
            其它组件添加客户端代码
            </summary>
            <param name="code"></param>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.RemoteMemberTypes">
            <summary>
            生成远程成员的类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer">
            <summary>
            TCP 静态服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator">
            <summary>
            TCP 静态服务代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.serverPart">
            <summary>
            服务器端位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.SimpleClientPart">
            <summary>
            客户端位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.SimpleParameterPart">
            <summary>
            调用参数位置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.Server">
            <summary>
            TCP 静态服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.Server.Attribute">
            <summary>
            TCP调用服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.Server.Types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.Server.AttributeType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.Server.IsMethod">
            <summary>
            是否存在方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.Server.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.ServerType">
            <summary>
            TCP 静态服务类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.ServerType.Type">
            <summary>
            TCP调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.ServerType.Attribute">
            <summary>
            TCP调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.ServerType.Methods">
            <summary>
            方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.IsAllType">
            <summary>
            是否所有类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.TcpServerAttributeType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.servers">
            <summary>
            TCP 静态服务集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.serverTypes">
            <summary>
            TCP 静态服务类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.defaultServerName">
            <summary>
            服务类名称(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.defaultServer">
            <summary>
            TCP调用服务(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.defaultType">
            <summary>
            TCP调用类型(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.TimeVerifyMethod">
            <summary>
            时间验证函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.TimeVerifySimpleClientType">
            <summary>
            客户端时间验证类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.next(AutoCSer.CodeGenerator.TemplateGenerator.TcpSimpleServer.Generator{AutoCSer.Net.TcpStaticSimpleServer.ServerAttribute,AutoCSer.Net.TcpStaticSimpleServer.MethodAttribute,AutoCSer.Net.TcpInternalSimpleServer.ServerSocket}.TcpMethod)">
            <summary>
            下一个函数处理
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.getRememberIdentityName">
            <summary>
            获取命令序号记忆数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticSimpleServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer">
            <summary>
            TCP 静态服务代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator">
            <summary>
            TCP 静态服务代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.serverPart">
            <summary>
            服务器端位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.StreamClientPart">
            <summary>
            客户端位置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.StreamParameterPart">
            <summary>
            调用参数位置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.Server">
            <summary>
            TCP 静态服务
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.Server.Attribute">
            <summary>
            TCP调用服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.Server.Types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.Server.AttributeType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.Server.IsMethod">
            <summary>
            是否存在方法
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.Server.IsTimeVerify">
            <summary>
            是否默认时间验证服务
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.ServerType">
            <summary>
            TCP 静态服务类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.ServerType.Type">
            <summary>
            TCP调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.ServerType.Attribute">
            <summary>
            TCP调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.ServerType.Methods">
            <summary>
            方法集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.IsAllType">
            <summary>
            是否所有类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.TcpServerAttributeType">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.servers">
            <summary>
            TCP 静态服务集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.serverTypes">
            <summary>
            TCP 静态服务类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.defaultServerName">
            <summary>
            服务类名称(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.defaultServer">
            <summary>
            TCP调用服务(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.defaultType">
            <summary>
            TCP调用类型(临时变量)
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.TimeVerifyMethod">
            <summary>
            时间验证函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.TimeVerifyStreamClientType">
            <summary>
            客户端时间验证类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.next(AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator{AutoCSer.Net.TcpStaticStreamServer.ServerAttribute,AutoCSer.Net.TcpStaticStreamServer.MethodAttribute,AutoCSer.Net.TcpInternalStreamServer.ServerSocketSender}.TcpMethod)">
            <summary>
            下一个函数处理
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.getRememberIdentityName">
            <summary>
            获取命令序号记忆数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStaticStreamServer.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer">
            <summary>
            TCP 服务代码生成基类
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3">
            <summary>
            TCP 服务代码生成
            </summary>
            <typeparam name="attributeType">TCP 服务配置</typeparam>
            <typeparam name="methodAttributeType">TCP 调用函数配置</typeparam>
            <typeparam name="serverSocketSenderType">TCP 服务套接字数据发送</typeparam>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.TcpMethod">
            <summary>
            方法索引信息
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.TcpMethod.IsMethodServerCall">
            <summary>
            是否定义服务器端调用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.TcpMethod.nullMethod">
            <summary>
            空方法索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.TcpMethod.CheckIdentity(AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator{`0,`1,`2}.TcpMethod[],System.Collections.Generic.Dictionary{AutoCSer.HashString,System.Int32},System.Func{AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator{`0,`1,`2}.TcpMethod,System.String})">
            <summary>
            检测方法序号
            </summary>
            <param name="methodIndexs">方法集合</param>
            <param name="rememberIdentityCommand">命令序号记忆数据</param>
            <param name="getMethodKeyName">获取命令名称的委托</param>
            <returns>方法集合,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.MethodIndexs">
            <summary>
            方法索引集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.SimpleSerializeMethods">
            <summary>
            简单序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.SimpleDeSerializeMethods">
            <summary>
            简单反序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.SerializeMethods">
            <summary>
            二进制序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.DeSerializeMethods">
            <summary>
            二进制反序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.JsonSerializeMethods">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TcpStreamServer.Generator`3.JsonDeSerializeMethods">
            <summary>
            JSON 序列化方法集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.TypeDefinition">
            <summary>
            类定义生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TypeDefinition.start">
            <summary>
            类定义开始
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TypeDefinition.Start">
            <summary>
            类定义开始
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.TypeDefinition.end">
            <summary>
            类定义结束
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.TypeDefinition.End">
            <summary>
            类定义结束
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebCall">
            <summary>
            web调用代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Null">
            <summary>
            默认空WEB调用配置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator">
            <summary>
            web调用代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethods">
            <summary>
            WEB 调用函数集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod">
            <summary>
            方法索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.WebCallMethodType">
            <summary>
            获取改方法的类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.WebCallAsynchronousMethodType">
            <summary>
            获取改方法的类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.MethodIndex">
            <summary>
            方法索引
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.TypeAttribute">
            <summary>
            类型WEB调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.TypeCallName">
            <summary>
            类型调用名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.attribute">
            <summary>
            WEB调用配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.Attribute">
            <summary>
            WEB调用配置
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.MaxMemoryStreamSize">
            <summary>
            内存流最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.IgnoreCase">
            <summary>
            是否忽略大小写
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.IsPoolType">
            <summary>
            是否使用对象池
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.IsAsynchronous">
            <summary>
            是否异步调用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.callName">
            <summary>
            调用名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.CallName">
            <summary>
            调用名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.ParameterIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.ParameterTypeName">
            <summary>
            参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.IsAjaxLoad">
            <summary>
            是否AJAX加载器
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod.CallMethodInfo">
            <summary>
            函数调用信息
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterBuilder">
            <summary>
            参数创建器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterBuilder.ParameterIndexs">
            <summary>
            函数参数类型与名称集合关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterBuilder.ParameterIndex">
            <summary>
            参数序号
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterBuilder.Clear">
            <summary>
            清楚数据
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterBuilder.Add(AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.CallMethod)">
            <summary>
            添加方法索引信息
            </summary>
            <param name="method">方法索引信息</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterBuilder.Get">
            <summary>
            获取函数参数类型集合关键字
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.methods">
            <summary>
            WEB调用函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.Methods">
            <summary>
            WEB 调用函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.ParameterTypes">
            <summary>
            函数参数类型集合关键字
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.IsAttribute">
            <summary>
            是否必须配置自定义属性
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebCall.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebPath">
            <summary>
            WEB Path 代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.AutoCSerPath">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1">
            <summary>
            WEB Path 代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.Default">
            <summary>
            WEB Path 代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember">
            <summary>
            Path 成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember.OtherQuery">
            <summary>
            其他查询前缀
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember.QueryName">
            <summary>
            查询名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember.IsIdentity">
            <summary>
            是否 Id 传参
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMember.IsHash">
            <summary>
            是否 #! 查询
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.outputFileName">
            <summary>
            输出文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.code">
            <summary>
            代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.PathMembers">
            <summary>
            Path 成员
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.outputFileExtensionName">
            <summary>
            输出文件扩展名称
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.onCreatedCode">
            <summary>
            安装完成处理代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.Generator`1.Run(System.Type,System.String)">
            <summary>
            安装入口
            </summary>
            <param name="exportPathType">导出引导类型</param>
            <param name="outputFileName"></param>
            <returns>是否安装成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.JavaScript">
            <summary>
            WEB Path JavaScript 代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.JavaScript.outputFileExtensionName">
            <summary>
            输出文件扩展名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.JavaScript.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.JavaScript.onCreatedCode">
            <summary>
            安装完成处理代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.JavaScript.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.TypeScript">
            <summary>
            WEB Path TypeScript 代码生成
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.TypeScript.outputFileExtensionName">
            <summary>
            输出文件扩展名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.TypeScript.onCreatedCode">
            <summary>
            安装完成处理代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebPath.TypeScript.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView">
            <summary>
            WEB 视图配置
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.getLoadMethod(System.Type,AutoCSer.WebView.ViewAttribute@)">
            <summary>
            获取视图加载函数+视图加载函数配置
            </summary>
            <param name="type">视图类型</param>
            <param name="attribute">视图加载函数配置</param>
            <returns>视图加载函数</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder">
            <summary>
            HTML 模板建树器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.atCommand">
            <summary>
            @取值command
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.tree">
            <summary>
            建树器
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.Boot">
            <summary>
            树节点
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.#ctor(System.String)">
            <summary>
            HTML模板建树器
            </summary>
            <param name="html">HTML</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.appendHtml(AutoCSer.SubString)">
            <summary>
            添加HTML片段
            </summary>
            <param name="html">HTML片段</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.appendAtNode(AutoCSer.SubString)">
            <summary>
            添加 @ 节点
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.appendNode(System.Int32,AutoCSer.WebView.ViewTreeTag)">
            <summary>
            添加节点
            </summary>
            <param name="tagIndex"></param>
            <param name="tag"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.onCreated">
            <summary>
            HTML模板树创建完毕
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeBuilder.GetHtmlIndex(AutoCSer.SubString@)">
            <summary>
            获取HTML片段索引号
            </summary>
            <param name="html">HTML片段</param>
            <returns>索引号</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode">
            <summary>
            HTML模板树节点
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.Tag">
            <summary>
            树节点标识
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.TemplateCommand">
            <summary>
            模板命令
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.TemplateMemberName">
            <summary>
            模板成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.TemplateCode">
            <summary>
            模板文本代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.TemplateMemberNameBeforeAt">
            <summary>
            模板成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.childs">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.Childs">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.ChildCount">
            <summary>
            子节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode.SetChilds(AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode[])">
            <summary>
            设置子节点集合
            </summary>
            <param name="childs">子节点集合</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate">
            <summary>
            HTML模板解析
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxQuoteRegex">
            <summary>
            AJAX引号替换
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxNameSortHandle">
            <summary>
            视图AJAX成员节点有序名称排序
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.treeBuilder">
            <summary>
            HTML模板建树器
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.HtmlCount">
            <summary>
            HTML片段数量
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.viewQueryName">
            <summary>
            视图查询参数名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.isCollectionLength">
            <summary>
            集合是否支持length属性
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.#ctor(System.Type,System.String)">
            <summary>
            HTML模板解析
            </summary>
            <param name="type">模板关联视图类型</param>
            <param name="html">HTML模板</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.checkErrorMemberName(AutoCSer.SubString@)">
            <summary>
            检测错误成员名称
            </summary>
            <param name="memberName">成员名称</param>
            <returns>是否忽略错误</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.pushCode(AutoCSer.SubString)">
            <summary>
            添加代码
            </summary>
            <param name="code">代码</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.pushCode">
            <summary>
            截断代码字符串
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.checkMemberName(AutoCSer.SubString@,System.Boolean@)">
            <summary>
            检测成员名称
            </summary>
            <param name="memberName"></param>
            <param name="isClient"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.at(AutoCSer.CodeGenerator.TemplateGenerator.WebView.ViewTreeNode)">
            <summary>
            输出绑定的数据
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.at(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,System.Boolean,System.Boolean)">
            <summary>
            输出绑定的数据
            </summary>
            <param name="member">成员节点</param>
            <param name="isToHtml"></param>
            <param name="isToTextArea"></param>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxCode">
            <summary>
            视图AJAX代码
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.Ajax">
            <summary>
            视图AJAX输出
            </summary>
            <returns>AJAX字符串</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajax(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,System.String)">
            <summary>
            视图AJAX成员节点代码
            </summary>
            <param name="node">成员节点</param>
            <param name="parentPath">父节点路径</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxName(AutoCSer.CodeGenerator.TreeTemplate.MemberNode)">
            <summary>
            视图AJAX成员节点有序名称集合
            </summary>
            <param name="node">成员节点</param>
            <returns>视图AJAX成员节点有序名称集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxLoopNames(AutoCSer.CodeGenerator.TreeTemplate.MemberNode)">
            <summary>
            视图AJAX循环成员节点名称
            </summary>
            <param name="node">成员节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxLoop(AutoCSer.CodeGenerator.TreeTemplate.MemberNode)">
            <summary>
            视图AJAX循环成员节点数据
            </summary>
            <param name="node">成员节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxValue(AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String)">
            <summary>
            视图AJAX叶子成员节点代码
            </summary>
            <param name="type">成员类型</param>
            <param name="name">成员名称</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.memberIgnore(System.Int32)">
            <summary>
            获取忽略输出变量名称
            </summary>
            <param name="index">忽略输出变量层次</param>
            <returns>忽略输出变量名称</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxNameSort(AutoCSer.KeyValue{AutoCSer.SubString,AutoCSer.CodeGenerator.TreeTemplate.MemberNode},AutoCSer.KeyValue{AutoCSer.SubString,AutoCSer.CodeGenerator.TreeTemplate.MemberNode})">
            <summary>
            视图AJAX成员节点有序名称排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TreeTemplate.ajaxQuote(System.Text.RegularExpressions.Match)">
            <summary>
            AJAX引号替换
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator`1">
            <summary>
            WEB 代码生成
            </summary>
            <typeparam name="attributeType"></typeparam>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator`1.LoadMethod">
            <summary>
            视图加载函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator`1.LoadAttribute">
            <summary>
            视图加载函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator`1.SessionType">
            <summary>
            Session类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator`1.IsServer">
            <summary>
            是否WEB视图服务代码生成
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator`1.Run(AutoCSer.CodeGenerator.ProjectParameter)">
            <summary>
            安装入口
            </summary>
            <param name="parameter">安装参数</param>
            <returns>是否安装成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator">
            <summary>
            WEB视图代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.typeScript">
            <summary>
            WEB 视图 API代码生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.AjaxAwaitMethodTypes">
            <summary>
            ajax 函数存在 await 函数的类型集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType">
            <summary>
            WEB视图类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.Type">
            <summary>
            WEB视图类型
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.WebViewMethodType">
            <summary>
            WEB视图类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.Attribute">
            <summary>
            WEB视图配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.LoadMethod">
            <summary>
            视图加载函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.DefaultNamespace">
            <summary>
            默认程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.Index">
            <summary>
            序号
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.PageIndex">
            <summary>
            页面序号
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.PageName">
            <summary>
            页面对象名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.IgnoreCase">
            <summary>
            是否忽略大小写
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.callTypeName">
            <summary>
            WEB视图调用类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.callName">
            <summary>
            WEB视图调用名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.CallName">
            <summary>
            WEB视图调用名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.RewriteJs">
            <summary>
            来源重写js文件重定向
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.RewritePath">
            <summary>
            WEB视图重写路径
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.IsAwaitMethod">
            <summary>
            是否 await 函数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.IsPoolType">
            <summary>
            是否使用对象池
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType.IsSetPage">
            <summary>
            页面对象是否需要初始化
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.views">
            <summary>
            WEB视图类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.Views">
            <summary>
            WEB视图类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.CallMethods">
            <summary>
            WEB 调用函数查询参数名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewPageCount">
            <summary>
            WEB视图页面数量
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.RewriteViewCount">
            <summary>
            来源路径重写数量
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.HtmlFile">
            <summary>
            HTML文件名
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.QueryMembers">
            <summary>
            查询成员信息集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.IsQuery">
            <summary>
            是否存在查询参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.HtmlCount">
            <summary>
            HTML片段数量
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.PageCode">
            <summary>
            服务器端页面代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.AjaxCode">
            <summary>
            AJAX输出
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.IsPoolType">
            <summary>
            是否使用对象池
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.IsAwaitMethod">
            <summary>
            是否 await 函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.IsSetPage">
            <summary>
            页面对象是否需要初始化
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.Htmls">
            <summary>
            HTML 数据字段名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.HtmlLock">
            <summary>
            HTML 数据访问锁字段名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.IsAttribute">
            <summary>
            是否必须配置自定义属性
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.nextCreate">
            <summary>
            安装下一个类型
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.onCreated">
            <summary>
            安装完成处理
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript">
            <summary>
            AJAX API代码生成
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.Name">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.HashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.#ctor(AutoCSer.CodeGenerator.ProjectParameter,AutoCSer.CodeGenerator.Metadata.ExtensionType)">
            <summary>
            类型
            </summary>
            <param name="parameter"></param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.Equals(AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.TypeKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.codes">
            <summary>
            代码集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.types">
            <summary>
            类型集合
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.Code">
            <summary>
            API生成
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.View">
            <summary>
            WEB视图类型信息
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.Create(AutoCSer.CodeGenerator.ProjectParameter,AutoCSer.CodeGenerator.Metadata.ExtensionType,AutoCSer.CodeGenerator.TemplateGenerator.WebView.Generator.ViewType,AutoCSer.CodeGenerator.Metadata.MethodIndex)">
            <summary>
            创建代码
            </summary>
            <param name="parameter"></param>
            <param name="type"></param>
            <param name="view"></param>
            <param name="loadMethod"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TemplateGenerator.WebView.TypeScript.create(System.Boolean)">
            <summary>
            生成代码
            </summary>
            <param name="isOut">是否输出代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Ajax.AjaxLoader">
            <summary>
            AJAX函数调用
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub">
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
            <summary>
            CSharp模板公用模糊类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebAjaxMethodType">
            <summary>
            获取该函数的类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebAjaxMethodType.FullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebAjaxMethodType.FullName.MethodName(System.Object[])">
            <summary>
            web调用
            </summary>
            <param name="value">调用参数</param>
            <returns>返回值</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.FullName">
            <summary>
            类型全名
            </summary>
            <summary>
            
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            类型全名
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.FullName.RemoteExpression">
            <summary>
            远程表达式节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.FullName.Node">
            <summary>
            远程表达式参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.FullName.Checker">
            <summary>
            客户端检测服务端映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.SetTcpServer(AutoCSer.Net.TcpInternalServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.SetTcpServer(AutoCSer.Net.TcpInternalSimpleServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.SetTcpServer(AutoCSer.Net.TcpInternalStreamServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.SetTcpServer(AutoCSer.Net.TcpOpenSimpleServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.SetTcpServer(AutoCSer.Net.TcpOpenServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.SetTcpServer(AutoCSer.Net.TcpOpenStreamServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticSimpleServer">
            <summary>
            TCP调用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticSimpleServer.PropertyName">
            <summary>
            字段/属性调用
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticSimpleServer.StaticMethodIndexName(System.Object[])">
            <summary>
            TCP函数调用
            </summary>
            <param name="value">调用参数</param>
            <returns>返回值</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticServer">
            <summary>
            TCP调用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticServer.PropertyName">
            <summary>
            字段/属性调用
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticServer.StaticMethodIndexName(System.Object[])">
            <summary>
            TCP函数调用
            </summary>
            <param name="value">调用参数</param>
            <returns>返回值</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticStreamServer">
            <summary>
            TCP调用
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticStreamServer.PropertyName">
            <summary>
            字段/属性调用
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.FullName.TcpStaticStreamServer.StaticMethodIndexName(System.Object[])">
            <summary>
            TCP函数调用
            </summary>
            <param name="value">调用参数</param>
            <returns>返回值</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.FullName.WebViewQuery">
            <summary>
            查询参数类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.MemberType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.ParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.MethodReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName">
            <summary>
            带引用修饰的参数类型名称
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.ParameterTypeName">
            <summary>
            参数类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.MemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.Pub.PropertyName">
            <summary>
            字段/属性
            </summary>
            <param name="value">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.Pub.Item(System.Object[])">
            <summary>
            函数调用
            </summary>
            <param name="name">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.MethodName(System.Object[])">
            <summary>
            函数调用
            </summary>
            <param name="value">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.Pub.StaticPropertyName">
            <summary>
            字段/属性
            </summary>
            <param name="value">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.StaticMethodName(System.Object[])">
            <summary>
            函数调用
            </summary>
            <param name="value">参数</param>
            <returns>返回值</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.RemoteExpressionParameterType">
            <summary>
            远程表达式参数类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.MemberRemoteExpressionTypeName">
            <summary>
            远程表达式节点类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.KeepCallbackType">
            <summary>
            保持异步回调类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace">
            <summary>
            默认命名空间
            </summary>
            <summary>
            默认命名空间
            </summary>
            <summary>
            默认命名空间
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace.SimpleParameterPart">
            <summary>
            调用参数代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace.SimpleClientPart">
            <summary>
            客服端代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace.ParameterPart">
            <summary>
            调用参数代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace.ClientPart">
            <summary>
            客服端代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace.StreamParameterPart">
            <summary>
            调用参数代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.DefaultNamespace.StreamClientPart">
            <summary>
            客服端代码
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.TimeVerifySimpleClientType">
            <summary>
            客户端时间验证类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.TimeVerifySimpleClientType.verify">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.TcpServerAttributeType">
            <summary>
            TCP配置类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.MethodType">
            <summary>
            获取该函数的类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.TimeVerifyClientType">
            <summary>
            客户端时间验证类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.TimeVerifyClientType.verify">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.TimeVerifyStreamClientType">
            <summary>
            客户端时间验证类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.Pub.TimeVerifyStreamClientType.verify">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebCallMethodType">
            <summary>
            获取该函数的类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebCallMethodType.FullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebCallMethodType.FullName.MethodName(System.Object[])">
            <summary>
            web调用
            </summary>
            <param name="value">调用参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebCallMethodType.FullName.CancelGetForm">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebCallMethodType.FullName.callAjax(System.Int32,AutoCSer.WebView.AjaxBase)">
            <summary>
            
            </summary>
            <param name="callIndex"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebCallAsynchronousMethodType">
            <summary>
            获取该函数的类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebCallAsynchronousMethodType.FullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebCallAsynchronousMethodType.FullName.MethodName(System.Object[])">
            <summary>
            web调用
            </summary>
            <param name="value">调用参数</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebCallAsynchronousMethodType.FullName.CancelGetForm">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebCallAsynchronousMethodType.FullName.callAjax(System.Int32,AutoCSer.WebView.AjaxBase)">
            <summary>
            
            </summary>
            <param name="callIndex"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.SessionType">
            <summary>
            Session类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebViewMethodType">
            <summary>
            获取该函数的类型
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebViewMethodType.FullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.Pub.WebViewMethodType.FullName.CancelGetForm">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebConfigType">
            <summary>
            网站生成配置
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.Pub.WebConfigType.FullName">
            <summary>
            类型全名
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey.MemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey.Equals(AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey)">
            <summary>
            关键字比较
            </summary>
            <param name="other">关键字</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey.GetHashCode">
            <summary>
            哈希编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey.Equals(System.Object)">
            <summary>
            关键字比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey.CompareTo(AutoCSer.CodeGenerator.Template.DataPrimaryKey.TypeNameDefinition.DataPrimaryKey)">
            <summary>
            关键字比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName">
            <summary>
            @Type.XmlDocument 远程表达式
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.MemberNodeTypeName">
            <summary>
            @XmlDocument 远程表达式
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.MemberNodeTypeName.GenericMemberNodeTypeName">
            <summary>
            @XmlDocument 远程表达式
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.MemberNodeTypeName.GenericMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>@XmlDocument 远程表达式</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.MemberNodeTypeName.Item(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>@XmlDocument 远程表达式</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.MemberNodeTypeName.MemberName">
            <summary>
            @XmlDocument 远程表达式
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.GenericMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>@XmlDocument 远程表达式</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.Item(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>@XmlDocument 远程表达式</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.MemberName">
            <summary>
            @XmlDocument 远程表达式
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.GenericStaticMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>@XmlDocument 远程表达式</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.RemoteExpression.TypeNameDefinition.RemoteExpressionTypeName.StaticPropertyName">
            <summary>
            @XmlDocument 远程表达式
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalServer">
            <summary>
            @ServerRegisterName TCP服务/*NOT:IsServerCode*/参数/*NOT:IsServerCode*/
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalServer.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.CodeGenerator.Template.Pub.FullName,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalServer.DoCommand(System.Int32,AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient,AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.MethodName(AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.AwaiterMethodName(AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.TaskAsyncMethodName(AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.CodeGenerator.Template.Pub.FullName}})">
            <returns>保持异步回调</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpInternalServer.TypeNameDefinition.TcpInternalClient.Item(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleServer">
            <summary>
            @ServerRegisterName TCP服务/*NOT:IsServerCode*/参数/*NOT:IsServerCode*/
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleServer.#ctor(AutoCSer.Net.TcpInternalSimpleServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleServer.DoCommand(System.Int32,AutoCSer.Net.TcpInternalSimpleServer.ServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="socket">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleClient.#ctor(AutoCSer.Net.TcpInternalSimpleServer.ServerAttribute,System.Func{AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleClient,System.Boolean},AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpInternalSimpleServer.TypeNameDefinition.TcpInternalSimpleClient.Item(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamServer">
            <summary>
            @ServerRegisterName TCP服务/*NOT:IsServerCode*/参数/*NOT:IsServerCode*/
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamServer.#ctor(AutoCSer.Net.TcpInternalStreamServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamServer.DoCommand(System.Int32,AutoCSer.Net.TcpInternalStreamServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.#ctor(AutoCSer.Net.TcpInternalStreamServer.ServerAttribute,System.Func{AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient,AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,System.Boolean},AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.MethodName(AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.AwaiterMethodName(AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.TaskAsyncMethodName(AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.CodeGenerator.Template.Pub.FullName}})">
            <param name="_onReturn_">@Method.ReturnXmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpInternalStreamServer.TypeNameDefinition.TcpInternalStreamClient.Item(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleServer">
            <summary>
            @ServerRegisterName TCP服务/*NOT:IsServerCode*/参数/*NOT:IsServerCode*/
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleServer.#ctor(AutoCSer.Net.TcpOpenSimpleServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleServer.DoCommand(System.Int32,AutoCSer.Net.TcpOpenSimpleServer.ServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="socket">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleClient.#ctor(AutoCSer.Net.TcpOpenSimpleServer.ServerAttribute,System.Func{AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleClient,System.Boolean},AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpOpenSimpleServer.TypeNameDefinition.TcpOpenSimpleClient.Item(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenServer">
            <summary>
            @ServerRegisterName TCP服务/*NOT:IsServerCode*/参数/*NOT:IsServerCode*/
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenServer.#ctor(AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.CodeGenerator.Template.Pub.FullName,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenServer.DoCommand(System.Int32,AutoCSer.Net.TcpOpenServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.#ctor(AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Func{AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient,AutoCSer.Net.TcpOpenServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.MethodName(AutoCSer.Net.TcpOpenServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.AwaiterMethodName(AutoCSer.Net.TcpOpenServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.TaskAsyncMethodName(AutoCSer.Net.TcpOpenServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.CodeGenerator.Template.Pub.FullName}})">
            <returns>保持异步回调</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpOpenServer.TypeNameDefinition.TcpOpenClient.Item(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamServer">
            <summary>
            @ServerRegisterName TCP服务/*NOT:IsServerCode*/参数/*NOT:IsServerCode*/
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamServer.#ctor(AutoCSer.Net.TcpOpenStreamServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamServer.DoCommand(System.Int32,AutoCSer.Net.TcpOpenStreamServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.#ctor(AutoCSer.Net.TcpOpenStreamServer.ServerAttribute,System.Func{AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient,AutoCSer.Net.TcpOpenStreamServer.ClientSocketSender,System.Boolean},AutoCSer.Log.ILog)">
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.MethodName(AutoCSer.Net.TcpOpenStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.AwaiterMethodName(AutoCSer.Net.TcpOpenStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.TaskAsyncMethodName(AutoCSer.Net.TcpOpenStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.CodeGenerator.Template.Pub.FullName}})">
            <param name="_onReturn_">@Method.ReturnXmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpOpenStreamServer.TypeNameDefinition.TcpOpenStreamClient.Item(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.TcpCallSimple">
            <summary>
            TCP调用客户端
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.TcpCallSimple.NoAccessTypeNameDefinition">
            <summary>
            @Type.XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.TcpCallSimple.NoAccessTypeNameDefinition.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.TcpCallSimple.NoAccessTypeNameDefinition.PropertyName">
            <summary>
            @Method.XmlDocument
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName">
            <summary>
            TCP调用服务端
            </summary>
            <summary>
            TCP调用客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.#ctor(AutoCSer.Net.TcpInternalSimpleServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.Log.ILog)">
            <summary>
            TCP调用服务端
            </summary>
            <param name="attribute">TCP调用服务器端配置信息</param>
            <param name="verify">TCP验证实例</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.DoCommand(System.Int32,AutoCSer.Net.TcpInternalSimpleServer.ServerSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="socket">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.ClientConfig">
            <summary>
            TCP 静态调用客户端参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.ClientConfig.ServerAttribute">
            <summary>
            TCP 内部服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.ClientConfig.Log">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.ClientConfig.VerifyMethod">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticSimpleServer.ServerName.TcpClient">
            <summary>
            默认客户端TCP调用
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.GetMemberName(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>@XmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.GetLinkMemberName(AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@XmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteLinkMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.GetTypeMemberName(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <summary>
            @XmlDocument
            </summary>
            <param name="value">@Type.XmlDocument</param>
            <returns>@XmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteTypeMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.GetLinkTypeMemberName(AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@XmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteLinkTypeMethodName(AutoCSer.CodeGenerator.Template.Pub.FullName,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@ReturnXmlDocument</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteExtension">
            <summary>
            远程对象扩展
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteExtension.Value">
            <summary>
            @Type.XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteExtension.AttributeMethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteExtension.AttributeMemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteExtension.AttributeTypeMethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.RemoteExtension.AttributeTypeMemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticServer.TypeNameDefinition.Remote">
            <summary>
            远程对象扩展
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall">
            <summary>
            TCP调用客户端
            </summary>
            <summary>
            TCP调用客户端
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition">
            <summary>
            @Type.XmlDocument
            </summary>
            <summary>
            @Type.XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.MethodName(AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.AwaiterMethodName(AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.TaskAsyncMethodName(AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.CodeGenerator.Template.Pub.FullName}})">
            <returns>保持异步回调</returns>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.PropertyName">
            <summary>
            @Method.XmlDocument
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension">
            <summary>
            远程对象扩展
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension.MemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension.AttributeMethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension.AttributeMemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension.Value">
            <summary>
            @Type.XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension.AttributeTypeMethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteExtension.AttributeTypeMemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.Remote(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>远程对象扩展</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.TcpCall.NoAccessTypeNameDefinition.RemoteType(AutoCSer.CodeGenerator.Template.Pub.FullName)">
            <returns>远程对象扩展</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName">
            <summary>
            TCP调用服务端
            </summary>
            <summary>
            TCP调用客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP调用服务端
            </summary>
            <param name="attribute">TCP调用服务器端配置信息</param>
            <param name="verify">TCP验证实例</param>
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.DoCommand(System.Int32,AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.ClientConfig">
            <summary>
            TCP 静态调用客户端参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.ClientConfig.ServerAttribute">
            <summary>
            TCP 内部服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.ClientConfig.OnCustomData">
            <summary>
            自定义数据包处理
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.ClientConfig.Log">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.ClientConfig.VerifyMethod">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticServer.ServerName.TcpClient">
            <summary>
            默认客户端TCP调用
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream">
            <summary>
            TCP调用客户端
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition">
            <summary>
            @Type.XmlDocument
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <param name="@ParameterName">@XmlDocument</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition.MethodName(AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition.AwaiterMethodName(AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition.TaskAsyncMethodName(AutoCSer.Net.TcpInternalStreamServer.ClientSocketSender,AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName)">
            <returns>@Method.ReturnXmlDocument</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition.MethodName(AutoCSer.CodeGenerator.Template.Pub.ParameterTypeRefName,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.CodeGenerator.Template.Pub.FullName}})">
            <param name="_onReturn_">@Method.ReturnXmlDocument</param>
        </member>
        <member name="P:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.TcpCallStream.NoAccessTypeNameDefinition.PropertyName">
            <summary>
            @Method.XmlDocument
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName">
            <summary>
            TCP调用服务端
            </summary>
            <summary>
            TCP调用客户端
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.RememberIdentityCommeandName">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.#ctor(AutoCSer.Net.TcpInternalStreamServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.Log.ILog)">
            <summary>
            TCP调用服务端
            </summary>
            <param name="attribute">TCP调用服务器端配置信息</param>
            <param name="verify">TCP验证实例</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.DoCommand(System.Int32,AutoCSer.Net.TcpInternalStreamServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.ClientConfig">
            <summary>
            TCP 静态调用客户端参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.ClientConfig.ServerAttribute">
            <summary>
            TCP 内部服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.ClientConfig.Log">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.ClientConfig.VerifyMethod">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.TcpStaticStreamServer.ServerName.TcpClient">
            <summary>
            默认客户端TCP调用
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.WebCall.WebServer">
            <summary>
            WEB服务器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.WebView.TypeNameDefinition.WebViewQuery.MemberName">
            <summary>
            @XmlDocument
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.WebView.TypeNameDefinition.QueryName">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.WebView.TypeNameDefinition.loadView">
            <summary>
            WEB视图加载
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.Template.WebView.WebServer">
            <summary>
            WEB服务器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Template.WebView.WebServer.WebConfig">
            <summary>
            网站生成配置
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Template.WebView.WebServer.getWebConfig">
            <summary>
            网站生成配置
            </summary>
            <returns>网站生成配置</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder">
            <summary>
            CSharp代码建树器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.RegionGroupName">
            <summary>
            #region代码段分组名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.CommandGroupName">
            <summary>
            command代码段分组名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.ContentGroupName">
            <summary>
            内容分组名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.AtCommand">
            <summary>
            @取值command
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Commands">
            <summary>
            所有command
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.CommandContent">
            <summary>
            command后续取值范围
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.regionTag">
            <summary>
            #region代码段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.noteTag">
            <summary>
            /**/注释代码段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.AtContent">
            <summary>
            @后续取值范围
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.atTag">
            <summary>
            @取值
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder.Tag">
            <summary>
            CSharp代码树节点标识
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder.Tag.Type">
            <summary>
            树节点标识类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.Type.Code">
            <summary>
            普通代码段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.Type.Region">
            <summary>
            #region代码段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.Type.Note">
            <summary>
            /**/注释代码段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.Type.At">
            <summary>
            @取值代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.TagType">
            <summary>
            树节点标识类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.Command">
            <summary>
            标识command
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Tag.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.Tag.Equals(AutoCSer.CodeGenerator.TreeBuilder.Tag)">
            <summary>
            判断树节点标识是否相等
            </summary>
            <param name="other">树节点标识</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.Tag.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder.Node">
            <summary>
            CSharp代码树节点
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.Tag">
            <summary>
            树节点标识
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.TemplateCommand">
            <summary>
            模板命令
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.TemplateMemberName">
            <summary>
            模板成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.TemplateMemberNameBeforeAt">
            <summary>
            模板成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.TemplateCode">
            <summary>
            模板文本代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.ChildCount">
            <summary>
            子节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder.Node.Childs">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.Node.childs">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.Node.SetChilds(AutoCSer.CodeGenerator.TreeBuilder.Node[])">
            <summary>
            设置子节点集合
            </summary>
            <param name="childs">子节点集合</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.Node.GetFirstNodeByTag(AutoCSer.CodeGenerator.Coder.Command,AutoCSer.SubString@)">
            <summary>
            获取第一个匹配的子孙节点
            </summary>
            <param name="command">模板命令类型</param>
            <param name="content">内容</param>
            <returns>匹配的CSharp代码树节点</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder.tree">
            <summary>
            建树器
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.Create(System.String)">
            <summary>
            根据代码获取代码树
            </summary>
            <param name="code">代码</param>
            <returns>代码树</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.region(System.String)">
            <summary>
            解析#region代码段
            </summary>
            <param name="code">代码</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.note(System.String)">
            <summary>
            解析/**/注释代码段
            </summary>
            <param name="code">代码</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.at(System.String)">
            <summary>
            解析@取值
            </summary>
            <param name="code">代码</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder.code(AutoCSer.SubString)">
            <summary>
            普通代码段
            </summary>
            <param name="code">代码</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder`2">
            <summary>
            建树器
            </summary>
            <typeparam name="nodeType">树节点类型</typeparam>
            <typeparam name="tagType">树节点标识类型</typeparam>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder`2.INode">
            <summary>
            节点接口
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeBuilder`2.INode.Tag">
            <summary>
            树节点标识
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.INode.SetChilds(`0[])">
            <summary>
            设置子节点集合
            </summary>
            <param name="childs">子节点集合</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeBuilder`2.CheckType">
            <summary>
            检测节点回合状态
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder`2.CheckType.Ok">
            <summary>
            节点回合成功
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder`2.CheckType.LessRound">
            <summary>
            缺少回合节点
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder`2.CheckType.UnknownRound">
            <summary>
            未知的回合节点
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeBuilder`2.nodes">
            <summary>
            当前节点集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.Empty">
            <summary>
            清除节点
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.Append(`0)">
            <summary>
            追加新节点
            </summary>
            <param name="node">新节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.Append(`0,System.Boolean)">
            <summary>
            追加新节点
            </summary>
            <param name="node">新节点</param>
            <param name="isRound">是否需要判断回合</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.IsRound(`1,System.Boolean)">
            <summary>
            节点回合
            </summary>
            <param name="tagName">树节点标识</param>
            <param name="isAny">是否匹配任意索引位置,否则只能匹配最后一个索引位置</param>
            <returns>节点回合是否成功</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.End">
            <summary>
            建树结束
            </summary>
            <returns>根节点集合</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.round(`1,System.Boolean)">
            <summary>
            节点回合
            </summary>
            <param name="tagName">树节点标识</param>
            <param name="isAny"></param>
            <returns>节点回合状态</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeBuilder`2.Round(`1)">
            <summary>
            节点回合
            </summary>
            <param name="tagName">树节点标识</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeTemplate">
            <summary>
            树节点模板
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.memberCache">
            <summary>
            成员信息缓存集合
            </summary>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeTemplate.MemberNode">
            <summary>
            成员树节点
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.template">
            <summary>
            树节点模板
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.Type">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.name">
            <summary>
            当前节点成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.Parent">
            <summary>
            父节点成员
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.Path">
            <summary>
            节点路径
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.FullPath">
            <summary>
            节点路径全称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.IsNextPath">
            <summary>
            节点路径上是否有下级路径
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.OutputAjax">
            <summary>
            Ajax视图输出参数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.IsIgnoreNull">
            <summary>
            是否忽略null值输出
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.IsAwaitMethod">
            <summary>
            是否 await 函数
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.AwaitPath">
            <summary>
            节点路径
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.Members">
            <summary>
            成员名称+成员信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.#ctor(AutoCSer.CodeGenerator.TreeTemplate,AutoCSer.CodeGenerator.Metadata.ExtensionType,AutoCSer.SubString@,System.String,AutoCSer.WebView.OutputAjaxAttribute,System.Boolean)">
            <summary>
            成员树节点
            </summary>
            <param name="template">树节点模板</param>
            <param name="type">成员类型</param>
            <param name="name">当前节点成员名称</param>
            <param name="path">当前节点成员名称</param>
            <param name="outputAjax">Ajax视图输出参数</param>
            <param name="isAwaitMethod">是否 await 函数</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.Get(AutoCSer.SubString@,System.Boolean)">
            <summary>
            根据成员名称获取子节点成员
            </summary>
            <param name="name">成员名称</param>
            <param name="isLast">是否最后层级</param>
            <returns>子节点成员</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.MemberNode.Get(System.String)">
            <summary>
            根据成员名称获取子节点成员
            </summary>
            <param name="name">成员名称</param>
            <returns>子节点成员</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.viewType">
            <summary>
            模板数据视图类型
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.Code">
            <summary>
            当前代码字符串
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.pushCodes">
            <summary>
            当前代码字符串常量
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.CodeString">
            <summary>
            当前代码字符串
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.PartCodes">
            <summary>
            子段程序代码集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.memberPaths">
            <summary>
            成员树
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.currentMembers">
            <summary>
            当前成员节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.onError">
            <summary>
            错误处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.onMessage">
            <summary>
            信息处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.ignoreCode">
            <summary>
            忽略代码
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.ignoreMemberError">
            <summary>
            忽略成员错误
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate.isCollectionLength">
            <summary>
            集合是否支持length属性
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.ifName">
            <summary>
            临时逻辑变量名称
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate.IsAwaitMethod">
            <summary>
            是否 await 函数
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.checkErrorMemberName(AutoCSer.SubString@)">
            <summary>
            检测错误成员名称
            </summary>
            <param name="memberName">成员名称</param>
            <returns>是否忽略错误</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.path(System.Int32)">
            <summary>
            获取临时变量名称
            </summary>
            <param name="index">临时变量层次</param>
            <returns>变量名称</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.loopIndex(System.Int32)">
            <summary>
            获取循环索引临时变量名称
            </summary>
            <param name="index">临时变量层次</param>
            <returns>循环索引变量名称</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.loopCount(System.Int32)">
            <summary>
            获取循环数量临时变量名称
            </summary>
            <param name="index">临时变量层次</param>
            <returns>循环数量变量名称</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.pushCode(AutoCSer.SubString)">
            <summary>
            添加代码
            </summary>
            <param name="code">代码</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.pushCode">
            <summary>
            截断代码字符串
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.getMember(AutoCSer.SubString@,System.Boolean@)">
            <summary>
            根据成员名称获取成员树节点
            </summary>
            <param name="memberName">成员名称</param>
            <param name="isDepth">是否深度搜索,false表示当前节点子节点</param>
            <returns>成员树节点</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.pushMember(AutoCSer.CodeGenerator.TreeTemplate.MemberNode)">
            <summary>
            添加当前成员节点
            </summary>
            <param name="member">成员节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.at(AutoCSer.CodeGenerator.TreeTemplate.MemberNode)">
            <summary>
            输出绑定的数据
            </summary>
            <param name="member">成员节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.ifThen(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,AutoCSer.SubString@,System.Boolean,System.Action{AutoCSer.CodeGenerator.TreeTemplate.MemberNode})">
            <summary>
            if代码段处理
            </summary>
            <param name="member">成员节点</param>
            <param name="memberName">成员名称</param>
            <param name="isDepth">是否深度搜索</param>
            <param name="doMember">成员处理函数</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.ifStart(AutoCSer.SubString@,System.Boolean)">
            <summary>
            if开始代码段
            </summary>
            <param name="memberName">成员名称</param>
            <param name="isSkip">是否跳跃层次</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.ifStart(AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String,System.String)">
            <summary>
            if开始代码段
            </summary>
            <param name="type">成员类型</param>
            <param name="name">成员路径名称</param>
            <param name="ifName">if临时变量名称</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.ifEnd(System.Boolean)">
            <summary>
            if结束代码段
            </summary>
            <param name="isMember">是否删除成员节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate.splitMemberName(AutoCSer.SubString@)">
            <summary>
            分解成员名称
            </summary>
            <param name="memberName">成员名称</param>
            <returns>成员名称集合</returns>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeTemplate`1">
            <summary>
            树节点模板
            </summary>
            <typeparam name="nodeType">树节点类型</typeparam>
        </member>
        <member name="T:AutoCSer.CodeGenerator.TreeTemplate`1.INode">
            <summary>
            模板代码节点接口
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate`1.INode.TemplateCommand">
            <summary>
            模板命令
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate`1.INode.TemplateMemberName">
            <summary>
            模板成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate`1.INode.TemplateMemberNameBeforeAt">
            <summary>
            模板成员名称
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate`1.INode.TemplateCode">
            <summary>
            模板文本代码
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate`1.INode.ChildCount">
            <summary>
            子节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.CodeGenerator.TreeTemplate`1.INode.Childs">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate`1.creators">
            <summary>
            模板command+解析器
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.TreeTemplate`1.nameNodes">
            <summary>
            引用代码树节点
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.#ctor(System.Type,System.Action{System.String},System.Action{System.String})">
            <summary>
            树节点模板
            </summary>
            <param name="type">模板数据视图</param>
            <param name="onError">错误处理委托</param>
            <param name="onMessage">消息处理委托</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.checkMemberName(AutoCSer.SubString@,System.Boolean@)">
            <summary>
            检测成员名称
            </summary>
            <param name="memberName"></param>
            <param name="isClient"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.skin(`0)">
            <summary>
            添加代码树节点
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.note(`0)">
            <summary>
            注释处理
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.at(`0)">
            <summary>
            输出绑定的数据
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.push(`0)">
            <summary>
            子代码段处理
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.push(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,`0,System.String,System.Int32)">
            <summary>
            子代码段处理
            </summary>
            <param name="member">成员节点</param>
            <param name="node">代码树节点</param>
            <param name="name">成员路径名称</param>
            <param name="popCount">删除成员节点数量</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifThen(`0,AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            if代码段处理
            </summary>
            <param name="node">代码树节点</param>
            <param name="type">成员类型</param>
            <param name="name">成员路径名称</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="isMember">是否删除当前成员节点</param>
            <param name="popCount">删除成员节点数量</param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifOr(AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            if代码段处理
            </summary>
            <param name="type">成员类型</param>
            <param name="name">成员路径名称</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="isMember">是否删除当前成员节点</param>
            <param name="popCount">删除成员节点数量</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifEnd(`0,System.Boolean)">
            <summary>
            if条件判断结束
            </summary>
            <param name="node"></param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifThen(`0)">
            <summary>
            绑定的数据为true非0非null时输出代码
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifThen(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,`0,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            if代码段处理
            </summary>
            <param name="member">成员节点</param>
            <param name="node">代码树节点</param>
            <param name="value">匹配值</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="popCount">删除成员节点数量</param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifThen(`0,AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            if代码段处理
            </summary>
            <param name="node">代码树节点</param>
            <param name="type">成员类型</param>
            <param name="name">成员路径名称</param>
            <param name="value">匹配值</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="popCount">删除成员节点数量</param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifOr(AutoCSer.CodeGenerator.Metadata.ExtensionType,System.String,System.String,System.String,System.Int32)">
            <summary>
            if代码段处理
            </summary>
            <param name="type">成员类型</param>
            <param name="name">成员路径名称</param>
            <param name="value">匹配值</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="popCount">删除成员节点数量</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifThen(`0,AutoCSer.SubString@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="memberName"></param>
            <param name="isAnd"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifOr(AutoCSer.SubString)">
            <summary>
            if多条件OR
            </summary>
            <param name="subMemberName"></param>
            <returns>是否需要取反</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.ifOr(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,System.String,System.String,System.Int32)">
            <summary>
            if代码段处理
            </summary>
            <param name="member">成员节点</param>
            <param name="value">匹配值</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="popCount">删除成员节点数量</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.not(`0)">
            <summary>
            绑定的数据为false或者0或者null时输出代码
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.not(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,`0,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            not代码段处理
            </summary>
            <param name="member">成员节点</param>
            <param name="node">代码树节点</param>
            <param name="value">匹配值</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="popCount">删除成员节点数量</param>
            <param name="isNot"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.notOr(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,System.String,System.String,System.Int32)">
            <summary>
            not代码段处理
            </summary>
            <param name="member">成员节点</param>
            <param name="value">匹配值</param>
            <param name="ifName">逻辑变量名称</param>
            <param name="popCount">删除成员节点数量</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.not(`0,AutoCSer.SubString@,System.Boolean)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="memberName"></param>
            <param name="isAnd"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.notOr(AutoCSer.SubString)">
            <summary>
            not多条件OR
            </summary>
            <param name="subMemberName"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.loop(`0)">
            <summary>
            循环处理
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.loop(AutoCSer.CodeGenerator.TreeTemplate.MemberNode,`0,System.String,System.Int32)">
            <summary>
            循环处理
            </summary>
            <param name="member">成员节点</param>
            <param name="node">代码树节点</param>
            <param name="name">成员路径名称</param>
            <param name="popCount">删除成员节点数量</param>
            <returns>是否正常生成代码</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.name(`0)">
            <summary>
            子段模板处理
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.fromName(`0)">
            <summary>
            引用子段模板处理
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.fromNameNode(System.String,AutoCSer.SubString@)">
            <summary>
            根据类型名称获取子段模板
            </summary>
            <param name="fileName">模板文件名称</param>
            <param name="name">子段模板名称</param>
            <returns>子段模板</returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.TreeTemplate`1.part(`0)">
            <summary>
            子段程序代码处理
            </summary>
            <param name="node">代码树节点</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.XmlDocument">
            <summary>
            XML 文档注释
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocument.assemblyLock">
            <summary>
            程序集信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocument.xmlParserConfig">
            <summary>
            XML解析配置
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.get(System.Reflection.Assembly)">
            <summary>
            获取程序集信息
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.Get(System.Type)">
            <summary>
            获取类型描述
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.Get(System.Reflection.FieldInfo)">
            <summary>
            获取字段描述
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.Get(System.Reflection.PropertyInfo)">
            <summary>
            获取属性描述
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.Get(System.Reflection.MethodInfo)">
            <summary>
            获取方法描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.GetReturn(System.Reflection.MethodInfo)">
            <summary>
            获取方法返回值描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.Get(System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            获取参数描述
            </summary>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocument.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.XmlDocumentAssembly">
            <summary>
            程序集 XML 文档注释信息
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.types">
            <summary>
            类型：类、接口、结构、枚举、委托
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.typeLock">
            <summary>
            类型集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.typeNameStream">
            <summary>
            类型名称流
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.get(System.Type)">
            <summary>
            获取类型信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.GetSummary(System.Type)">
            <summary>
            获取类型描述
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.fields">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.fieldLock">
            <summary>
            字段集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.fieldNameStream">
            <summary>
            字段
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.get(System.Reflection.FieldInfo)">
            <summary>
            获取字段信息
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.GetSummary(System.Reflection.FieldInfo)">
            <summary>
            获取字段描述
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.properties">
            <summary>
            属性（包括索引程序或其他索引属性）
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.propertyLock">
            <summary>
            属性集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.propertyNameStream">
            <summary>
            属性
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.get(System.Reflection.PropertyInfo)">
            <summary>
            获取属性信息
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.GetSummary(System.Reflection.PropertyInfo)">
            <summary>
            获取属性描述
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.methods">
            <summary>
            方法（包括一些特殊方法，例如构造函数、运算符等）
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.methodLock">
            <summary>
            方法集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.XmlDocumentAssembly.methodNameStream">
            <summary>
            方法名称流
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.get(System.Reflection.MethodInfo)">
            <summary>
            获取方法信息
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.GetSummary(System.Reflection.MethodInfo)">
            <summary>
            获取方法描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.GetReturn(System.Reflection.MethodInfo)">
            <summary>
            获取方法返回值描述
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.Get(System.Reflection.MethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            获取参数描述
            </summary>
            <param name="method"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.formatName(System.Char*,System.Char*)">
            <summary>
            名称格式化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.LoadMember(AutoCSer.SubString,AutoCSer.Xml.Node)">
            <summary>
            加载数据记录
            </summary>
            <param name="name">名称</param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.CodeGenerator.XmlDocumentAssembly.get(AutoCSer.Xml.Node,System.String)">
            <summary>
            获取节点字符串
            </summary>
            <param name="node">成员节点</param>
            <param name="name">节点名称</param>
            <returns>字符串</returns>
        </member>
        <member name="F:AutoCSer.CodeGenerator.Program.platform">
            <summary>
            尝试兼容平台
            </summary>
        </member>
        <member name="M:AutoCSer.CodeGenerator.Program.X86(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:AutoCSer.Extension.MethodInfoExtension">
            <summary>
            成员方法相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.MethodInfoExtension.fullName(System.Reflection.MethodInfo)">
            <summary>
            成员方法全名
            </summary>
            <param name="method">成员方法</param>
            <returns>成员方法全名</returns>
        </member>
        <member name="T:AutoCSer.Extension.TcpStaticServerAttribute">
            <summary>
            TCP 静态服务配置相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TcpStaticServerAttribute.copyMemberMap">
            <summary>
            复制 TCP 服务配置成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TcpStaticServerAttribute.CopyFrom(AutoCSer.Net.TcpStaticServer.ServerAttribute,AutoCSer.Net.TcpStaticServer.ServerAttribute)">
            <summary>
            复制 TCP 服务配置
            </summary>
            <param name="value">TCP 服务配置</param>
            <param name="copyValue">TCP 服务配置</param>
        </member>
        <member name="F:AutoCSer.Extension.TcpStaticServerAttribute.simpleCopyMemberMap">
            <summary>
            复制 TCP 服务配置成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TcpStaticServerAttribute.CopyFrom(AutoCSer.Net.TcpStaticSimpleServer.ServerAttribute,AutoCSer.Net.TcpStaticSimpleServer.ServerAttribute)">
            <summary>
            复制 TCP 服务配置
            </summary>
            <param name="value">TCP 服务配置</param>
            <param name="copyValue">TCP 服务配置</param>
        </member>
        <member name="F:AutoCSer.Extension.TcpStaticServerAttribute.streamCopyMemberMap">
            <summary>
            复制 TCP 服务配置成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TcpStaticServerAttribute.CopyFrom(AutoCSer.Net.TcpStaticStreamServer.ServerAttribute,AutoCSer.Net.TcpStaticStreamServer.ServerAttribute)">
            <summary>
            复制 TCP 服务配置
            </summary>
            <param name="value">TCP 服务配置</param>
            <param name="copyValue">TCP 服务配置</param>
        </member>
        <member name="T:AutoCSer.Extension.TypeCodeGenerator">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.TypeCodeGenerator.NameBuilder">
            <summary>
            类型名称生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeCodeGenerator.NameBuilder.NameStream">
            <summary>
            名称缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeCodeGenerator.NameBuilder.IsXml">
            <summary>
            是否XML注释文档名称
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.NameBuilder.GetName(System.Type)">
            <summary>
            获取类型名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.NameBuilder.Xml(System.Type)">
            <summary>
            获取XML注释文档名称
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.name(System.Type)">
            <summary>
            根据类型获取可用名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.onlyName(System.Type)">
            <summary>
            根据类型获取可用名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.isStruct(System.Type)">
            <summary>
            是否值类型
            </summary>
            <param name="type">类型</param>
            <returns>是否值类型</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.getAccessDefinition(System.Type)">
            <summary>
            访问控制符
            </summary>
            <param name="type">类型</param>
            <returns>访问控制符</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.getGenericInterface(System.Type,System.Type)">
            <summary>
            获取泛型接口类型
            </summary>
            <param name="type">类型</param>
            <param name="interfaceType">泛型接口类型定义</param>
            <returns>泛型接口类型,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.getGenericInterfaces(System.Type,System.Type)">
            <summary>
            获取泛型接口类型
            </summary>
            <param name="type">类型</param>
            <param name="interfaceType">泛型接口类型定义</param>
            <returns>泛型接口类型,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeCodeGenerator.isAssignableFromGenericDefinition(System.Type,System.Type)">
            <summary>
            是否继承泛型定义
            </summary>
            <param name="genericDefinition"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
    </members>
</doc>
