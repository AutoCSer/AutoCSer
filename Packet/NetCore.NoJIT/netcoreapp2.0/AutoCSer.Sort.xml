<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.Sort</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.Algorithm.DateTimeSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.DateTimeSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.DateTimeSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.DateTimeSortIndex.Set(System.DateTime,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.DateTimeSortIndex.Create``1(AutoCSer.Algorithm.DateTimeSortIndex*,``0[],System.Func{``0,System.DateTime})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.DateTimeSortIndex.Create``1(AutoCSer.Algorithm.DateTimeSortIndex*,``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.DateTimeSortIndex.Create``1(AutoCSer.Algorithm.DateTimeSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.RadixSort">
            <summary>
            基数排序
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.SortSize">
            <summary>
            基数排序数据量
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.SortSize64">
            <summary>
            64位基数排序数据量
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.countBufferSize">
            <summary>
            计数缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.countBuffer">
            <summary>
            计数缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.countBufferSize64">
            <summary>
            计数缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.RadixSort.countBuffer64">
            <summary>
            计数缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetUnmanagedPool(System.Int32)">
            <summary>
            获取非托管内存池
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*,System.Int32)">
            <summary>
            索引数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sortDesc(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*,System.Int32)">
            <summary>
            索引数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.Int32*,System.Int32*,System.UInt32*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sortDesc(System.Int32*,System.Int32*,System.UInt32*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.UInt64*,System.UInt64*,System.UInt64*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sortDesc(System.UInt64*,System.UInt64*,System.UInt64*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sort(System.Int64*,System.Int64*,System.UInt64*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.sortDesc(System.Int64*,System.Int64*,System.UInt64*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="newArrayFixed">目标数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(AutoCSer.Algorithm.DateTimeSortIndex*,AutoCSer.Algorithm.DateTimeSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.Sort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(AutoCSer.Algorithm.DateTimeSortIndex*,AutoCSer.Algorithm.DateTimeSortIndex*,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="arrayFixed">数组起始位置</param>
            <param name="swapFixed">临时数组起始位置</param>
            <param name="length">数组数据长度</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.SortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.RadixSort.GetSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.TopologySort">
            <summary>
            拓扑排序
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.TopologySort.Sorter`1">
            <summary>
            拓扑排序器
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.graph">
            <summary>
            图
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.values">
            <summary>
            排序结果
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.index">
            <summary>
            当前排序位置
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.TopologySort.Sorter`1.isDesc">
            <summary>
            是否反向排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.#ctor(System.Collections.Generic.Dictionary{`0,AutoCSer.ListArray{`0}},AutoCSer.LeftArray{`0}@,System.Boolean)">
            <summary>
            拓扑排序器
            </summary>
            <param name="graph">图</param>
            <param name="points">单点集合</param>
            <param name="isDesc">是否反向排序</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.Sort">
            <summary>
            拓扑排序
            </summary>
            <returns>排序结果</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.pop(`0)">
            <summary>
            排序子节点
            </summary>
            <param name="point">子节点</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sorter`1.popDesc(`0)">
            <summary>
            排序子节点
            </summary>
            <param name="point">子节点</param>
        </member>
        <member name="M:AutoCSer.Algorithm.TopologySort.Sort``1(System.Collections.Generic.ICollection{AutoCSer.KeyValue{``0,``0}},System.Collections.Generic.HashSet{``0},System.Boolean)">
            <summary>
            拓扑排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="edges">边集合</param>
            <param name="points">无边点集合</param>
            <param name="isDesc">是否反向排序</param>
            <returns>排序结果</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UnionType.Value">
            <summary>
            回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UnionType.LongArray">
            <summary>
            文件日志
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort">
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorter.Sort(System.UInt64*,System.UInt64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorter.Sort(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.ULongSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.ULongSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeSorterDesc.Sort(System.UInt64*,System.UInt64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.ULongRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.ULongSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.ULongSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorter.Sort(System.Int64*,System.Int64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorter.Sort(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.LongSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.LongSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeSorterDesc.Sort(System.Int64*,System.Int64*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.LongRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.LongSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.LongSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorter.Sort(System.UInt32*,System.UInt32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorter.Sort(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.UIntSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.UIntSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeSorterDesc.Sort(System.UInt32*,System.UInt32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UIntRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.UIntSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.UIntSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorter.Sort(System.Int32*,System.Int32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorter.Sort(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.IntSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.IntSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeSorterDesc.Sort(System.Int32*,System.Int32*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.IntRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.IntSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.IntSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorter.Sort(System.Double*,System.Double*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorter.Sort(AutoCSer.Algorithm.DoubleSortIndex*,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.DoubleSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.DoubleSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeSorterDesc.Sort(System.Double*,System.Double*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DoubleRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.DoubleSortIndex*,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.DoubleSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.DoubleSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorter.Sort(System.Single*,System.Single*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorter.Sort(AutoCSer.Algorithm.FloatSortIndex*,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.FloatSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.FloatSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeSorterDesc.Sort(System.Single*,System.Single*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.FloatRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.FloatSortIndex*,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.FloatSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.FloatSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorter">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorter.Sort(System.DateTime*,System.DateTime*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSort(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSort(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorter">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorter.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorter.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorter.Sort(AutoCSer.Algorithm.DateTimeSortIndex*,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],AutoCSer.Algorithm.DateTimeSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],AutoCSer.Algorithm.DateTimeSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorterDesc">
            <summary>
            范围排序器(一般用于获取分页)
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeSorterDesc.Sort(System.DateTime*,System.DateTime*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.RangeSortDesc(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeRangeSortDesc(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的新数据</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorterDesc">
            <summary>
            索引范围排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorterDesc.SkipCount">
            <summary>
            跳过数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorterDesc.GetEndIndex">
            <summary>
            最后一条记录指针-1
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.DateTimeRangeIndexSorterDesc.Sort(AutoCSer.Algorithm.DateTimeSortIndex*,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始指针</param>
            <param name="endIndex">结束指针-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],AutoCSer.Algorithm.DateTimeSortIndex[],System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],AutoCSer.Algorithm.DateTimeSortIndex[],System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="indexs">排序索引</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.GetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.UnsafeGetRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序范围数据数量</param>
            <param name="getKey">排序键值获取器</param>
            <param name="skipCount">跳过数据数量</param>
            <param name="getCount">排序数据数量</param>
            <param name="getValue">获取返回数据</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickSort">
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.UInt64*,System.UInt64*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.UInt64},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.UInt64*,System.UInt64*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.ULongSortIndex*,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.UInt64},AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.Int64*,System.Int64*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Int64},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.Int64*,System.Int64*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.LongSortIndex*,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Int64},AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.UInt32*,System.UInt32*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.UInt32},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.UInt32*,System.UInt32*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.UIntSortIndex*,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.UInt32},AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.Int32*,System.Int32*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Int32},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.Int32*,System.Int32*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.IntSortIndex*,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Int32},AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.Double*,System.Double*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Double[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.DoubleSortIndex*,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Double})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Double},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.Double*,System.Double*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.DoubleSortIndex*,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Double})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Double},AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.Single*,System.Single*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.Single[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.FloatSortIndex*,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Single})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Single},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.Single*,System.Single*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.FloatSortIndex*,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Single})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Single},AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(System.DateTime*,System.DateTime*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.Sort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sort(AutoCSer.Algorithm.DateTimeSortIndex*,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.DateTime},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(System.DateTime*,System.DateTime*)">
            <summary>
            快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.SortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="values">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.sortDesc(AutoCSer.Algorithm.DateTimeSortIndex*,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            索引快速排序子过程
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.DateTime},AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.GetSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
            <param name="fixedIndex">索引位置</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FixedArrayQuickTopSort">
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.UInt64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.UInt64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.UInt64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.UInt64[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.UInt64},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.UInt64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.UInt64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.UInt64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.UInt64[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.ULongSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.Int64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.Int64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.Int64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.Int64[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.Int64},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.Int64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.Int64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.Int64[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.Int64[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.Int64},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.LongSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.UInt32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.UInt32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.UInt32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.UInt32[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.UInt32},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.UInt32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.UInt32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.UInt32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.UInt32[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.UIntSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.Int32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.Int32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.Int32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.Int32[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.Int32},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.Int32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.Int32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.Int32[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.Int32[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.IntSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.Double[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.Double[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.Double[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.Double[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.Double},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.Double[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.Double[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.Double[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.Double[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.Double},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.Double},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.DoubleSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.Single[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.Single[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.Single[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.Single[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.Single},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.Single[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.Single[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.Single[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.Single[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.Single},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.Single},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.FloatSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop(System.DateTime[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top(System.DateTime[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop(System.DateTime[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop(System.DateTime[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTop``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.Top``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTop``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTop``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTop``1(``0[],System.Func{``0,System.DateTime},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc(System.DateTime[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc(System.DateTime[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc(System.DateTime[],System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc(System.DateTime[],System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <param name="values">待排序数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.GetTopDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.TopDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getTopDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            排序取Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="indexFixed">索引位置</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.getRemoveTopDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数据</returns>
        </member>
        <member name="M:AutoCSer.Algorithm.FixedArrayQuickTopSort.removeTopDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,``0[],System.Int32,AutoCSer.Algorithm.DateTimeSortIndex*)">
            <summary>
            排序去除Top N
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="getKey">排序键值获取器</param>
            <param name="count">排序数据数量</param>
            <param name="newValues">目标数据数组</param>
            <param name="length">排序缓存区尺寸</param>
            <param name="removeFixed">索引位置</param>
        </member>
        <member name="T:AutoCSer.Algorithm.ULongSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.ULongSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.Set(System.UInt64,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.Create``1(AutoCSer.Algorithm.ULongSortIndex*,``0[],System.Func{``0,System.UInt64})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.Create``1(AutoCSer.Algorithm.ULongSortIndex*,``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.ULongSortIndex.Create``1(AutoCSer.Algorithm.ULongSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.LongSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.LongSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.Set(System.Int64,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.Create``1(AutoCSer.Algorithm.LongSortIndex*,``0[],System.Func{``0,System.Int64})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.Create``1(AutoCSer.Algorithm.LongSortIndex*,``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.LongSortIndex.Create``1(AutoCSer.Algorithm.LongSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.UIntSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.UIntSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.Set(System.UInt32,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.Create``1(AutoCSer.Algorithm.UIntSortIndex*,``0[],System.Func{``0,System.UInt32})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.Create``1(AutoCSer.Algorithm.UIntSortIndex*,``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.UIntSortIndex.Create``1(AutoCSer.Algorithm.UIntSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.IntSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.IntSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.Set(System.Int32,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.Create``1(AutoCSer.Algorithm.IntSortIndex*,``0[],System.Func{``0,System.Int32})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.Create``1(AutoCSer.Algorithm.IntSortIndex*,``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.IntSortIndex.Create``1(AutoCSer.Algorithm.IntSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.DoubleSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.DoubleSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.DoubleSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.DoubleSortIndex.Set(System.Double,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.DoubleSortIndex.Create``1(AutoCSer.Algorithm.DoubleSortIndex*,``0[],System.Func{``0,System.Double})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.DoubleSortIndex.Create``1(AutoCSer.Algorithm.DoubleSortIndex*,``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.DoubleSortIndex.Create``1(AutoCSer.Algorithm.DoubleSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.FloatSortIndex">
            <summary>
            排序索引
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FloatSortIndex.Value">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.FloatSortIndex.Index">
            <summary>
            位置索引
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.FloatSortIndex.Set(System.Single,System.Int32)">
            <summary>
            设置排序索引
            </summary>
            <param name="value">数值</param>
            <param name="index">位置索引</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FloatSortIndex.Create``1(AutoCSer.Algorithm.FloatSortIndex*,``0[],System.Func{``0,System.Single})">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FloatSortIndex.Create``1(AutoCSer.Algorithm.FloatSortIndex*,``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            根据数组获取排序索引
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="getValue">数据排序值获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="M:AutoCSer.Algorithm.FloatSortIndex.Create``1(AutoCSer.Algorithm.FloatSortIndex*,``0[],System.Int32)">
            <summary>
            根据排序索引获取数组
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="indexFixed">排序索引数组</param>
            <param name="values">数组</param>
            <param name="count">排序数据数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Sort.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.FixedArrayQuickRangeSort">
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.UInt64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Int64[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.UInt32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.Double[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.Double[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.Single[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.Single[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSort(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSort``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.rangeSortDesc(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc(System.DateTime[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``1(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getRangeSortDesc``2(``0[],System.Int32,System.Int32,System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">结束位置</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.pageSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc``2(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickRangeSort.getPageSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">分页号,从 1 开始</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="T:AutoCSer.Extension.FixedArrayQuickSort">
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.sort(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSort(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Double})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.sortDesc(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSortDesc(System.Double[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Double})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.sort(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSort(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSort``1(``0[],System.Func{``0,System.Single})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.sortDesc(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSortDesc(System.Single[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArrayQuickSort.getSortDesc``1(``0[],System.Func{``0,System.Single})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Extension.FixedArraySort">
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.Sort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.SortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.UInt64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.Sort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.SortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.Int64[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.Sort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.SortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.UInt32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.Sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.SortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.Int32[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.Sort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSort``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.SortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.sortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.DateTime[])">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.GetSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySort.getSortDesc``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Extension.Collection">
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.UInt64})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.UInt64})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.UInt64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.UInt64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Int64})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int64})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Int64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Int64,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.UInt32})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.UInt32})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.UInt32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.UInt32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int32})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Int32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Int32,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.UInt16})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.UInt16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.UInt16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Int16})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Int16})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Int16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Int16,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Byte})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Byte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Byte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.SByte})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.SByte})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.SByte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.SByte,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Double})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Double})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Double,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Double,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Single})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Single})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Single,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Single,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.Char})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Char})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.Char,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.Char,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray(System.Collections.Generic.ICollection{System.DateTime})">
            <summary>
            根据集合内容返回数组
            </summary>
            <param name="values">值集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.DateTime})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.Generic.ICollection{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind(System.Collections.ICollection,System.Func{System.DateTime,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.Generic.ICollection{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray(System.Collections.ICollection,System.Func{System.DateTime,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="T:AutoCSer.Extension.Enumerable">
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.UInt64},System.UInt64)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Int64},System.Int64@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Int64},System.Int64@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Int32},System.Int32@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Int32},System.Int32@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.UInt16},System.UInt16@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.UInt16},System.UInt16)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.UInt16},System.UInt16@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.UInt16},System.UInt16)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Int16},System.Int16@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Int16},System.Int16)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Int16},System.Int16@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Int16},System.Int16)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Byte},System.Byte@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Byte},System.Byte)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Byte},System.Byte@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Byte},System.Byte)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.SByte},System.SByte@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.SByte},System.SByte)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.SByte},System.SByte@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.SByte},System.SByte)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Double},System.Double@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Double},System.Double@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Single},System.Single@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Single},System.Single@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Single},System.Single)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Char},System.Char@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Char},System.Char@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.DateTime},System.DateTime@)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max(System.Collections.Generic.IEnumerable{System.DateTime},System.DateTime)">
            <summary>
            获取最大值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.maxKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最大值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.DateTime},System.DateTime@)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min(System.Collections.Generic.IEnumerable{System.DateTime},System.DateTime)">
            <summary>
            获取最小值记录
            </summary>
            <param name="values">值集合</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.minKey``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最小值记录
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">获取排序键的委托</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="T:AutoCSer.Extension.FixedArray">
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.UInt64[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.UInt64[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.UInt64[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.UInt64*,System.Int32,System.UInt64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.UInt64[],System.UInt64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.UInt64*,System.Int32,System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.UInt64[],System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.UInt64[],System.Func{System.UInt64,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(/*Type[0]*/ulong/*Type[0]*/)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.UInt64[],System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.UInt64[],System.UInt64,System.Func{System.UInt64,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.UInt64[],System.Int32,System.Int32,System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.UInt64[],System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.UInt64[],System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.UInt64[],System.Int32,System.Int32,System.Func{System.UInt64,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.UInt64[],System.UInt64@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.UInt64[],System.UInt64)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.UInt64[],System.UInt64@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.UInt64[],System.UInt64)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Int64[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Int64[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Int64[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Int64[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Int64[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Int64*,System.Int32,System.Int64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Int64[],System.Int64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Int64*,System.Int32,System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Int64[],System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Int64[],System.Func{System.Int64,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(long)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Int64[],System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Int64[],System.Int64,System.Func{System.Int64,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Int64[],System.Int32,System.Int32,System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Int64[],System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Int64[],System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Int64[],System.Int32,System.Int32,System.Func{System.Int64,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Int64[],System.Int64@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Int64[],System.Int64)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Int64},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Int64[],System.Int64@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Int64[],System.Int64)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Int64},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.UInt32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.UInt32[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.UInt32[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.UInt32[],System.UInt32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.UInt32*,System.Int32,System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.UInt32[],System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.UInt32[],System.Func{System.UInt32,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(uint)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.UInt32[],System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.UInt32[],System.UInt32,System.Func{System.UInt32,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.UInt32[],System.Int32,System.Int32,System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.UInt32[],System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.UInt32[],System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.UInt32[],System.Int32,System.Int32,System.Func{System.UInt32,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.UInt32[],System.UInt32@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.UInt32[],System.UInt32)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.UInt32[],System.UInt32@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.UInt32[],System.UInt32)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Int32[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Int32[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Int32[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Int32[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Int32*,System.Int32,System.Int32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Int32[],System.Int32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Int32*,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Int32[],System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(int)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Int32[],System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Int32[],System.Int32,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Int32[],System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Int32[],System.Int32,System.Int32,System.Func{System.Int32,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Int32[],System.Int32@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Int32[],System.Int32)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Int32},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Int32[],System.Int32@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Int32[],System.Int32)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Int32},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.UInt16[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.UInt16[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.UInt16[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.UInt16[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.UInt16*,System.Int32,System.UInt16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.UInt16[],System.UInt16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.UInt16*,System.Int32,System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.UInt16[],System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.UInt16[],System.Func{System.UInt16,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(ushort)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.UInt16[],System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.UInt16[],System.UInt16,System.Func{System.UInt16,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.UInt16})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.UInt16[],System.Int32,System.Int32,System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.UInt16[],System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.UInt16[],System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.UInt16[],System.Int32,System.Int32,System.Func{System.UInt16,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.UInt16[],System.UInt16@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.UInt16[],System.UInt16)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.UInt16[],System.UInt16@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.UInt16[],System.UInt16)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Int16[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Int16[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Int16[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Int16[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Int16[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Int16*,System.Int32,System.Int16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Int16[],System.Int16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Int16*,System.Int32,System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Int16[],System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Int16[],System.Func{System.Int16,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(short)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Int16[],System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Int16[],System.Int16,System.Func{System.Int16,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Int16})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Int16[],System.Int32,System.Int32,System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Int16[],System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Int16[],System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Int16[],System.Int32,System.Int32,System.Func{System.Int16,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Int16[],System.Int16@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Int16[],System.Int16)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Int16},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Int16[],System.Int16@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Int16[],System.Int16)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Int16},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Byte[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Byte[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Byte*,System.Int32,System.Byte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Byte[],System.Byte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Byte*,System.Int32,System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Byte[],System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Byte[],System.Func{System.Byte,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(byte)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Byte[],System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Byte[],System.Byte,System.Func{System.Byte,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Byte})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Byte[],System.Int32,System.Int32,System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Byte[],System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Byte[],System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Byte[],System.Int32,System.Int32,System.Func{System.Byte,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Byte[],System.Byte@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Byte[],System.Byte)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Byte},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Byte[],System.Byte@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Byte[],System.Byte)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Byte},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.SByte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.SByte[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.SByte[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.SByte[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.SByte[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.SByte*,System.Int32,System.SByte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.SByte[],System.SByte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.SByte*,System.Int32,System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.SByte[],System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.SByte[],System.Func{System.SByte,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(sbyte)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.SByte[],System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.SByte[],System.SByte,System.Func{System.SByte,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.SByte})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.SByte[],System.Int32,System.Int32,System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.SByte[],System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.SByte[],System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.SByte[],System.Int32,System.Int32,System.Func{System.SByte,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.SByte[],System.SByte@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.SByte[],System.SByte)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.SByte},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.SByte[],System.SByte@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.SByte[],System.SByte)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.SByte},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Double[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Double[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Double[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Double[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Double*,System.Int32,System.Double)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Double[],System.Double)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Double*,System.Int32,System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Double[],System.Func{System.Double,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(double)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Double[],System.Double,System.Func{System.Double,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Double})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Double[],System.Int32,System.Int32,System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Double[],System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Double[],System.Int32,System.Int32,System.Func{System.Double,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Double[],System.Double@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Double[],System.Double)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Double},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Double},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Double[],System.Double@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Double[],System.Double)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Double},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Double},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Single[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Single[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Single[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Single[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Single*,System.Int32,System.Single)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Single[],System.Single)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Single*,System.Int32,System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Single[],System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Single[],System.Func{System.Single,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(float)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Single[],System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Single[],System.Single,System.Func{System.Single,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Single})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Single[],System.Int32,System.Int32,System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Single[],System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Single[],System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Single[],System.Int32,System.Int32,System.Func{System.Single,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Single[],System.Single@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Single[],System.Single)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Single},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Single},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Single[],System.Single@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Single[],System.Single)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Single},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Single},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.Char[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.Char[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.Char[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.Char[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.Char[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Char*,System.Int32,System.Char)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Char[],System.Char)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.Char*,System.Int32,System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.Char[],System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.Char[],System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(char)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.Char[],System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.Char[],System.Char,System.Func{System.Char,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.Char})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.Char[],System.Int32,System.Int32,System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.Char[],System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.Char[],System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.Char[],System.Int32,System.Int32,System.Func{System.Char,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Char[],System.Char@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.Char[],System.Char)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Char},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.Char},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Char[],System.Char@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.Char[],System.Char)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Char},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.Char},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.MoveNotNull(System.DateTime[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.Reverse(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.reverse(System.DateTime[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetReverse(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getReverse(System.DateTime[])">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.DateTime*,System.Int32,System.DateTime)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数据指针</param>
            <param name="length">匹配数据数量</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.DateTime[],System.DateTime)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.IndexOf(System.DateTime*,System.Int32,System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="valueFixed">数组数据</param>
            <param name="length">匹配数据数量</param>
            <param name="isValue">匹配数据委托</param>
            <returns>匹配位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.indexOf(System.DateTime[],System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.firstOrDefault(System.DateTime[],System.Func{System.DateTime,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(DateTime)</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.count(System.DateTime[],System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.replaceFirst(System.DateTime[],System.DateTime,System.Func{System.DateTime,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getArray``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数组类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFind(System.DateTime[],System.Int32,System.Int32,System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="length">翻转数据数量</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFind(System.DateTime[],System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.getFindArray(System.DateTime[],System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.GetFindArray(System.DateTime[],System.Int32,System.Int32,System.Func{System.DateTime,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">匹配数据数量</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.DateTime[],System.DateTime@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max(System.DateTime[],System.DateTime)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.maxKey``1(``0[],System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.max``1(``0[],System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.DateTime[],System.DateTime@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min(System.DateTime[],System.DateTime)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.minKey``1(``0[],System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArray.min``1(``0[],System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="T:AutoCSer.Extension.FixedArraySortGroup">
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct(System.UInt64[])">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(System.UInt64[],System.Func{System.UInt64,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct``1(System.UInt64[],System.Func{System.UInt64,``0},System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount(System.UInt64[])">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount(System.UInt64[],System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroup``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroup``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount``1(``0[],System.Func{``0,System.UInt64})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount``1(``0[],System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct(System.Int64[])">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(System.Int64[],System.Func{System.Int64,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct``1(System.Int64[],System.Func{System.Int64,``0},System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount(System.Int64[])">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount(System.Int64[],System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroup``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroup``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount``1(``0[],System.Func{``0,System.Int64})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount``1(``0[],System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct(System.UInt32[])">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(System.UInt32[],System.Func{System.UInt32,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct``1(System.UInt32[],System.Func{System.UInt32,``0},System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount(System.UInt32[])">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount(System.UInt32[],System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroup``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroup``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount``1(``0[],System.Func{``0,System.UInt32})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount``1(``0[],System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct(System.Int32[])">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(System.Int32[],System.Func{System.Int32,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct``1(System.Int32[],System.Func{System.Int32,``0},System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount(System.Int32[])">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount(System.Int32[],System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroup``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroup``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount``1(``0[],System.Func{``0,System.Int32})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount``1(``0[],System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct(System.DateTime[])">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(System.DateTime[],System.Func{System.DateTime,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.Distinct``1(System.DateTime[],System.Func{System.DateTime,``0},System.Int32,System.Int32)">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.distinct``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount(System.DateTime[])">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount(System.DateTime[],System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroup``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroup``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.sortGroupCount``1(``0[],System.Func{``0,System.DateTime})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.FixedArraySortGroup.SortGroupCount``1(``0[],System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">数据数量</param>
            <returns>数据排序分组数量</returns>
        </member>
        <member name="T:AutoCSer.Extension.LeftArray">
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(/*Type[0]*/ulong/*Type[0]*/)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.UInt64},System.UInt64,System.Func{System.UInt64,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.UInt64},System.Func{System.UInt64,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.UInt64},System.Action{System.UInt64})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.UInt64},System.UInt64@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.UInt64},System.UInt64@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.UInt64},System.UInt64)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Int64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Int64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(long)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Int64},System.Int64,System.Func{System.Int64,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Int64},System.Func{System.Int64,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Int64},System.Action{System.Int64})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Int64},System.Int64@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Int64},System.Int64@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Int64},System.Int64)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(uint)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.UInt32},System.UInt32,System.Func{System.UInt32,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.UInt32},System.Func{System.UInt32,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.UInt32},System.Action{System.UInt32})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.UInt32},System.UInt32@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.UInt32},System.UInt32@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.UInt32},System.UInt32)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Int32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Int32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(int)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Int32},System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Int32},System.Func{System.Int32,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Int32},System.Action{System.Int32})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Int32},System.Int32@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Int32},System.Int32@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Int32},System.Int32)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.UInt16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.UInt16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.UInt16},System.UInt16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(ushort)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.UInt16},System.UInt16,System.Func{System.UInt16,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.UInt16},System.Func{System.UInt16,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.UInt16},System.Action{System.UInt16})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.UInt16},System.UInt16@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.UInt16},System.UInt16)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.UInt16},System.UInt16@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.UInt16},System.UInt16)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Int16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Int16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Int16},System.Int16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(short)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Int16},System.Int16,System.Func{System.Int16,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Int16},System.Func{System.Int16,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Int16},System.Action{System.Int16})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Int16},System.Int16@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Int16},System.Int16)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Int16},System.Int16@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Int16},System.Int16)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Byte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Byte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Byte},System.Byte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(byte)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Byte},System.Byte,System.Func{System.Byte,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Byte},System.Func{System.Byte,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Byte},System.Action{System.Byte})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Byte},System.Byte@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Byte},System.Byte)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Byte},System.Byte@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Byte},System.Byte)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.SByte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.SByte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.SByte},System.SByte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(sbyte)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.SByte},System.SByte,System.Func{System.SByte,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.SByte},System.Func{System.SByte,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.SByte},System.Action{System.SByte})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.SByte},System.SByte@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.SByte},System.SByte)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.SByte},System.SByte@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.SByte},System.SByte)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Double})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Double})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Double},System.Double)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Double},System.Func{System.Double,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(double)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Double},System.Double,System.Func{System.Double,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Double},System.Func{System.Double,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Double},System.Action{System.Double})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Double},System.Double@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Double},System.Double)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Double},System.Double@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Double},System.Double)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Single})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Single})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Single},System.Single)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Single},System.Func{System.Single,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(float)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Single},System.Single,System.Func{System.Single,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Single},System.Func{System.Single,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Single},System.Action{System.Single})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Single},System.Single@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Single},System.Single)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Single},System.Single@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Single},System.Single)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.Char})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.Char})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Char},System.Char)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.Char},System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(char)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.Char},System.Char,System.Func{System.Char,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.Char},System.Func{System.Char,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.Char},System.Action{System.Char})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Char},System.Char@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.Char},System.Char)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Char},System.Char@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.Char},System.Char)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Char},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getReverse(AutoCSer.LeftArray{System.DateTime})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.reverse(AutoCSer.LeftArray{System.DateTime})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.DateTime},System.DateTime)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.indexOf(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.firstOrDefault(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(DateTime)</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.count(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.replaceFirst(AutoCSer.LeftArray{System.DateTime},System.DateTime,System.Func{System.DateTime,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.find(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFind(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getFindArray(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.getArray``1(AutoCSer.LeftArray{System.DateTime},System.Func{System.DateTime,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.each(AutoCSer.LeftArray{System.DateTime},System.Action{System.DateTime})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.DateTime},System.DateTime@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max(AutoCSer.LeftArray{System.DateTime},System.DateTime)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MaxKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Max``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.DateTime},System.DateTime@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min(AutoCSer.LeftArray{System.DateTime},System.DateTime)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.MinKey``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Min``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSort(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSort``2(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSort(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSort(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.RangeSortDesc(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetRangeSortDesc``2(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.PageSortDesc(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetPageSortDesc(AutoCSer.LeftArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Double})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Single})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.Sort(AutoCSer.LeftArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort(AutoCSer.LeftArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSort``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.SortDesc(AutoCSer.LeftArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc(AutoCSer.LeftArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.LeftArray.GetSortDesc``1(AutoCSer.LeftArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.Extension.SubArray">
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
            <summary>
            数组子串扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.UInt64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.UInt64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.UInt64},System.UInt64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(/*Type[0]*/ulong/*Type[0]*/)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.UInt64},System.UInt64,System.Func{System.UInt64,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.UInt64},System.Action{System.UInt64})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.UInt64},System.UInt64@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.UInt64},System.UInt64)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.UInt64},System.UInt64@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.UInt64},System.UInt64)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.UInt64@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.UInt64)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct(AutoCSer.SubArray{System.UInt64})">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{System.UInt64},System.Func{System.UInt64,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount(AutoCSer.SubArray{System.UInt64})">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroup``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetReverse``1(AutoCSer.SubArray{``0})">
            <summary>
            获取反转数组
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Int64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Int64})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Int64},System.Int64)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(long)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Int64},System.Int64,System.Func{System.Int64,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Int64},System.Action{System.Int64})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Int64},System.Int64@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Int64},System.Int64)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Int64},System.Int64@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Int64},System.Int64)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int64@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int64)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.UInt32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.UInt32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.UInt32},System.UInt32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(uint)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.UInt32},System.UInt32,System.Func{System.UInt32,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.UInt32},System.Action{System.UInt32})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.UInt32},System.UInt32@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.UInt32},System.UInt32)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.UInt32},System.UInt32@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.UInt32},System.UInt32)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.UInt32@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.UInt32)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Int32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Int32})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Int32},System.Int32)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(int)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Int32},System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Int32},System.Action{System.Int32})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Int32},System.Int32@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Int32},System.Int32)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Int32},System.Int32@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Int32},System.Int32)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.UInt16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.UInt16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.UInt16},System.UInt16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(ushort)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.UInt16},System.UInt16,System.Func{System.UInt16,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.UInt16},System.Func{System.UInt16,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.UInt16},System.Action{System.UInt16})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.UInt16},System.UInt16@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.UInt16},System.UInt16)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.UInt16},System.UInt16@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.UInt16},System.UInt16)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},System.UInt16@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},System.UInt16)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Int16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Int16})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Int16},System.Int16)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(short)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Int16},System.Int16,System.Func{System.Int16,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Int16},System.Func{System.Int16,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Int16},System.Action{System.Int16})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Int16},System.Int16@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Int16},System.Int16)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Int16},System.Int16@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Int16},System.Int16)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},System.Int16@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},System.Int16)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Byte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Byte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Byte},System.Byte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(byte)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Byte},System.Byte,System.Func{System.Byte,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Byte},System.Func{System.Byte,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Byte},System.Action{System.Byte})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Byte},System.Byte@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Byte},System.Byte)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Byte},System.Byte@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Byte},System.Byte)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},System.Byte@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},System.Byte)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.SByte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.SByte})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.SByte},System.SByte)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(sbyte)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.SByte},System.SByte,System.Func{System.SByte,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.SByte},System.Func{System.SByte,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.SByte},System.Action{System.SByte})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.SByte},System.SByte@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.SByte},System.SByte)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.SByte},System.SByte@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.SByte},System.SByte)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},System.SByte@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},System.SByte)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Double})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Double})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Double},System.Double)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Double},System.Func{System.Double,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(double)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Double},System.Double,System.Func{System.Double,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Double},System.Func{System.Double,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Double},System.Action{System.Double})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Double},System.Double@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Double},System.Double)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Double},System.Double@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Double},System.Double)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Double@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Double)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Single})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Single})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Single},System.Single)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Single},System.Func{System.Single,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(float)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Single},System.Single,System.Func{System.Single,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Single},System.Func{System.Single,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Single},System.Action{System.Single})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Single},System.Single@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Single},System.Single)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Single},System.Single@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Single},System.Single)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Single@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Single)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.Char})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.Char})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Char},System.Char)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.Char},System.Func{System.Char,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(char)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.Char},System.Char,System.Func{System.Char,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.Char},System.Func{System.Char,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.Char},System.Func{System.Char,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.Char},System.Action{System.Char})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Char},System.Char@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.Char},System.Char)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Char},System.Char@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.Char},System.Char)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},System.Char@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},System.Char)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.Char},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getReverse(AutoCSer.SubArray{System.DateTime})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.reverse(AutoCSer.SubArray{System.DateTime})">
            <summary>
            逆转数组
            </summary>
            <param name="array">数组数据</param>
            <returns>翻转后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.DateTime},System.DateTime)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数组数据</param>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.indexOf(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="array">数据数组</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.firstOrDefault(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,System.Boolean},System.Int32)">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="index">起始位置</param>
            <returns>第一个匹配值,失败为default(DateTime)</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.count(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.replaceFirst(AutoCSer.SubArray{System.DateTime},System.DateTime,System.Func{System.DateTime,System.Boolean})">
            <summary>
            替换数据
            </summary>
            <param name="array">数组数据</param>
            <param name="value">新值</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.find(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFind(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getFindArray(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.getArray``1(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,``0})">
            <summary>
            数组类型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.each(AutoCSer.SubArray{System.DateTime},System.Action{System.DateTime})">
            <summary>
            遍历foreach
            </summary>
            <param name="array">数据数组</param>
            <param name="method">调用函数</param>
            <returns>数据数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.DateTime},System.DateTime@)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max(AutoCSer.SubArray{System.DateTime},System.DateTime)">
            <summary>
            获取最大值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MaxKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最大值</param>
            <returns>是否存在最大值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Max``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最大值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最大值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.DateTime},System.DateTime@)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min(AutoCSer.SubArray{System.DateTime},System.DateTime)">
            <summary>
            获取最小值
            </summary>
            <param name="array">数据数组</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.DateTime@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.MinKey``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},``0@)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="subArray">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="value">最小值</param>
            <returns>是否存在最小值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Min``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},``0)">
            <summary>
            获取最小值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getKey">数据获取器</param>
            <param name="nullValue">默认空值</param>
            <returns>最小值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.UInt64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int64},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.Int64},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.UInt32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Int32},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.Int32},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Double},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.Double},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.Single},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.Single},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSort(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSort``2(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSort(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSort(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1},System.Int32@)">
            <summary>
            分页排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">获取排序关键字委托</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <param name="getValue">获取返回数据</param>
            <param name="count">数据总量</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.RangeSortDesc(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="array">数组子串</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetRangeSortDesc``2(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime},System.Int32,System.Int32,System.Func{``0,``1})">
            <summary>
            范围排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="returnType">返回数据类型</typeparam>
            <param name="array">数组子串</param>
            <param name="getKey">排序键</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数,小于0表示所有</param>
            <param name="getValue">获取返回数据</param>
            <returns>排序范围数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.PageSortDesc(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetPageSortDesc(AutoCSer.SubArray{System.DateTime},System.Int32,System.Int32)">
            <summary>
            分页排序
            </summary>
            <param name="array">数组子串</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
            <returns>分页排序数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.Double})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Double})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.Single})">
            <summary>
            数组排序
            </summary>
            <param name="array">待排序数组</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Single})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.Sort(AutoCSer.SubArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort(AutoCSer.SubArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSort``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortDesc(AutoCSer.SubArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的数组子串</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc(AutoCSer.SubArray{System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <param name="array">待排序数组子串</param>
            <returns>排序后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.GetSortDesc``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数组子串排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组子串</param>
            <param name="getKey">排序键</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct(AutoCSer.SubArray{System.Int64})">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{System.Int64},System.Func{System.Int64,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount(AutoCSer.SubArray{System.Int64})">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroup``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int64})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct(AutoCSer.SubArray{System.UInt32})">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{System.UInt32},System.Func{System.UInt32,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount(AutoCSer.SubArray{System.UInt32})">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroup``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount``1(AutoCSer.SubArray{``0},System.Func{``0,System.UInt32})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct(AutoCSer.SubArray{System.Int32})">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{System.Int32},System.Func{System.Int32,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount(AutoCSer.SubArray{System.Int32})">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroup``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount``1(AutoCSer.SubArray{``0},System.Func{``0,System.Int32})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct(AutoCSer.SubArray{System.DateTime})">
            <summary>
            数据去重
            </summary>
            <param name="array">数据数组</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{System.DateTime},System.Func{System.DateTime,``0})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.distinct``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数据去重
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount(AutoCSer.SubArray{System.DateTime})">
            <summary>
            数据排序分组数量
            </summary>
            <param name="array">数据数组</param>
            <returns>分组数量</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroup``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数据排序分组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.SubArray.SortGroupCount``1(AutoCSer.SubArray{``0},System.Func{``0,System.DateTime})">
            <summary>
            数据排序分组数量
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据数组</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数据集合数量</returns>
        </member>
        <member name="T:AutoCSer.Extension.Array_Sort">
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOf``1(``0[],``0)">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOf``1(``0[],``0,System.Func{``0,``0,System.Int32})">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">数组值比较器</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOf``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Boolean)">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="isAscending">是否升序</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOf``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Func{``1,``1,System.Int32})">
            <summary>
            二分查找第一个匹配值位置
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="orderComparer">数组值比较器</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfLess``1(``0[],``0)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <returns>匹配值之前的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfLess``1(``0[],``0,System.Func{``0,``0,System.Int32})">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">数组值比较器</param>
            <returns>匹配值之前的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfLess``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Boolean)">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="isAscending">是否升序</param>
            <returns>匹配值之前的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfLess``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Func{``1,``1,System.Int32})">
            <summary>
            二分查找匹配值之前的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="orderComparer">数组值比较器</param>
            <returns>匹配值之前的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryLastIndexOf``1(``0[],``0)">
            <summary>
            二分查找最后一个匹配值位置
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryLastIndexOf``1(``0[],``0,System.Func{``0,``0,System.Int32})">
            <summary>
            二分查找最后一个匹配值位置
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">数组值比较器</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryLastIndexOf``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Boolean)">
            <summary>
            二分查找最后一个匹配值位置
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="isAscending">是否升序</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryLastIndexOf``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Func{``1,``1,System.Int32})">
            <summary>
            二分查找最后一个匹配值位置
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="orderComparer">数组值比较器</param>
            <returns>匹配值位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfThan``1(``0[],``0)">
            <summary>
            二分查找匹配值之后的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <returns>匹配值之后的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfThan``1(``0[],``0,System.Func{``0,``0,System.Int32})">
            <summary>
            二分查找匹配值之后的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">数组值比较器</param>
            <returns>匹配值之后的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfThan``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Boolean)">
            <summary>
            二分查找匹配值之后的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="isAscending">是否升序</param>
            <returns>匹配值之后的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.binaryIndexOfThan``2(``1[],``0,System.Func{``0,``1,System.Int32},System.Func{``1,``1,System.Int32})">
            <summary>
            二分查找匹配值之后的位置(用于查找插入值的位置)
            </summary>
            <typeparam name="keyType">查找值类型</typeparam>
            <typeparam name="valueType">数组值类型</typeparam>
            <param name="value">匹配值</param>
            <param name="values">匹配数组</param>
            <param name="comparer">查找值比较器</param>
            <param name="orderComparer">数组值比较器</param>
            <returns>匹配值之后的位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.Random``1(``0[],System.Int32)">
            <summary>
            随机排序
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">排序数组</param>
            <param name="count">排序数量</param>
        </member>
        <member name="M:AutoCSer.Extension.Array_Sort.Random``1(``0[])">
            <summary>
            随机排序
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">排序数组</param>
        </member>
        <member name="T:AutoCSer.Extension.IComparableExtension`1">
            <summary>
            比较接口扩展
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="M:AutoCSer.Extension.IComparableExtension`1.CompareTo(`0,`0)">
            <summary>
            比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extension.IComparableExtension`1.CompareToHandle">
            <summary>
            比较委托
            </summary>
        </member>
        <member name="T:AutoCSer.PageCount">
            <summary>
            分页记录范围
            </summary>
        </member>
        <member name="F:AutoCSer.PageCount.count">
            <summary>
            数据总量
            </summary>
        </member>
        <member name="F:AutoCSer.PageCount.pageSize">
            <summary>
            分页尺寸
            </summary>
        </member>
        <member name="F:AutoCSer.PageCount.pageCount">
            <summary>
            分页总数
            </summary>
        </member>
        <member name="F:AutoCSer.PageCount.currentPage">
            <summary>
            当前页号
            </summary>
        </member>
        <member name="F:AutoCSer.PageCount.skipCount">
            <summary>
            跳过记录数
            </summary>
        </member>
        <member name="P:AutoCSer.PageCount.SkipCount">
            <summary>
            跳过记录数
            </summary>
        </member>
        <member name="P:AutoCSer.PageCount.DescSkipCount">
            <summary>
            逆序跳过记录数
            </summary>
        </member>
        <member name="F:AutoCSer.PageCount.currentPageSize">
            <summary>
            当前页记录数
            </summary>
        </member>
        <member name="P:AutoCSer.PageCount.CurrentPageSize">
            <summary>
            当前页记录数
            </summary>
        </member>
        <member name="M:AutoCSer.PageCount.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页记录范围
            </summary>
            <param name="count">数据总量</param>
            <param name="pageSize">分页尺寸</param>
            <param name="currentPage">页号</param>
        </member>
        <member name="T:AutoCSer.SearchTree.Dictionary`2">
            <summary>
            二叉树字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.SearchTree.Dictionary`2.Node">
            <summary>
            二叉树节点
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Dictionary`2.Node.Value">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Node.KeyValue">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Node.KeyValues">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Get(`0@)">
            <summary>
            根据关键字获取二叉树节点
            </summary>
            <param name="key">关键字</param>
            <returns>匹配节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.at(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.changeKeyValue(`0@,`1@)">
            <summary>
            交换节点数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.checkLeft">
            <summary>
            检测左节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.checkRight">
            <summary>
            检测右节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.TryAdd(AutoCSer.KeyValue{`0,`1}@)">
            <summary>
            添加数据
            </summary>
            <param name="keyValue"></param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Set(AutoCSer.KeyValue{`0,`1}@)">
            <summary>
            设置数据
            </summary>
            <param name="keyValue">数据</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Remove(`0@)">
            <summary>
            删除数据
            </summary>
            <param name="key">关键字</param>
            <returns>被删除节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.Remove">
            <summary>
            删除当前节点
            </summary>
            <returns>用户替换当前节点的节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.removeMin">
            <summary>
            删除最小节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetArraySkip(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.getArray(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetArraySkip``1(AutoCSer.SearchTree.PageArray{`1,``0}@)">
            <summary>
            获取数组
            </summary>
            <typeparam name="arrayType"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.getArray``1(AutoCSer.SearchTree.PageArray{`1,``0}@)">
            <summary>
            获取数组
            </summary>
            <typeparam name="arrayType"></typeparam>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetDescArraySkip(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.getDescArray(AutoCSer.SearchTree.PageArray{`1}@)">
            <summary>
            获取数组
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Node.GetFind(AutoCSer.SearchTree.FindArray{`1}@)">
            <summary>
            查找数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="F:AutoCSer.SearchTree.Dictionary`2.Boot">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Count">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Height">
            <summary>
            获取树高度，需要 O(n)
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.KeyValues">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Version">
            <summary>
            二叉树更新版本
            </summary>
        </member>
        <member name="E:AutoCSer.SearchTree.Dictionary`2.OnResetVersion">
            <summary>
            更新版本重置事件
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Dictionary`2.Item(`0)">
            <summary>
            根据关键字获取或者设置数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据,获取失败KeyNotFoundException</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.#ctor">
            <summary>
            二叉树字典
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.nextVersion">
            <summary>
            更新二叉树版本
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Set(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryAdd(`0,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryAdd(`0@,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Remove(`0)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Remove(`0@)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.Remove(`0@,`1@)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <param name="value">被删除数据</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.ContainsKey(`0)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.ContainsKey(`0@)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryGetValue(`0,`1@)">
            <summary>
            根据关键字获取数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">目标数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            根据关键字获取数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">目标数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.IndexOf(`0)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.IndexOf(`0@)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.CountLess(`0@)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.CountThan(`0@)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetPage(System.Int32,System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="page">分页号,从 1 开始</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetPage``1(System.Int32,System.Int32,System.Func{`1,``0})">
            <summary>
            获取分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="page">分页号,从 1 开始</param>
            <param name="getValue">获取数据委托</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.CreatePageCache(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建二叉树分页缓存
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="arrayPageCount">数组缓存数量</param>
            <param name="fifoPageCount">先进先出缓存数量</param>
            <returns>二叉树分页缓存</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetPageDesc(System.Int32,System.Int32)">
            <summary>
            获取逆序分页数据
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="page">分页号,从 1 开始</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.CreatePageDescCache(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建二叉树逆序分页缓存
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="arrayPageCount">数组缓存数量</param>
            <param name="fifoPageCount">先进先出缓存数量</param>
            <returns>二叉树分页缓存</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Dictionary`2.GetFind(System.Func{`1,System.Boolean})">
            <summary>
            查找数据
            </summary>
            <param name="isValue">数据匹配委托</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.SearchTree.DictionaryPageDescCache`2">
            <summary>
            二叉树分页缓存
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.SearchTree.DictionaryPageDescCache`2.#ctor(AutoCSer.SearchTree.Dictionary{`0,`1},System.Int32,System.Int32,System.Int32)">
            <summary>
            二叉树分页缓存
            </summary>
            <param name="dictionary">二叉树字典</param>
            <param name="pageSize">分页大小</param>
            <param name="arrayPageCount">数组缓存数量</param>
            <param name="fifoPageCount">先进先出缓存数量</param>
        </member>
        <member name="M:AutoCSer.SearchTree.DictionaryPageDescCache`2.Get(System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="page">分页号,从 1 开始</param>
            <returns>分页数据</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.DictionaryPageCacheBase`2">
            <summary>
            二叉树分页缓存
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.DictionaryPageCacheBase`2.dictionary">
            <summary>
            二叉树字典
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.DictionaryPageCacheBase`2.ArrayCache">
            <summary>
            数组缓存
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.DictionaryPageCacheBase`2.Queue">
            <summary>
            先进先出缓存
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.DictionaryPageCacheBase`2.pageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.DictionaryPageCacheBase`2.fifoPageCount">
            <summary>
            先进先出缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.DictionaryPageCacheBase`2.#ctor(AutoCSer.SearchTree.Dictionary{`0,`1},System.Int32,System.Int32,System.Int32)">
            <summary>
            二叉树分页缓存
            </summary>
            <param name="dictionary">二叉树字典</param>
            <param name="pageSize">分页大小</param>
            <param name="arrayPageCount">数组缓存数量</param>
            <param name="fifoPageCount">先进先出缓存数量</param>
        </member>
        <member name="M:AutoCSer.SearchTree.DictionaryPageCacheBase`2.onReset">
            <summary>
            重置更新版本
            </summary>
        </member>
        <member name="T:AutoCSer.SearchTree.DictionaryPageCache`2">
            <summary>
            二叉树分页缓存
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.SearchTree.DictionaryPageCache`2.#ctor(AutoCSer.SearchTree.Dictionary{`0,`1},System.Int32,System.Int32,System.Int32)">
            <summary>
            二叉树分页缓存
            </summary>
            <param name="dictionary">二叉树字典</param>
            <param name="pageSize">分页大小</param>
            <param name="arrayPageCount">数组缓存数量</param>
            <param name="fifoPageCount">先进先出缓存数量</param>
        </member>
        <member name="M:AutoCSer.SearchTree.DictionaryPageCache`2.Get(System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="page">分页号,从 1 开始</param>
            <returns>分页数据</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.FindArray`1">
            <summary>
            查找数据
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.FindArray`1.IsValue">
            <summary>
            数据匹配委托
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.FindArray`1.Array">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.FindArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.SearchTree.Node`2">
            <summary>
            二叉树节点
            </summary>
            <typeparam name="nodeType">二叉树节点类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Left">
            <summary>
            左节点
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Right">
            <summary>
            右节点
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.Node`2.Count">
            <summary>
            节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Node`2.Height">
            <summary>
            节点高度
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Node`2.isLeftAndRight">
            <summary>
            是否同时存在左右节点
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Node`2.leftRightDifferenceCount">
            <summary>
            左右节点数据量差
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.set(`0,`0,System.Int32)">
            <summary>
            设置节点信息
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.set(`0,System.Int32)">
            <summary>
            设置节点信息
            </summary>
            <param name="left"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.IndexOf(`1@)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.CountLess(`1@)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.CountThan(`1@)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.checkRemoveCount1(`0)">
            <summary>
            删除节点计数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.removeCount1(`0)">
            <summary>
            删除节点计数
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.clearLeft">
            <summary>
            清除左节点并重置节点数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.removeLeftCount">
            <summary>
            删除左节点计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.rightToLeft">
            <summary>
            右节点移动到左节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.rightToLeft(`0)">
            <summary>
            右节点移动到左节点
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.checkLeftRight">
            <summary>
            检测左节点的右节点
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.clearRight">
            <summary>
            清除左节点并重置节点数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.removeRightCount">
            <summary>
            删除左节点计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.leftToRight">
            <summary>
            右节点移动到左节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.leftToRight(`0)">
            <summary>
            右节点移动到左节点
            </summary>
            <param name="left"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Node`2.checkRightLeft">
            <summary>
            检测右节点的左节点
            </summary>
        </member>
        <member name="T:AutoCSer.SearchTree.PageArray`1">
            <summary>
            分页数组数据
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`1.SkipCount">
            <summary>
            跳过数据
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`1.Index">
            <summary>
            数组位置
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`1.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.PageArray`1.IsArray">
            <summary>
            数组写入是否完成
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组写入是否完成</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`1.AddDesc(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组位置</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.PageArray`2">
            <summary>
            分页数组数据
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="arrayType"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.SkipCount">
            <summary>
            跳过数据
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.Index">
            <summary>
            数组位置
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageArray`2.GetValue">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.PageArray`2.IsArray">
            <summary>
            数组写入是否完成
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`2.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组写入是否完成</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.PageArray`2.AddDesc(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
            <returns>数组位置</returns>
        </member>
        <member name="T:AutoCSer.SearchTree.PageCacheVersion`1">
            <summary>
            分页缓存版本
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.SearchTree.PageCacheVersion`1.Array">
            <summary>
            分页数据
            </summary>
        </member>
        <member name="F:AutoCSer.SearchTree.PageCacheVersion`1.Version">
            <summary>
            更新版本
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.PageCacheVersion`1.Get(System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="version">更新版本</param>
            <returns>分页数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.PageCacheVersion`1.Set(`0[],System.Int32)">
            <summary>
            设置分页数据
            </summary>
            <param name="array">分页数据</param>
            <param name="version">更新版本</param>
        </member>
        <member name="T:AutoCSer.SearchTree.Set`1">
            <summary>
            二叉树集合
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.SearchTree.Set`1.Node">
            <summary>
            二叉树节点
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Get(`0@)">
            <summary>
            根据关键字获取二叉树节点
            </summary>
            <param name="key">关键字</param>
            <returns>匹配节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.at(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Add(`0@)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.changeKey(`0@)">
            <summary>
            交换节点数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.checkLeft">
            <summary>
            检测左节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.checkRight">
            <summary>
            检测右节点数量
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Remove(`0@)">
            <summary>
            删除数据
            </summary>
            <param name="key">关键字</param>
            <returns>被删除节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.Remove">
            <summary>
            删除当前节点
            </summary>
            <returns>用户替换当前节点的节点</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Node.removeMin">
            <summary>
            删除最小节点
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.SearchTree.Set`1.boot">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Count">
            <summary>
            节点数据
            </summary>
        </member>
        <member name="P:AutoCSer.SearchTree.Set`1.Height">
            <summary>
            获取树高度，需要 O(n)
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.#ctor">
            <summary>
            二叉树集合
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Add(`0@)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <returns>是否添加了数据</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Remove(`0)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Remove(`0@)">
            <summary>
            根据关键字删除节点
            </summary>
            <param name="key">关键字</param>
            <returns>是否存在关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Contains(`0)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.Contains(`0@)">
            <summary>
            判断是否包含关键字
            </summary>
            <param name="key">关键字</param>
            <returns>是否包含关键字</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.IndexOf(`0)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.IndexOf(`0@)">
            <summary>
            根据关键字获取一个匹配节点位置
            </summary>
            <param name="key">关键字</param>
            <returns>一个匹配节点位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.CountLess(`0@)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.CountThan(`0@)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.SearchTree.Set`1.At(System.Int32)">
            <summary>
            根据节点位置获取数据
            </summary>
            <param name="index">节点位置</param>
            <returns>数据</returns>
        </member>
        <member name="T:AutoCSer.SortOrder`1">
            <summary>
            排序委托
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="M:AutoCSer.SortOrder`1.ascending(`0,`0)">
            <summary>
            升序委托
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.SortOrder`1.Ascending">
            <summary>
            升序委托
            </summary>
        </member>
        <member name="M:AutoCSer.SortOrder`1.descending(`0,`0)">
            <summary>
            降序委托
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.SortOrder`1.Descending">
            <summary>
            降序委托
            </summary>
        </member>
    </members>
</doc>
