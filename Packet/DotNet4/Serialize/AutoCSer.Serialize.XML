<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.Serialize</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.UnmanagedStreamBase">
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.Data">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.ByteSize">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.LastPrepSize">
            <summary>
            最后一次预增目标数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.IsUnmanaged">
            <summary>
            是否非托管内存数据
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.#ctor(System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="length">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.#ctor(System.Byte*,System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data">无需释放的数据</param>
            <param name="dataLength">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Dispose">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Close">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.setStreamLength(System.Int32)">
            <summary>
            设置容器尺寸
            </summary>
            <param name="length">容器尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.prepSize(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="length">增加长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.UnsafeWrite(System.String,System.Int32,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
            <param name="index">起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.WriteNotNull(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(AutoCSer.SubString@)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.WriteNotEmpty(AutoCSer.SubString@)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Reset(System.Byte*,System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="data">数据</param>
            <param name="length">数据字节长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Reset(System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="length">数据字节长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.From(AutoCSer.UnmanagedStreamBase)">
            <summary>
            内存数据流转换
            </summary>
            <param name="stream">内存数据流</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="P:AutoCSer.UnmanagedStreamBase.CurrentData">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="T:AutoCSer.RemoteType">
            <summary>
            远程类型
            </summary>
        </member>
        <member name="F:AutoCSer.RemoteType.assemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.RemoteType.name">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="M:AutoCSer.RemoteType.#ctor(System.Type)">
            <summary>
            远程类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.RemoteType.op_Implicit(System.Type)~AutoCSer.RemoteType">
            <summary>
            类型隐式转换
            </summary>
            <param name="type">类型</param>
            <returns>远程类型</returns>
        </member>
        <member name="M:AutoCSer.RemoteType.TryGet(System.Type@)">
            <summary>
            尝试获取类型
            </summary>
            <param name="type">类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.RemoteType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Reflection.Assembly">
            <summary>
            程序集扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Assembly.Get(System.String)">
            <summary>
            根据程序集名称获取程序集
            </summary>
            <param name="fullName">程序集名称</param>
            <returns>程序集,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.Reflection.Assembly.nameCache">
            <summary>
            程序集名称缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Assembly.loadAssembly(System.Reflection.Assembly)">
            <summary>
            加载程序集
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:AutoCSer.Reflection.Assembly.loadAssembly(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            加载程序集
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AutoCSer.MemoryMap">
            <summary>
            指针位图
            </summary>
        </member>
        <member name="F:AutoCSer.MemoryMap.Map">
            <summary>
            位图指针
            </summary>
        </member>
        <member name="M:AutoCSer.MemoryMap.#ctor(System.Void*)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.#ctor(System.UInt64*,System.Int32)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.Get(System.Int32)">
            <summary>
            获取占位状态
            </summary>
            <param name="bit">位值</param>
            <returns>是否已占位</returns>
        </member>
        <member name="M:AutoCSer.MemoryMap.Get(System.Char)">
            <summary>
            获取占位状态
            </summary>
            <param name="bit">位值</param>
            <returns>是否已占位</returns>
        </member>
        <member name="M:AutoCSer.MemoryMap.Set(System.Int32)">
            <summary>
            设置占位
            </summary>
            <param name="bit">位值</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.Set(System.Char)">
            <summary>
            设置占位
            </summary>
            <param name="bit">位值</param>
        </member>
        <member name="T:AutoCSer.Extension.TypeExtension">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.GenericSplit">
            <summary>
            类型名称泛型分隔符
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.fullName(System.Type)">
            <summary>
            根据类型获取可用名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.nullableType(System.Type)">
            <summary>
            获取可空类型的值类型
            </summary>
            <param name="type">可空类型</param>
            <returns>值类型,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.noInitobjTypes">
            <summary>
            不需要需要初始化的类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.isInitobj(System.Type)">
            <summary>
            是否需要初始化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.customAttribute``1(System.Type,System.Type@)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="declaringType">自定义属性申明类型</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.customAttribute``1(System.Type)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.isNull(System.Type)">
            <summary>
            判断类型是否可空类型
            </summary>
            <param name="type">类型</param>
            <returns>是否可空类型</returns>
        </member>
        <member name="T:AutoCSer.Extension.TypeExtension.NameBuilder">
            <summary>
            类型名称生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.NameBuilder.NameStream">
            <summary>
            名称缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.NameBuilder.IsXml">
            <summary>
            是否XML注释文档名称
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.GetFullName(System.Type)">
            <summary>
            获取类型名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.Array(System.Type,System.Boolean)">
            <summary>
            数组处理
            </summary>
            <param name="type">类型</param>
            <param name="isFullName">是否全称</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.getFullName(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.getNameNoArray(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.GenericName(System.Type)">
            <summary>
            泛型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.GenericFullName(System.Type)">
            <summary>
            泛型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.genericParameter(System.Type)">
            <summary>
            泛型参数处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.genericParameter(System.Type[],System.Int32,System.Int32)">
            <summary>
            泛型参数处理
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.ReflectedType(System.Type,System.Type)">
            <summary>
            嵌套类型处理
            </summary>
            <param name="type">类型</param>
            <param name="reflectedType">上层类型</param>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.NameBuilder.TypeNames">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="T:AutoCSer.Config.TypeAttribute">
            <summary>
            配置容器类型
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMethodCache">
            <summary>
            二进制数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.memberMethods">
            <summary>
            未知类型序列化调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumByteArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumSByteArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumShortArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUShortArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumIntArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUIntArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumLongArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumULongArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.nullableArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.structArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.arrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumByteMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumSByteMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumShortMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUShortMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumIntMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUIntMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumLongMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumULongMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.dictionaryMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.nullableMemberSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.structSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.memberClassSerializeMethod">
            <summary>
            引用类型成员序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetMember(System.Type)">
            <summary>
            未知类型枚举序列化委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型序列化委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],System.Boolean,System.Int32@)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fieldIndexs"></param>
            <param name="isJson"></param>
            <param name="memberCountVerify"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.BaseSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumByteArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumSByteArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumShortArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumUShortArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumIntArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumUIntArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumLongArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumULongArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.NullableArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.LeftArraySerializeMethod">
            <summary>
            数组序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.DictionarySerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.NullableSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.KeyValuePairSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructDictionaryMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassDictionaryMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumSByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumSByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumUShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumUShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumUIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumUIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumLongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumLongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumULongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumULongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.realSerializers">
            <summary>
            真实类型序列化函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.realTypeObjectMethod">
            <summary>
            真实类型序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetRealSerializer(System.Type)">
            <summary>
            获取真实类型序列化函数
            </summary>
            <param name="type">数组类型</param>
            <returns>真实类型序列化函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetCustom(System.Type,System.Boolean)">
            <summary>
            获取自定义序列化函数信息
            </summary>
            <param name="type"></param>
            <param name="isSerializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.isReferenceMember``1">
            <summary>
            是否支持循环引用处理
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.isReferenceMemberMethod">
            <summary>
            是否支持循环引用处理函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.isReferenceMembers">
            <summary>
            是否支持循环引用处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.IsReferenceMember(System.Type)">
            <summary>
            是否支持循环引用处理
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeVersionFields`1">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.removeMemberCount">
            <summary>
            被删除成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.CreateLock">
            <summary>
            二进制数据反序列化访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.DeSerializer">
            <summary>
            二进制数据反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.#ctor(System.UInt32,AutoCSer.BinarySerialize.DeSerializeVersionField[],System.UInt32)">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
            <param name="globalVersion">全局版本编号</param>
            <param name="fields">字段集合</param>
            <param name="removeMemberCount">被删除成员数量</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.Create(System.Boolean)">
            <summary>
            创建二进制数据反序列化
            </summary>
            <param name="isJson"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeVersionFields`1.CreateOnly(System.Boolean,System.Boolean)">
            <summary>
            创建二进制数据反序列化
            </summary>
            <param name="isJson"></param>
            <param name="isMemberMap"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Unmanaged">
            <summary>
            非托管内存
            </summary>
        </member>
        <member name="F:AutoCSer.Unmanaged.NullByte8">
            <summary>
            8个0字节（公用）
            </summary>
        </member>
        <member name="F:AutoCSer.Unmanaged.staticSize">
            <summary>
            不释放的固定内存申请大小
            </summary>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetStatic64(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear">是否需要清除</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.FreeStatic(System.Byte*@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="F:AutoCSer.Unmanaged.totalSize">
            <summary>
            非托管内存申请字节数
            </summary>
        </member>
        <member name="M:AutoCSer.Unmanaged.Get(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.Get64(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetSizeUnsafe64(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.Free(System.Byte*,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Unmanaged.Free(AutoCSer.Pointer.Size@)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetStatic(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear">是否需要清除</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size"></param>
            <param name="isClear"></param>
            <param name="isStaticUnmanaged"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.TypeAttribute">
            <summary>
            类型自定义属性信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.TypeAttribute.attributes">
            <summary>
            自定义属性信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.get(System.Type)">
            <summary>
            根据类型获取自定义属性信息集合
            </summary>
            <param name="type">对象类型</param>
            <returns>自定义属性信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.GetAttributes``1(System.Type)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="type">对象类型</param>
            <typeparam name="attributeType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.GetAttribute``1(System.Type)">
            <summary>
            根据类型获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            根据类型获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeAttribute">
            <summary>
            JSON 序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute">
            <summary>
            成员选择
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsAttribute">
            <summary>
            成员是否匹配自定义属性类型，默认为 false 表示选择所有成员。
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsBaseTypeAttribute">
            <summary>
            指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.Instance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.Instance.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.Instance.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.NonPublic">
            <summary>
            默认非公有成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField">
            <summary>
            默认公有动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.InstanceField">
            <summary>
            默认动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty">
            <summary>
            默认动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeAttribute.AnonymousTypeMember">
            <summary>
            匿名类型序列化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseConfig">
            <summary>
            JSON 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.Constructor">
            <summary>
            自定义构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.IsEndSpace">
            <summary>
            对象解析结束后是否检测最后的空格符，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.IsTempString">
            <summary>
            是否临时字符串(可修改)
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.IsMatchEnum">
            <summary>
            是否强制匹配枚举值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseConfig.Null">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.StringExtension">
            <summary>
            字符串相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.CopyNotNull(System.String,System.Void*)">
            <summary>
            复制字符串
            </summary>
            <param name="source">原字符串,不能为null</param>
            <param name="destination">目标字符串地址,不能为null</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.SimpleCopyNotNull(System.String,System.Void*)">
            <summary>
            复制字符串
            </summary>
            <param name="source">原字符串,不能为null</param>
            <param name="destination">目标字符串地址,不能为null</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.SimpleCopyNotNull(System.Char*,System.Char*,System.Int32)">
            <summary>
            复制字符数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="count">字符数量,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.SimpleCopyNotNull64(System.Char*,System.Char*,System.Int32)">
            <summary>
            复制字符数组(不足8字节按8字节算)
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="count">字符数量,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.WriteBytesNotNull(System.Char*,System.Int32,System.Byte*)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="length">字符串长度</param>
            <param name="write">写入位置,不能为null</param>
        </member>
        <member name="F:AutoCSer.Extension.StringExtension.FastAllocateString">
            <summary>
            申请字符串空间
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.NamePool">
            <summary>
            名称申请池
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.poolSize">
            <summary>
            申请池大小
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.start">
            <summary>
            申请池起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.end">
            <summary>
            申请池结束未知
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.createLock">
            <summary>
            申请池创建访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.getLock">
            <summary>
            申请池获取访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.NamePool.GetChar(System.Int32)">
            <summary>
            获取名称空间
            </summary>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.NamePool.Get(System.String,System.Int32,System.Int32)">
            <summary>
            获取名称空间
            </summary>
            <param name="name"></param>
            <param name="seek">前缀字符长度</param>
            <param name="endSize">后缀字符长度</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Emit.CollectionConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.CollectionConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Algorithm.QuickSort">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">排序数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="comparer">排序比较器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sort``1(``0[],System.Func{``0,``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">排序数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="comparer">排序比较器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="T:AutoCSer.Algorithm.QuickSort.Sorter`1">
            <summary>
            排序器
            </summary>
            <typeparam name="valueType">排序数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort.Sorter`1.Array">
            <summary>
            待排序数组
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort.Sorter`1.Comparer">
            <summary>
            排序比较器
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sorter`1.Sort(System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeSerializer`1">
            <summary>
            类型序列化
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.defaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.attribute">
            <summary>
            XML序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.Serialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.StructSerialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.ClassSerialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            引用类型对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.MemberSerialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            值类型对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.enumToString(AutoCSer.Xml.Serializer,`0)">
            <summary>
            枚举转换字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.ignore(AutoCSer.Xml.Serializer,`0)">
            <summary>
            不支持序列化
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.Xml.CustomAttribute">
            <summary>
            自定义类型函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Link`1">
            <summary>
            链表节点
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.LinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetLinkNextClear">
            <summary>
            获取并清除下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldPoolLink">
            <summary>
            缓存对象链表（用于冲突概率低的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.maxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.PushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.IsPushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.PushLink(`0,`0,System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="count">数据数量</param>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldPool">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.Default">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharSearcher">
            <summary>
            字符搜索器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            字符搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.GetCharIndex(System.Char*,System.Char*,System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="charStart">特殊字符串查找表</param>
            <param name="charEnd">特殊字符串查找表结束位置</param>
            <param name="value">特殊字符</param>
            <returns>特殊字符位置,匹配失败返回null</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.Search(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value"></param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Int32)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="length">匹配长度</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.MethodImplAttribute">
            <summary>
            屏蔽方法实现
            </summary>
        </member>
        <member name="M:AutoCSer.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
            <summary>
            屏蔽方法实现
            </summary>
            <param name="methodImplOptions"></param>
        </member>
        <member name="T:AutoCSer.MethodImpl">
            <summary>
            屏蔽方法实现
            </summary>
        </member>
        <member name="F:AutoCSer.MethodImpl.AggressiveInlining">
            <summary>
            内联方法定义
            </summary>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1">
            <summary>
            类型解析器
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.parseMember">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.parseMemberMap">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.attribute">
            <summary>
            JSON 解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.DefaultParser">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.onUnknownName">
            <summary>
            未知名称处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.isAnonymousType">
            <summary>
            是否匿名类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.memberParsers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.unboxParser">
            <summary>
            包装处理
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseValue(AutoCSer.Json.Parser,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.parseClass(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseMembers(AutoCSer.Json.Parser,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseClass(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseStruct(AutoCSer.Json.Parser,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.Array(AutoCSer.Json.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ArrayIndex(AutoCSer.Json.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="values">目标数据</param>
            <returns>数据数量,-1表示失败</returns>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.arrayManyRank(AutoCSer.Json.Parser,`0@)">
            <summary>
            不支持多维数组
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ignore(AutoCSer.Json.Parser,`0@)">
            <summary>
            忽略数据
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.unbox(AutoCSer.Json.Parser,`0@)">
            <summary>
            包装处理
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumParser">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.EnumParser`1">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.EnumParser`1.enumValues">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.EnumParser`1.enumSearchData">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumParser.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumParser.parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumParser.getIndex(AutoCSer.Json.Parser,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumByte.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumByte.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumSByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumSByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumSByte.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumSByte.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumShort.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumShort.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumUShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumUShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUShort.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUShort.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumInt.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumInt.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumUInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumUInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUInt.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUInt.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumLong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumLong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumLong.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumLong.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumULong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumULong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumULong.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumULong.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.TryParseFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.TryParseFilter.TryParse">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.TryParseFilter.MemberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.TryParseFilter.Call(AutoCSer.Json.Parser,AutoCSer.Metadata.MemberMap,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="parser">Json解析器</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.TryParse">
            <summary>
            解析委托
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.UnknownParse">
            <summary>
            未知名称处理委托
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.ParseMember">
            <summary>
            默认名称解析
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.ParseMemberMap">
            <summary>
            默认名称解析
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.ParseMethod">
            <summary>
            基本类型解析函数配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.Parser">
            <summary>
            JSON 解析
            </summary>
            <summary>
            JSON 解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.escapeCharSize">
            <summary>
            转义字符集合尺寸
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseNumberBit">
            <summary>
            JSON 解析数字
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseNameBit">
            <summary>
            JSON 解析键值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseNameStartBit">
            <summary>
            JSON 解析键值开始
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseSpaceBit">
            <summary>
            JSON 解析空格[ ,\t,\r,\n,160]
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseEscapeSearchBit">
            <summary>
            JSON 解析转义查找
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.EscapeBit">
            <summary>
            Javascript 转义位[\r,\n,\\,"]
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Byte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.SByte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.UInt16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Int16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Int32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.UInt64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Int64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Single}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Double}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Decimal}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Char}@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.DateTime@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.DateTime}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Guid}@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Type@)">
            <summary>
            类型解析
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(AutoCSer.Json.Node@)">
            <summary>
            JSON节点解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="F:AutoCSer.Json.Parser.parseMethods">
            <summary>
            基本类型解析函数
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.GetParseMethod(System.Type)">
            <summary>
            获取基本类型解析函数
            </summary>
            <param name="type">基本类型</param>
            <returns>解析函数</returns>
        </member>
        <member name="F:AutoCSer.Json.Parser.JavascriptLocalMinTime">
            <summary>
            JSON 转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.JavascriptLocalMinTimeTicks">
            <summary>
             Json转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.AllMemberAttribute">
            <summary>
            默认解析所有成员
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.escapeChars">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.anonymousTypes">
            <summary>
            匿名类型数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.jsonFixed">
            <summary>
            Json字符串起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.Current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.end">
            <summary>
            解析结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.endChar">
            <summary>
            最后一个字符
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.Quote">
            <summary>
            当前字符串引号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseState">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndSpace">
            <summary>
            是否以空格字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndDigital">
            <summary>
            是否以10进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndHex">
            <summary>
            是否以16进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndNumber">
            <summary>
            是否以数字字符结束
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.#ctor">
            <summary>
            JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(AutoCSer.SubString@,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(System.String,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(System.Char*,System.Int32,``0@)">
            <summary>
            Json解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="length">Json长度</param>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(``0@)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.TypeParse``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.TypeParse``1">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.VerifyRead(System.Int32)">
            <summary>
            自定义序列化重置当前读取数据位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.MoveRead(System.Int32)">
            <summary>
            移动当前读取数据位置，负数表示自定义序列化失败
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Free">
            <summary>
            释放 JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.space">
            <summary>
            扫描空格字符
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.isNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.isNaNPositiveInfinity">
            <summary>
            是否非数字 NaN / Infinity
            </summary>
            <returns>是否非数字NaN</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns>是否 -Infinity</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex32(System.UInt32@)">
            <summary>
            解析16进制数字
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex64">
            <summary>
            解析16进制数字
            </summary>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchNumber(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchNumberNull(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.getNumberString(System.Char*)">
            <summary>
            获取数字字符串
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseTime(System.String,System.DateTime@)">
            <summary>
            时间解析 /Date(xxx)/
            </summary>
            <param name="timeString"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchEscape">
            <summary>
            查找字符串中的转义符
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscape">
            <summary>
            字符串转义解析
            </summary>
            <returns>写入结束位置</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscapeSize">
            <summary>
            获取转义后的字符串长度
            </summary>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscapeUnsafe(System.Char*)">
            <summary>
            字符串转义解析
            </summary>
            <param name="write">当前写入位置</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscape(System.Char*)">
            <summary>
            字符串解析
            </summary>
            <param name="start"></param>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseString">
            <summary>
            字符串解析
            </summary>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchEscapeEnd">
            <summary>
            查找转义字符串结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseStringNode(AutoCSer.Json.Node@)">
            <summary>
            解析字符串节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseListNode(AutoCSer.LeftArray{AutoCSer.Json.Node}@)">
            <summary>
            解析列表节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseDictionaryNode(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.Json.Node,AutoCSer.Json.Node}}@)">
            <summary>
            解析字典节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Ignore">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreString">
            <summary>
            忽略字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreNumber">
            <summary>
            忽略数字
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreArray">
            <summary>
            忽略数组
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsFirstArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsNextArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreObject">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsFirstObject">
            <summary>
            判断是否存在第一个成员
            </summary>
            <returns>是否存在第一个成员</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsNextObject">
            <summary>
            判断是否存在下一个成员
            </summary>
            <returns>是否存在下一个成员</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsName(System.Byte*,System.Int32@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreName">
            <summary>
            忽略成员名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchNameEnd">
            <summary>
            查找名称直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchColon">
            <summary>
            查找冒号
            </summary>
            <returns>是否找到</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchObject">
            <summary>
            查找对象起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.GetFirstName">
            <summary>
            获取成员名称第一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.GetNextName">
            <summary>
            获取成员名称下一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.NextStringChar">
            <summary>
            读取下一个字符
            </summary>
            <returns>字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchStringEnd">
            <summary>
            查找字符串直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.SetAnonymousType``1(``0)">
            <summary>
            设置匿名类型数据
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.CheckNoConstructor``1(``0@,System.Boolean)">
            <summary>
            找不到构造函数
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value">目标数据</param>
            <param name="isAnonymousType"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchArray``1(``0[]@)">
            <summary>
            查找数组起始位置
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标数组</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchQuote">
            <summary>
            查找字符串引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchEnumQuote">
            <summary>
            查找枚举引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.NextEnumChar">
            <summary>
            获取下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchNextEnum">
            <summary>
            查找下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsEnumNumber">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsEnumNumberFlag">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchDictionary">
            <summary>
            查找字典起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.isDictionaryObjectEnd">
            <summary>
            对象是否结束
            </summary>
            <returns>对象是否结束</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.tryNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumSByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumLong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumULong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumSByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumLongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumULongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.structParse``1(``0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.typeParse``1(``0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.array``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.dictionary``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典解析
            </summary>
            <param name="dictionary">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.nullableEnumParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.nullableParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.keyValuePairParse``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.listConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.collectionConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumerableConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.arrayConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.dictionaryConstructor``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.baseParse``2(``1@)">
            <summary>
            基类转换
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseQuoteString(AutoCSer.SubString@,AutoCSer.CharStream,System.Int32,System.Char)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="charStream"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString@,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(System.String,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.UnsafeParse``1(System.Char*,System.Int32,``0@)">
            <summary>
            Json解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">Json 字符串</param>
            <param name="length">Json 长度</param>
            <param name="value">目标数据</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="F:AutoCSer.Json.Parser.escapeCharData">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseBits">
            <summary>
            JSON 解析字符状态位
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Parser.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Parser.CustomRead">
            <summary>
            自定义序列化获取当前读取数据位置
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Parser.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.EnumCast`2">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="valueType">枚举类型</typeparam>
            <typeparam name="intType">枚举值数字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.EnumCast`2.ToInt">
            <summary>
            枚举转数字委托
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.EnumCast`2.FromInt">
            <summary>
            数字转枚举委托
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeCustomAttribute">
            <summary>
            自定义类型成员标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.Fields`1">
            <summary>
            字段集合信息
            </summary>
            <typeparam name="fieldType"></typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.FixedFields">
            <summary>
            固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.FieldArray">
            <summary>
            非固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.JsonFields">
            <summary>
            JSON 混合序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.FixedSize">
            <summary>
            固定序列化字段字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Fields`1.#ctor(AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{`0}@,AutoCSer.LeftArray{AutoCSer.Metadata.FieldIndex}@,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            字段集合信息
            </summary>
            <param name="fixedFields">固定序列化字段</param>
            <param name="fields">非固定序列化字段</param>
            <param name="jsonFields">JSON 混合序列化字段</param>
            <param name="fixedSize">固定序列化字段字节数</param>
            <param name="isJson"></param>
            <param name="memberCountVerify">序列化成员数量</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeVersionField">
            <summary>
            二进制数据反序列化版本字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionField.Field">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionField.Attribute">
            <summary>
            二进制数据序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionField.IsRemove">
            <summary>
            是否删除字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionField.GlobalVersionSort">
            <summary>
            全局版本编号排序比较
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeVersionField.globalVersionSort(AutoCSer.BinarySerialize.DeSerializeVersionField,AutoCSer.BinarySerialize.DeSerializeVersionField)">
            <summary>
            全局版本编号排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionField.MemberIndexSort">
            <summary>
            成员索引排序比较
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeVersionField.memberIndexSort(AutoCSer.BinarySerialize.DeSerializeVersionField,AutoCSer.BinarySerialize.DeSerializeVersionField)">
            <summary>
            成员索引排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeVersionField.MemberNameSort">
            <summary>
            成员名称排序比较
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeVersionField.memberNameSort(AutoCSer.BinarySerialize.DeSerializeVersionField,AutoCSer.BinarySerialize.DeSerializeVersionField)">
            <summary>
            成员名称排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeSerializeVersionField.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeSerializeVersionField.SortMemberFilters">
            <summary>
            静态成员转换为实例成员
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.MemberAttribute">
            <summary>
            XML序列化成员配置
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreMemberAttribute">
            <summary>
            禁止安装属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.IgnoreMemberAttribute.IsIgnoreCurrent">
            <summary>
            是否禁止当前安装
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            是否禁止当前安装
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.IgnoreMemberAttribute.IsSetup">
            <summary>
            是否安装[AutoCSer.code]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberAttribute.ItemName">
            <summary>
            集合子节点名称(不能包含非法字符)
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.PropertyIndex">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo`1">
            <summary>
            成员索引
            </summary>
            <typeparam name="memberType">成员类型</typeparam>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.MemberFilters">
            <summary>
            选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.isIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(System.Reflection.MemberInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="index">成员编号</param>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.attributes">
            <summary>
            自定义属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.baseAttributes">
            <summary>
            自定义属性集合(包括基类成员属性)
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.Attributes``1(System.Boolean)">
            <summary>
            获取自定义属性集合
            </summary>
            <typeparam name="attributeType"></typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetAttribute``1(System.Boolean)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetSetupAttribute``1(System.Boolean)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.IsAttribute``1(System.Boolean)">
            <summary>
            判断是否存在自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>是否存在自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.IsIgnoreAttribute``1(System.Boolean)">
            <summary>
            判断是否忽略自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>是否忽略自定义属性</returns>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberSystemType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.AwaiterReturnType">
            <summary>
            AutoCSer.Net.TcpServer.Awaiter[,] 返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.TemplateMemberType">
            <summary>
            模板成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberIndex">
            <summary>
            成员编号
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanSet">
            <summary>
            是否可赋值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanGet">
            <summary>
            是否可读取
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo`1.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo`1.#ctor(`0,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.PropertyIndex.#ctor(System.Reflection.PropertyInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            属性信息
            </summary>
            <param name="property">属性信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="T:AutoCSer.Json.ParseResult">
            <summary>
            JSON 解析状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.Json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseResult.op_Implicit(AutoCSer.Json.ParseResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.EmitGenerator">
            <summary>
            MSIL生成
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.int32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载Int32数据
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.memberMapIsMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            判断成员位图是否匹配成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.memberMapSetMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            设置成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            函数调用
            </summary>
            <param name="generator"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.toPointer(System.Int64)">
            <summary>
            整数转换成指针
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.toPointerMethod">
            <summary>
            整数转换成指针
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.charStreamSimpleWriteNotNullCharsMethod">
            <summary>
            内存字符流写入字符串方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.charStreamSimpleWriteNotNull(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.initobjShort(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.initobj(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="T:AutoCSer.Extension.EmitGenerator.MemberMap">
            <summary>
            成员位图函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.map">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Type">
            <summary>
            成员位图类型信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.#ctor(AutoCSer.Metadata.MemberMap.TypeInfo)">
            <summary>
            成员位图
            </summary>
            <param name="type">成员位图类型信息</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Empty">
            <summary>
            清空所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Full">
            <summary>
            添加所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.IsMember(System.Int32)">
            <summary>
            判断成员索引是否有效
            </summary>
            <param name="memberIndex">成员索引</param>
            <returns>成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.ClearMember(System.Int32)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.ClearMember(System.String)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.SetMember(System.Int32)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.SetMember(System.String)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.BinarySerialize(AutoCSer.UnmanagedStream)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.GetFieldDeSerialize">
            <summary>
            获取字段成员反序列化位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.equals(AutoCSer.Metadata.MemberMap)">
            <summary>
            比较是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.equals(System.Byte*)">
            <summary>
            比较是否相等
            </summary>
            <param name="otherMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.GetMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取成员名称
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.IsDefault">
            <summary>
            是否默认全部成员有效
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap.TypeInfo">
            <summary>
            成员位图类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.TypeInfo.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.TypeInfo.Pool">
            <summary>
            成员位图内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.TypeInfo.NameIndexSearcher">
            <summary>
            名称索引查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.#ctor(System.Type,AutoCSer.Metadata.MemberIndexInfo[],System.Int32)">
            <summary>
            成员位图类型信息
            </summary>
            <param name="type">类型</param>
            <param name="members">成员索引集合</param>
            <param name="fieldCount">字段成员数量</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.GetMemberIndex(System.String)">
            <summary>
            获取成员索引
            </summary>
            <param name="name">成员名称</param>
            <returns>成员索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.GetClear">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.GetMap">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.Push(System.Byte*@)">
            <summary>
            成员位图入池
            </summary>
            <param name="map">成员位图</param>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.MemberCount">
            <summary>
            成员数量
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.FieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.MemberMapSize">
            <summary>
            成员位图字节数量
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.BinarySerializeSize">
            <summary>
            字段成员位图序列化字节数量
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap.Pool">
            <summary>
            成员位图内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memorySize">
            <summary>
            成员位图内存池字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.maxMemberMapCount">
            <summary>
            成员位图内存池支持最大成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.free">
            <summary>
            空闲内存地址
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.size">
            <summary>
            成员位图字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.freeLock">
            <summary>
            空闲内存地址访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.clearCount">
            <summary>
            填充整数数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.#ctor(System.Int32)">
            <summary>
            成员位图内存池
            </summary>
            <param name="size">成员位图字节数量</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.Get">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.GetClear">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.Push(System.Byte*@)">
            <summary>
            成员位图入池
            </summary>
            <param name="map">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.GetPool(System.Int32)">
            <summary>
            获取成员位图内存池
            </summary>
            <param name="size">成员位图字节数量</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.pools">
            <summary>
            成员位图内存池集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.poolLock">
            <summary>
            成员位图内存池集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryCount">
            <summary>
            内存申请数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryStart">
            <summary>
            成员位图内存池起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryEnd">
            <summary>
            成员位图内存池结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryLock">
            <summary>
            成员位图内存池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.createLock">
            <summary>
            成员位图内存池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.MemberMap.IsMemberMethod">
            <summary>
            判断成员位图是否匹配成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.MemberMap.SetMemberMethod">
            <summary>
            设置成员索引
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberAttribute">
            <summary>
            二进制数据序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberAttribute.GlobalVersion">
            <summary>
            全局版本编号（添加字段）
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberAttribute.RemoveGlobalVersion">
            <summary>
            全局版本编号（删除字段），大于添加字段全局版本编号时有效 ，静态字段不能用 public 修饰
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberAttribute.IsRemovePublic">
            <summary>
            默认为 true 表示字段删除前用 public 修饰
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberAttribute.IsJson">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberAttribute.Null">
            <summary>
            默认空配置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.SerializeMemberAttribute.IsRemove">
            <summary>
            字段是否已经被删除
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.SerializeMemberAttribute.GetIsJson">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.Parser">
            <summary>
            XML 解析器
            </summary>
            <summary>
            XML 解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.spaceBit">
            <summary>
            XML解析空格[ ,\t,\r,\n]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.targetStartCheckBit">
            <summary>
            XML解析名称检测
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributeNameSearchBit">
            <summary>
            XML解析属性名称查找
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.EncodeSpaceBit">
            <summary>
            XML序列化转换字符[ ,\t,\r,\n,&amp;,>,&lt;]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.EncodeBit">
            <summary>
            XML序列化转换字符[&amp;,>,&lt;]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributes">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.anonymousTypes">
            <summary>
            匿名类型数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.xml">
            <summary>
            XML字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.xmlFixed">
            <summary>
            XML字符串起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.end">
            <summary>
            解析结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.valueStart">
            <summary>
            当前数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.valueSize">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributeNameStartIndex">
            <summary>
            属性名称起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributeNameEndIndex">
            <summary>
            属性名称结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.sign">
            <summary>
            数字符号
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.IsCData">
            <summary>
            当前数据是否CDATA
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.isTagEnd">
            <summary>
            名称解析节点是否结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse``1(AutoCSer.SubString@,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="xml">XML字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse``1(System.String,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="xml">XML字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse``1(``0@)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.TypeParse``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.TypeParse``1">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.VerifyRead(System.Int32)">
            <summary>
            自定义序列化重置当前读取数据位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.MoveRead(System.Int32)">
            <summary>
            移动当前读取数据位置，负数表示自定义序列化失败
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.free">
            <summary>
            释放XML解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.space">
            <summary>
            空格过滤
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.endSpace">
            <summary>
            空格过滤
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.searchValue">
            <summary>
            查找数据起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.SearchValueEnd">
            <summary>
            数据结束处理
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getValue">
            <summary>
            获取文本数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getValueEnd">
            <summary>
            数据结束处理
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.searchCData2">
            <summary>
            查找CDATA数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.SearchCDataValue">
            <summary>
            查找CDATA数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IgnoreValue">
            <summary>
            忽略数据
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.isNaN">
            <summary>
            是否非数字 NaN
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.isPositiveInfinity">
            <summary>
            是否 Infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getName(System.Int32@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getNameOnly(System.Int32@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.GetName(System.Int32@,System.Byte@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <param name="isTagEnd">名称解析节点是否结束</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CheckNameEnd(System.Char*,System.Int32)">
            <summary>
            节点名称结束检测
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.attribute">
            <summary>
            属性解析
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.attributeName">
            <summary>
            属性名称解析
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.attributeValue">
            <summary>
            属性值解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.NextEnumChar">
            <summary>
            读取下一个枚举字符
            </summary>
            <returns>枚举字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.NextCDataEnumChar">
            <summary>
            读取下一个枚举字符
            </summary>
            <returns>枚举字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsNextFlagEnum">
            <summary>
            枚举值是否结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsEnumNumber">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IgnoreSearchValue">
            <summary>
            忽略数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsEnumNumberFlag">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsName(System.Byte*,System.Int32@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsNameEnd(System.Byte*)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsArrayItem(System.Char*,System.Int32)">
            <summary>
            是否存在数组数据
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex32(System.UInt32@)">
            <summary>
            解析16进制数字
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex64">
            <summary>
            解析16进制数字
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.decodeChar(System.Char@)">
            <summary>
            字符解码
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.decodeString(System.Char*,System.Char*)">
            <summary>
            字符串解码
            </summary>
            <param name="write"></param>
            <param name="writeEnd"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsValue">
            <summary>
            判断否存存在数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomParse(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomParse(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomParse(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomEnumByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomIgnoreValue">
            <summary>
            忽略数据
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CheckNoConstructor``1(``0@,System.Boolean)">
            <summary>
            找不到构造函数
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value">目标数据</param>
            <param name="isAnonymousType"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.SetAnonymousType``1(``0)">
            <summary>
            设置匿名类型数据
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.typeParse``1(``0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.structParse``1(``0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.baseParse``2(``1@)">
            <summary>
            基类转换
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.array``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.nullableEnumParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.nullableParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.keyValuePairParse``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.listConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.collectionConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumerableConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.arrayConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.dictionaryConstructor``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumSByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumLong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumULong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumSByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumLongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumULongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString@,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(System.String,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(System.String,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="F:AutoCSer.Xml.Parser.Bits">
            <summary>
            字符状态位
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.decodeSearcher">
            <summary>
            字符 Decode 转码
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Byte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.SByte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.UInt16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Int16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Int32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.UInt64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Int64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Single}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Double}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Decimal}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Char}@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.DateTime@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.DateTime}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Guid}@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(AutoCSer.Xml.Node@)">
            <summary>
            XML节点解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="F:AutoCSer.Xml.Parser.parseMethods">
            <summary>
            基本类型解析函数
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.GetParseMethod(System.Type)">
            <summary>
            获取基本类型解析函数
            </summary>
            <param name="type">基本类型</param>
            <returns>解析函数</returns>
        </member>
        <member name="P:AutoCSer.Xml.Parser.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Parser.ArrayItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Parser.CustomRead">
            <summary>
            自定义序列化获取当前读取数据位置
            </summary>
        </member>
        <member name="T:AutoCSer.MemberCopy.MemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.MemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.MemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.MemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.#ctor(System.Type,System.Reflection.Emit.DynamicMethod)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="dynamicMethod"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.PushMemberMap(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.Create``1">
            <summary>
            创建成员复制委托
            </summary>
            <returns>成员复制委托</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeMethodCache">
            <summary>
            JSON 序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.BaseSerializeMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],AutoCSer.Json.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Json.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom">成员类型</param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.namePools">
            <summary>
            名称数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetNamePool(System.String)">
            <summary>
            获取名称数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumMethods">
            <summary>
            枚举转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumToStringMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>枚举转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.typeMethods">
            <summary>
            未知类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.classSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.structSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetType(System.Type)">
            <summary>
            未知类型枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.objectMethods">
            <summary>
            object转换调用委托信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.serializeObjectMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetObject(System.Type)">
            <summary>
            获取object转换调用委托信息
            </summary>
            <param name="type">真实类型</param>
            <returns>object转换调用委托信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.arrayMethods">
            <summary>
            数组转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.arrayMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetArray(System.Type)">
            <summary>
            获取数组转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.dictionaryMethods">
            <summary>
            字典转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.dictionaryMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.stringDictionaryMethod">
            <summary>
            字符串字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetDictionary(System.Type)">
            <summary>
            获取字典转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>字典转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.nullableMethods">
            <summary>
            可空类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.nullableSerializeMethod">
            <summary>
            值类型对象转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetNullable(System.Type)">
            <summary>
            获取可空类型转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>可空类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.keyValuePairMethods">
            <summary>
            键值对转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.keyValuePairSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetKeyValuePair(System.Type)">
            <summary>
            获取键值对转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>键值对转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumerableMethods">
            <summary>
            枚举集合转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.structEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetIEnumerable(System.Type)">
            <summary>
            获取枚举集合转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举集合转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.customMethods">
            <summary>
            自定义转换调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetCustom(System.Type)">
            <summary>
            自定义枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>自定义转换委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.FieldSize">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.FixedSize">
            <summary>
            固定分组排序字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.#ctor(AutoCSer.Metadata.FieldIndex)">
            <summary>
            字段信息
            </summary>
            <param name="field"></param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.FixedSizeSort">
            <summary>
            固定分组排序字节数排序比较
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.fixedSizeSort(AutoCSer.BinarySerialize.FieldSize,AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            固定分组排序字节数排序比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.fixedSizes">
            <summary>
            固定类型字节数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeArrayMap.Read">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.#ctor(System.Byte*)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.#ctor(System.Byte*,System.UInt32)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
            <param name="bit">当前位</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.Next">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.NextBool">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.MemberCopy">
            <summary>
            成员复制扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copy``2(``1,AutoCSer.Metadata.MemberMap{``1})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="baseType">复制成员对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copy``2(``0,AutoCSer.Metadata.MemberMap{``1})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="baseType">复制成员对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copy``1(``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyForm``1(``0,``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyForm``1(``0,``0@,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyTo``1(``0,``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="writeValue">目标对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyTo``1(``0,``0@,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="writeValue">目标对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.memberwiseClone``1(``0)">
            <summary>
            对象浅复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.Collection`1">
            <summary>
            ICollection 泛型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Extension.Collection`1.collection">
            <summary>
            ICollection数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.#ctor(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="collection">ICollection数据集合</param>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.System#Collections#Generic#IEnumerable{valueType}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Remove(`0)">
            <summary>
            移除数据(不可用)
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="values">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="P:AutoCSer.Extension.Collection`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Extension.Collection`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.Collection">
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection.toGeneric``1(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="value">数据集合</param>
            <returns>泛型数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.count``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            获取数据数量
            </summary>
            <param name="value">数据集合</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">数据集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <typeparam name="arrayType">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <typeparam name="arrayType">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="T:AutoCSer.Emit.DictionaryConstructor`3">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="dictionaryType">集合类型</typeparam>
            <typeparam name="keyType">枚举值类型</typeparam>
            <typeparam name="valueType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.DictionaryConstructor`3.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Config.MemberAttribute">
            <summary>
            配置项
            </summary>
        </member>
        <member name="F:AutoCSer.Config.MemberAttribute.Name">
            <summary>
            配置名称，默认为空字符串表示默认名称，null 表示使用定义名称
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMap">
            <summary>
            自定义序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMap.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMap.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMap.JsonMemberMap">
            <summary>
            JSON序列化成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeConfig">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.HeaderMapValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.HeaderMapAndValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.MemberMapValue">
            <summary>
            是否序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.ObjectRealTypeValue">
            <summary>
            是否检测引用类型对象的真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.GlobalVersionValue">
            <summary>
            是否检测全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.IsRealType">
            <summary>
            是否检测引用类型对象的真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.globalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.headerValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeConfig.createHeaderValue">
            <summary>
            初始化序列化头部数据
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeConfig.WriteHeader(AutoCSer.UnmanagedStream)">
            <summary>
            写入序列化头部数据
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeConfig.UnsafeWriteHeader(AutoCSer.UnmanagedStream)">
            <summary>
            写入序列化头部数据
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeConfig.CheckHeaderValue(System.Byte*,System.UInt32@)">
            <summary>
            检测序列化头部数据
            </summary>
            <param name="start"></param>
            <param name="globalVersion"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.BinarySerialize.SerializeConfig.HeaderValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.JsonMemberAttribute">
            <summary>
            二进制数据序列化成员 JSON 扩展配置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.JsonMemberAttribute.GetIsJson">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMethodCache">
            <summary>
            二进制数据反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.structDeSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.memberClassDeSerializeMethod">
            <summary>
            序列化接口函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumByteMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumSByteMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumShortMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUShortMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumIntMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUIntMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumLongMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumULongMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.dictionaryMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.nullableMemberDeSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.sortedDictionaryMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.sortedListMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.nullableArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.structArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.arrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumByteArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumSByteArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumShortArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUShortArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumIntArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUIntArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumLongArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumULongArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.memberMethods">
            <summary>
            未知类型反序列化调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMethodCache.GetMember(System.Type)">
            <summary>
            未知类型枚举反序列化委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型反序列化委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.BaseSerializeMethod">
            <summary>
            基类反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.LeftArrayDeSerializeMethod">
            <summary>
            数组对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.DictionaryDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.NullableDeSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.KeyValuePairDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.SortedDictionaryDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.SortedListDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.StructCollectionMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.ClassCollectionMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.StructDictionaryDeSerializeMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.ClassDictionaryDeSerializeMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumByteArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumSByteArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumShortArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumUShortArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumIntArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumUIntArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumLongArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumULongArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.NullableArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.StructArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.ArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.realDeSerializers">
            <summary>
            真实类型序列化函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.realTypeObjectMethod">
            <summary>
            基类反序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMethodCache.GetRealDeSerializer(System.Type)">
            <summary>
            获取真实类型序列化函数
            </summary>
            <param name="type">数组类型</param>
            <returns>真实类型序列化函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Xml.Serializer">
            <summary>
            XML序列化
            </summary>
            <summary>
            XML序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.DeSerializeAttributeName">
            <summary>
            反序列化配置名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.AllMemberAttribute">
            <summary>
            默认反序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.DefaultAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.CharStream">
            <summary>
            字符串输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.GetItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.forefather">
            <summary>
            祖先节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.forefatherCount">
            <summary>
            祖先节点数量
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.checkLoopDepth">
            <summary>
            循环检测深度
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize``1(``0,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize``1(``0,AutoCSer.CharStream,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="xmlStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize``1(``0)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.TypeSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Push``1(``0)">
            <summary>
            进入对象节点
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">数据对象</param>
            <returns>是否继续处理对象</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Pop">
            <summary>
            退出对象节点
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.nameStart(System.Char*,System.Int32)">
            <summary>
            标签开始
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.nameEnd(System.Char*,System.Int32)">
            <summary>
            标签结束
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.encodeSpaceSize(System.Char)">
            <summary>
            计算编码增加长度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.encodeSpace(System.Byte*@,System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="data"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize(System.Char*,System.Int32)">
            <summary>
            字符串转换
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.emptyString">
            <summary>
            输出空字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutputSubString(AutoCSer.SubString)">
            <summary>
            是否输出字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutputString(System.String)">
            <summary>
            是否输出字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutput(System.Object)">
            <summary>
            是否输出对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutputNullable``1(System.Nullable{``0})">
            <summary>
            是否输出可空对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.classSerialize``1(``0)">
            <summary>
            引用类型对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structSerialize``1(``0)">
            <summary>
            值类型对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.enumToString``1(``0)">
            <summary>
            字符串转换
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.baseSerialize``2(AutoCSer.Xml.Serializer,``1)">
            <summary>
            基类转换
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structArray``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.nullableSerialize``1(System.Nullable{``0})">
            <summary>
            值类型对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structStructEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="values">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structClassEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="values">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.classStructEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.classClassEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize``1(``0,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize``1(``0,AutoCSer.CharStream,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="xmlStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
            <returns>警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Byte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.SByte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Int16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.UInt16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.UInt32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.UInt64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Single})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Double})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Char})">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.DateTime})">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Guid)">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Guid})">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Object)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(AutoCSer.Xml.Node)">
            <summary>
            字符串转换
            </summary>
            <param name="value">XML节点</param>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="P:AutoCSer.Xml.Serializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Xml.IgnoreMemberAttribute">
            <summary>
            XML 序列化成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.names">
            <summary>
            名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.StringCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.compare(AutoCSer.KeyValue{System.String,System.Int32},AutoCSer.KeyValue{System.String,System.Int32})">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Check(AutoCSer.KeyValue{System.String,System.Int32}[])">
            <summary>
            状态检测
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建名称查找数据
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.FormatRange">
            <summary>
            数据记录范围
            </summary>
        </member>
        <member name="F:AutoCSer.FormatRange.startIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.FormatRange.endIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.FormatRange.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            数据记录范围
            </summary>
            <param name="count">数据总量</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
        </member>
        <member name="P:AutoCSer.FormatRange.SkipCount">
            <summary>
            跳过记录数
            </summary>
        </member>
        <member name="P:AutoCSer.FormatRange.EndIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.FormatRange.GetCount">
            <summary>
            获取记录数
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1">
            <summary>
            枚举器
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Empty">
            <summary>
            空枚举实例
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1.EmptyEnumerator">
            <summary>
            空枚举器
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#Generic#IEnumerator{valueType}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1.Array">
            <summary>
            数组枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.array">
            <summary>
            被枚举数组
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.currentIndex">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.endIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.startIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            数组枚举器
            </summary>
            <param name="value">数组子串</param>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            数组枚举器
            </summary>
            <param name="array">数组</param>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#Generic#IEnumerator{valueType}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.Pub">
            <summary>
            公共类型
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.Pub.PointerSizeRefType">
            <summary>
            带长度的指针的引用类型
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Pub.CreateConstructor(System.Type,System.Type)">
            <summary>
            创建构造函数委托
            </summary>
            <param name="type"></param>
            <param name="parameterType">参数类型</param>
            <returns>构造函数委托</returns>
        </member>
        <member name="T:AutoCSer.DictionaryCreator">
            <summary>
            创建字典
            </summary>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateOnly``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateAny``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateAny``2(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateInt``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashString``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.DictionaryCreator`1">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.DictionaryCreator`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.Serializer">
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.NullValue">
            <summary>
            空对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.NullableHasValue">
            <summary>
            可空类型存在数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.RealTypeValue">
            <summary>
            真实类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Boolean)">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Boolean[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Boolean}[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Byte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Byte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.LeftArray{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Byte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.SByte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.SByte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.SByte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Single)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Single[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Single})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Single}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Double)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Double[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Double})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Double}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Decimal)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Decimal[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Decimal}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Char)">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Char[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Char}[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.DateTime)">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.DateTime[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.DateTime})">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.DateTime}[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Guid[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Guid})">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Guid}[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.String[])">
            <summary>
            字符串序列化
            </summary>
            <param name="array">字符串数组</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.SubString)">
            <summary>
            字符串序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Type)">
            <summary>
            类型信息序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.DefaultAttribute">
            <summary>
            默认二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.Stream">
            <summary>
            序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.Config">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.jsonStream">
            <summary>
            JSON序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.JsonMemberMap">
            <summary>
            JSON序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.jsonConfig">
            <summary>
            JSON序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.points">
            <summary>
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.isReferenceMember">
            <summary>
            是否支持循环引用处理
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.isReferenceArray">
            <summary>
            是否检测数组引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.streamStartIndex">
            <summary>
            数据流起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.serialize``1(``0,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.serialize``1(``0)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.TypeSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.CheckPoint``1(``0)">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.checkPoint``1(``0[])">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SerializeMemberMap``1">
            <summary>
            序列化成员位图
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.ResetJsonStream(System.Void*,System.Int32)">
            <summary>
            获取JSON序列化输出缓冲区
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetJsonConfig(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取JSON序列化配置参数
            </summary>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetJsonMemberMap``1(AutoCSer.Metadata.MemberMap,System.Int32[])">
            <summary>
            获取JSON成员位图
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="memberMap"></param>
            <param name="memberIndexs"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">设置的自定义序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SetCustomMemberMap(AutoCSer.BinarySerialize.SerializeMemberMap@)">
            <summary>
            恢复自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Boolean[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Boolean}[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Void*,System.Int32,System.Int32)">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">数据流</param>
            <param name="data">数据,不能为null</param>
            <param name="arrayLength">数据数量</param>
            <param name="size">单个数据字节数</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Byte[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            预增数据流长度并序列化数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Byte}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.SByte[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.SByte}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Int16[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int16}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.UInt16[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt16}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Int32[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int32}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.UInt32[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt32}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Int64[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int64}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.UInt64[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt64}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Single[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Single}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Double[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Double}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Decimal[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Decimal}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Char}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.DateTime[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.DateTime}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Guid[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Guid}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Char*,AutoCSer.UnmanagedStream,System.Int32)">
            <summary>
            字符串序列化
            </summary>
            <param name="valueFixed"></param>
            <param name="stream"></param>
            <param name="stringLength"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,AutoCSer.SubString@)">
            <summary>
            预增数据流长度并序列化字符串(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="value">字符串,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.realTypeObject``1(AutoCSer.BinarySerialize.Serializer,System.Object)">
            <summary>
            真实类型序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.baseSerialize``2(AutoCSer.BinarySerialize.Serializer,``1)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumByteArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumSByteArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumShortArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUShortArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumIntArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUIntArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumLongArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumULongArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableArray``1(System.Nullable{``0}[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structArray``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.leftArraySerialize``1(AutoCSer.LeftArray{``0})">
            <summary>
            数组序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.dictionarySerialize``3(``0)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableSerialize``1(AutoCSer.BinarySerialize.Serializer,System.Nullable{``0})">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.keyValuePairSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structDictionary``3(``0)">
            <summary>
            集合转换
            </summary>
            <param name="dictionary">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classDictionary``3(``0)">
            <summary>
            集合转换
            </summary>
            <param name="dictionary">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumSByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumSByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumUShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumUShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumUIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumUIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumLongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumLongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumULongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumULongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structCollection``2(``1)">
            <summary>
            集合转换
            </summary>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classCollection``2(``1)">
            <summary>
            集合转换
            </summary>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structSerialize``1(``0)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.MemberClassSerialize``1(``0)">
            <summary>
            引用类型成员序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumByteMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumSByteMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumShortMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUShortMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumIntMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUIntMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumLongMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumULongMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.dictionaryMember``3(``0)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableMemberSerialize``1(System.Nullable{``0})">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumByteArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumSByteArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumShortArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUShortArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumIntArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUIntArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumLongArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumULongArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableArrayMember``1(System.Nullable{``0}[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structArrayMember``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.arrayMember``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize``1(``0,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Boolean)">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Boolean[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Boolean}[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Byte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Byte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Byte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.SByte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.SByte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.SByte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Single)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Single[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Single})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Single}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Double)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Double[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Double})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Double}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Decimal)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Decimal[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Decimal})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Decimal}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Char)">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Char[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Char}[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.DateTime)">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.DateTime[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.DateTime})">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.DateTime}[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Guid[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Guid})">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Guid}[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.String[])">
            <summary>
            字符串序列化
            </summary>
            <param name="array">字符串数组</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Type)">
            <summary>
            类型信息序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.memberSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetMemberSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.memberMapSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetMemberMapSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMethod">
            <summary>
            基本转换类型
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeConfig">
            <summary>
            XML 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.DefaultCheckLoopDepth">
            <summary>
            循环引用检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.Header">
            <summary>
            XML头部
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.BootNodeName">
            <summary>
            根节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.CheckLoopDepth">
            <summary>
            循环引用检测深度，0 表示实时检测，默认为 64
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.IsOutputNull">
            <summary>
            是否输出空对象
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.IsOutputEmptyString">
            <summary>
            是否输出长度为 0 的字符串，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.IsMemberMapErrorToDefault">
            <summary>
            成员位图类型不匹配时是否使用默认输出，默认为 true
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeConfig.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.Xml.ParseState">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NullXml">
            <summary>
            XML字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.HeaderError">
            <summary>
            xml头部解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundBootNodeEnd">
            <summary>
            没有找到根节点结束标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundBootNodeStart">
            <summary>
            没有找到根节点开始标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundTagStart">
            <summary>
            没有找到名称标签开始符号
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundTagEnd">
            <summary>
            没有找到匹配的结束标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundAttributeName">
            <summary>
            属性名称解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundAttributeValue">
            <summary>
            属性值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundValue">
            <summary>
            没有找到预期数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundValueEnd">
            <summary>
            没有找到预期数据结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundCDATAStart">
            <summary>
            没有找到预期的CDATA开始
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NoteError">
            <summary>
            注释错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotSupport">
            <summary>
            不支持直接解析 基元类型/可空类型/数组/枚举/指针/字典
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NoConstructor">
            <summary>
            找不到构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.DecodeError">
            <summary>
            字符解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotHex">
            <summary>
            16进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotArrayItem">
            <summary>
            数组节点解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.UnknownNameError">
            <summary>
            未知名称节点自定义解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.Custom">
            <summary>
            自定义序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.EncodeString">
            <summary>
            未解码字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.TempString">
            <summary>
            未解码可修改字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.Node">
            <summary>
            子节点
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.ErrorString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="T:AutoCSer.UnmanagedPool">
            <summary>
            非托管内存池
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.TinySize">
            <summary>
            微型缓冲区池字节大小 256B
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.DefaultSize">
            <summary>
            默认缓冲区池字节大小 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.free">
            <summary>
            空闲内存地址
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.freeLock">
            <summary>
            空闲内存地址访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.Size">
            <summary>
            缓冲区尺寸
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.#ctor(System.Int32)">
            <summary>
            内存池
            </summary>
            <param name="size">缓冲区尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.TryGet">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.Get">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetSize64(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="minSize">数据字节长度</param>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.Push(System.Byte*)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.PushOnly(AutoCSer.Pointer.Size@)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.clear(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.clear(System.Byte*)">
            <summary>
            释放缓冲区
            </summary>
            <param name="head"></param>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.pools">
            <summary>
            内存池
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.poolLock">
            <summary>
            内存池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.Tiny">
            <summary>
            微型缓冲区池(256B)
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.Default">
            <summary>
            默认缓冲区池(4KB)
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetDefaultPool(System.Int32)">
            <summary>
            获取临时缓冲区
            </summary>
            <param name="length">缓冲区字节长度</param>
            <returns>临时缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.SubString">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.String">
            <summary>
            原字符串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Start">
            <summary>
            原字符串中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Length">
            <summary>
            字符子串长度
            </summary>
        </member>
        <member name="M:AutoCSer.SubString.SetNull">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.SubString.Set(System.String,System.Int32,System.Int32)">
            <summary>
            设置数据长度
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(System.String)~AutoCSer.SubString">
            <summary>
            字符串隐式转换为子串
            </summary>
            <param name="value">字符串</param>
            <returns>字符子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(AutoCSer.SubString)~System.String">
            <summary>
            字符子串隐式转换为字符串
            </summary>
            <param name="value">字符子串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.Object)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="obj">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString@)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.String)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="length">长度</param>
            <returns>子串</returns>
        </member>
        <member name="P:AutoCSer.SubString.Item(System.Int32)">
            <summary>
            获取字符
            </summary>
            <param name="index">字符位置</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiSearcher">
            <summary>
            ASCII 字节搜索器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            ASCII字节搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.UnsafeSearch(System.Char*@)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.Random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.seeds">
            <summary>
            公用种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.secureSeeds">
            <summary>
            安全种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current">
            <summary>
            32位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current64">
            <summary>
            64位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.currentLock">
            <summary>
            64位种子位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bits">
            <summary>
            随机位缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bitCount">
            <summary>
            随机位缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteLock">
            <summary>
            字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bytes">
            <summary>
            字节缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteCount">
            <summary>
            字节缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortLock">
            <summary>
            双字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushorts">
            <summary>
            双字节缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortCount">
            <summary>
            双字节缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Random.#ctor">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.nextIndex">
            <summary>
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.Next">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextFloat">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.Next(System.Int32)">
            <summary>
            获取下一个随机数
            </summary>
            <param name="mod">求余取模数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextBit">
            <summary>
            获取下一个随机位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextByte">
            <summary>
            获取下一个随机字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextUShort">
            <summary>
            获取下一个随机双字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.nextIndex64">
            <summary>
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextULong">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextDouble">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNext">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextUIntNotZero">
            <summary>
            获取下一个非0随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULong">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULongNotZero">
            <summary>
            获取下一个非0随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Default">
            <summary>
            默认随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Hash">
            <summary>
            随机Hash值(用于防构造)
            </summary>
        </member>
        <member name="T:AutoCSer.Pointer">
            <summary>
            指针(因为指针无法静态初始化)
            </summary>
        </member>
        <member name="F:AutoCSer.Pointer.Data">
            <summary>
            指针
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.Pointer.Equals(System.Object)">
            <summary>
            指针比较
            </summary>
            <param name="obj">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="M:AutoCSer.Pointer.Equals(AutoCSer.Pointer)">
            <summary>
            指针比较
            </summary>
            <param name="other">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="P:AutoCSer.Pointer.Byte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.SByte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Char">
            <summary>
            字符指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Short">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.UShort">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Int">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.UInt">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Long">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.ULong">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="T:AutoCSer.Pointer.Size">
            <summary>
            带长度的指针
            </summary>
        </member>
        <member name="F:AutoCSer.Pointer.Size.Data">
            <summary>
            指针
            </summary>
        </member>
        <member name="F:AutoCSer.Pointer.Size.ByteSize">
            <summary>
            字节长度
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.Size.SetNull">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.Size.Set(System.Void*,System.Int32)">
            <summary>
            设置指针数据
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Pointer">
            <summary>
            指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Byte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Char">
            <summary>
            字符指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Int">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.UInt">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.ULong">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup">
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.cache">
            <summary>
            成员索引分组集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.cacheLock">
            <summary>
            成员索引分组集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicFields">
            <summary>
            公有字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicFields">
            <summary>
            非公有字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicProperties">
            <summary>
            公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicProperties">
            <summary>
            非公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.AnonymousFields">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.MemberCount">
            <summary>
            所有成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.fieldCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.propertyCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.#ctor(System.Type,System.Boolean)">
            <summary>
            成员索引分组
            </summary>
            <param name="type">对象类型</param>
            <param name="isStatic">是否静态成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Get(System.Type)">
            <summary>
            根据类型获取成员索引分组
            </summary>
            <param name="type">对象类型</param>
            <returns>成员索引分组</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup.group">
            <summary>
            动态成员分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.PublicFields">
            <summary>
            公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.NonPublicFields">
            <summary>
            非公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.PublicProperties">
            <summary>
            公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.NonPublicProperties">
            <summary>
            非公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.AnonymousFields">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.group.#ctor(System.Type,System.Boolean)">
            <summary>
            动态成员分组
            </summary>
            <param name="type">目标类型</param>
            <param name="isStatic">是否静态成员</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup.typeDepth">
            <summary>
            类型深度
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.Depth">
            <summary>
            类型深度
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.isField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.isPublic">
            <summary>
            是否共有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.typeDepth.#ctor(System.Type,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            类型深度
            </summary>
            <param name="type">类型</param>
            <param name="field">成员字段</param>
            <param name="isPublic">是否共有成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.typeDepth.#ctor(System.Type,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            类型深度
            </summary>
            <param name="type">类型</param>
            <param name="property">成员属性</param>
            <param name="isPublic">是否共有成员</param>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.PublicField">
            <summary>
            共有字段成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.NonPublicField">
            <summary>
            非共有字段成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.PublicProperty">
            <summary>
            共有属性成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.NonPublicProperty">
            <summary>
            非共有属性成员
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup`1">
            <summary>
            成员索引分组
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.Group">
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.MemberCount">
            <summary>
            所有成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.FieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetAllMembers">
            <summary>
            成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetFields(AutoCSer.Metadata.MemberFilters)">
            <summary>
            获取字段集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetProperties(AutoCSer.Metadata.MemberFilters)">
            <summary>
            获取属性集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetAnonymousFields(AutoCSer.Metadata.MemberFilters)">
            <summary>
            获取字段集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.QuoteString">
            <summary>
            未解析字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.ErrorQuoteString">
            <summary>
            解析错误的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.NumberString">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.NaN">
            <summary>
            非数值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.DateTimeTick">
            <summary>
            时间周期值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.Enumerable">
            <summary>
            可枚举相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.getDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            转换成字典
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <typeparam name="keyType">哈希键值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">键值获取器</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.Emit.ConstructorAttribute">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.Constructor`1">
            <summary>
            默认构造函数
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.Constructor`1.uninitializedObject">
            <summary>
            未初始化对象，用于Clone
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.Constructor`1.New">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Constructor`1.Default">
            <summary>
            默认空值
            </summary>
            <returns>默认空值</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeResult">
            <summary>
            序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeResult.Data">
            <summary>
            序列化数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeResult.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeResult.op_Implicit(AutoCSer.BinarySerialize.SerializeResult)~System.Byte[]">
            <summary>
            序列化数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.UnknownNameAttribute">
            <summary>
            未知名称解析函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeResult">
            <summary>
            序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeResult.Xml">
            <summary>
            XML 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeResult.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeResult.op_Implicit(AutoCSer.Xml.SerializeResult)~System.String">
            <summary>
            Xml 字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Win32.Kernel32">
            <summary>
            kernel32.dll API
            </summary>
        </member>
        <member name="M:AutoCSer.Win32.Kernel32.RtlMoveMemory(System.Void*,System.Void*,System.Int32)">
            <summary>
            内存复制
            </summary>
            <param name="dest">目标位置</param>
            <param name="src">源位置</param>
            <param name="length">字节长度</param>
        </member>
        <member name="T:AutoCSer.Threading.ThreadYield">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.yieldCounts">
            <summary>
            冲突统计集合（非线程安全）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.Yield(AutoCSer.Threading.ThreadYield.Type)">
            <summary>
            
            </summary>
            <param name="type">冲突统计类型</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.YieldOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.ThreadYield.Type">
            <summary>
            冲突统计类型
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.Unknown">
            <summary>
            未知的用户调用
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SubBufferPoolSetBackFree">
            <summary>
            设置备用空闲缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNextBit">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNextByte">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNextUShort">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNext64">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.NamePoolGet">
            <summary>
            字符串名称申请
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MemberMapPoolFreePush">
            <summary>
            成员位图内存池空闲地址入池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.UnmanagedPoolFreePush">
            <summary>
            非托管内存池空闲地址入池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SubBufferPoolPush">
            <summary>
            添加缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SocketAsyncEventArgsPush">
            <summary>
            套接字异步事件对象池添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlConnectionPoolPush">
            <summary>
            Sql 连接池添加连接
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.FileLogPushDebug">
            <summary>
            添加日志信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlLinkQueueTaskPush">
            <summary>
            Sql 操作链表任务队列添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TimerLinkQueuePush">
            <summary>
            定时链表队列添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkPush">
            <summary>
            链表添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkDoublePush">
            <summary>
            双向链表添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldQueuePush">
            <summary>
            队列链表添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallbackSetCommandIndex">
            <summary>
            TCP 调用客户端回调保持设置命令会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MemberMapPoolMemory">
            <summary>
            成员位图内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MemberMapPoolFreePop">
            <summary>
            成员位图内存池获取空闲地址
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.UnmanagedPoolFreePop">
            <summary>
            非托管内存池获取空闲地址
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SubBufferPoolPop">
            <summary>
            获取缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SocketAsyncEventArgsPop">
            <summary>
            套接字异步事件对象池弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlConnectionPoolPop">
            <summary>
            Sql 连接池弹出连接
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.FileLogExchangeDebug">
            <summary>
            交换日志队列信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlLinkQueueTaskPop">
            <summary>
            Sql 操作链表任务队列弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TimerLinkQueuePop">
            <summary>
            定时链表队列弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkPop">
            <summary>
            链表弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkDoublePop">
            <summary>
            双向链表弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldQueuePop">
            <summary>
            队列链表弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallbackDispose">
            <summary>
            释放 TCP 调用客户端回调保持
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.LockLastDictionaryGet">
            <summary>
            最后关键字缓存字典获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.LockLastDictionarySet">
            <summary>
            最后关键字缓存字典设置数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlLogStreamLoadMember">
            <summary>
            Sql 日志流成员加载检测
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlNowTimeSet">
            <summary>
            Sql 时间设置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TimeVerifyServerSetTicks">
            <summary>
            时间验证服务设置验证时间
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SocketTimeoutLinkCancelTimeout">
            <summary>
            套接字超时取消等待
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpCommandClientSetSocket">
            <summary>
            设置 TCP 客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallback">
            <summary>
            TCP 服务端保持回调处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallbackCancel">
            <summary>
            客户端强制终止 TCP 服务端保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.HtmlTitleHttpClient">
            <summary>
            HTML 标题获取客户端操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.CacheServerGetBuffer">
            <summary>
            缓存服务获取数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MessageQueueGetBuffer">
            <summary>
            消息队列获取数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.Count">
            <summary>
            冲突统计类型数量
            </summary>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.values">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.charCount">
            <summary>
            状态字符数量
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="values">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建状态查找数据
            </summary>
            <param name="states">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>状态查找数据</returns>
        </member>
        <member name="T:AutoCSer.LeftArray`1">
            <summary>
            数组子串
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.LeftArray`1.defalutArraySize">
            <summary>
            默认数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Array">
            <summary>
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32)">
            <summary>
            数组子串
            </summary>
            <param name="size">容器大小</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(`0[])">
            <summary>
            数组子串
            </summary>
            <param name="value">数组</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#Generic#IEnumerable{valueType}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.SetNull">
            <summary>
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetNull">
            <summary>
            置空并释放数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetNull(`0[]@,System.Int32@)">
            <summary>
            置空并释放数组
            </summary>
            <param name="array"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Exchange(AutoCSer.LeftArray{`0}@)">
            <summary>
            数组互换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(`0[])">
            <summary>
            重置数据
            </summary>
            <param name="value">数组,不能为null</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(`0[],System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="value">数组,不能为null</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.setLength(System.Int32)">
            <summary>
            设置数据容器长度
            </summary>
            <param name="count">数据长度</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.addToLength(System.Int32)">
            <summary>
            增加数据长度
            </summary>
            <param name="length">数据长度</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PrepLength(System.Int32)">
            <summary>
            预增长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ClearOnlyLength">
            <summary>
            清除当前长度有效数据
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(System.Collections.Generic.ICollection{`0})">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Insert(System.Int32,`0)">
            <summary>
            插入数据
            </summary>
            <param name="index">插入位置</param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(`0)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.indexOf(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Remove(`0)">
            <summary>
            移除数据
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.removeAtToEnd(System.Int32)">
            <summary>
            最后一个数据移动到被删除数据位置
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEnd(System.Func{`0,System.Boolean})">
            <summary>
            移除数据，然后将最后一个数据移动到被删除数据位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="values">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ToArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.getArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Sort(System.Func{`0,`0,System.Int32})">
            <summary>
            排序
            </summary>
            <param name="comparer">比较器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>数据值</returns>
        </member>
        <member name="P:AutoCSer.LeftArray`1.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="T:AutoCSer.GuidCreator">
            <summary>
            Guid 联合体
            </summary>
        </member>
        <member name="F:AutoCSer.GuidCreator.Value">
            <summary>
            Guid
            </summary>
        </member>
        <member name="M:AutoCSer.GuidCreator.ToString(System.Char*)">
            <summary>
            转换成字符串
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Extension.Number">
            <summary>
            数值相关扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10_16Mul">
            <summary>
            16位除以10转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10_16Shift">
            <summary>
            16位除以10转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10000Mul">
            <summary>
            32位除以10000转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10000Shift">
            <summary>
            32位除以10000转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div100000000Mul">
            <summary>
            32位除以100000000转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div100000000Shift">
            <summary>
            32位除以100000000转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.DeBruijn32Number">
            <summary>
            2^n相关32位deBruijn序列
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Byte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Byte,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Byte,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.SByte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.SByte,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.SByte,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.UInt16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt16,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt16,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Int16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int16,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int16,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.UInt32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt32,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString99999999(System.UInt32,System.Char*)">
            <summary>
            小于100000000的正整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Int32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int32,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString_99999999(System.UInt32,System.Char*)">
            <summary>
            绝对值小于100000000的负整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.uIntToString(System.UInt32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.UnsafeToString(System.UInt64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt64,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.UnsafeToString(System.Int64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int64,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToHex16(System.UInt32,System.Char*)">
            <summary>
            数字转换成16进制字符串
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
        </member>
        <member name="M:AutoCSer.Extension.Number.GetToHex(System.UInt32,System.Char*)">
            <summary>
            数字转换成16进制字符串
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToHex(System.UInt32)">
            <summary>
            半字节转十六进制字符
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.bitCount(System.UInt64)">
            <summary>
            获取二进制1位的个数
            </summary>
            <param name="value">数据</param>
            <returns>二进制1位的个数</returns>
        </member>
        <member name="F:AutoCSer.Extension.Number.deBruijn32">
            <summary>
            2^n相关32位deBruijn序列集合
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Number.bits(System.UInt32)">
            <summary>
            获取有效位长度
            </summary>
            <param name="value">数据</param>
            <returns>有效位长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.FullBit(System.UInt32)">
            <summary>
            填充第一个有效二进制位后面的空位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.UpToPower2(System.UInt32)">
            <summary>
            向上去 2 的幂次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.DeBruijnLog2(System.UInt32)">
            <summary>
            求 2 的 x 次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Date">
            <summary>
            日期相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Date.SqlMillisecondSize">
            <summary>
            时间转换字符串字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Mul">
            <summary>
            32位除以60转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Shift">
            <summary>
            32位除以60转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Mul">
            <summary>
            16位除以60转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Shift">
            <summary>
            16位除以60转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Date.MillisecondTicks">
            <summary>
            每毫秒计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.SecondTicks">
            <summary>
            每秒计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.MinutesTicks">
            <summary>
            每分钟计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.DayTiks">
            <summary>
            一天的计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.LocalTimeTicks">
            <summary>
            本地时钟周期
            </summary>
        </member>
        <member name="M:AutoCSer.Date.ToSqlMillisecond(System.DateTime,AutoCSer.CharStream)">
            <summary>
            时间转换成字符串(精确到毫秒)
            </summary>
            <param name="time">时间</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Date.toSqlMillisecond(System.DateTime,System.Char*)">
            <summary>
            时间转换成字符串(精确到毫秒)
            </summary>
            <param name="time">时间</param>
            <param name="chars">时间字符串</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,System.Char*,System.Char)">
            <summary>
            时间转换成日期字符串(yyyy/MM/dd)
            </summary>
            <param name="time">时间</param>
            <param name="chars">时间字符串</param>
            <param name="split">分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.Int32,System.Char*)">
            <summary>
            时间转换成字符串(HH:mm:ss)
            </summary>
            <param name="second">当天的计时秒数</param>
            <param name="chars">时间字符串</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,System.Char)">
            <summary>
            时间转换成字符串(yyyy/MM/dd HH:mm:ss)
            </summary>
            <param name="time">时间</param>
            <param name="dateSplit">日期分隔符</param>
            <returns>时间字符串</returns>
        </member>
        <member name="M:AutoCSer.Date.ToString(System.DateTime,AutoCSer.CharStream,System.Char)">
            <summary>
            时间转换成字符串
            </summary>
            <param name="time">时间</param>
            <param name="charStream">字符流</param>
            <param name="dateSplit">日期分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.localToUniversalTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Date.NowTimerInterval">
            <summary>
            时间更新间隔
            </summary>
        </member>
        <member name="P:AutoCSer.Date.Now">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="P:AutoCSer.Date.UtcNow">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="T:AutoCSer.Date.NowTime">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.Now">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.UtcNow">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="M:AutoCSer.Date.NowTime.Set">
            <summary>
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.NowTime.SetUtc">
            <summary>
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Date.NowTime.timer">
            <summary>
            刷新时间的定时器
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.TimerInterval">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Date.NowTime.refreshTime(System.Object)">
            <summary>
            刷新时间
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Config.Loader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.configNamespace">
            <summary>
            配置加载程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.configs">
            <summary>
            配置集合
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.configLock">
            <summary>
            配置访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Config.Loader.GetObject(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.Get``1(System.String)">
            <summary>
            获取配置项数据
            </summary>
            <typeparam name="valueType">配置数据类型</typeparam>
            <param name="name">配置名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.check(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            检测程序集名称
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutoCSer.Config.Loader.checkName(System.Reflection.Assembly)">
            <summary>
            检测程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.getConfigs(System.Reflection.Assembly)">
            <summary>
            获取配置数据
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.load(System.Reflection.Assembly)">
            <summary>
            配置加载检测
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:AutoCSer.Config.Loader.set(AutoCSer.KeyValue{AutoCSer.Config.Loader.key,System.Object})">
            <summary>
            设置配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:AutoCSer.Config.Loader.key">
            <summary>
            配置关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.key.type">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.key.name">
            <summary>
            配置名称
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.key.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.#ctor(System.Type,System.String)">
            <summary>
            配置关键字
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.Equals(AutoCSer.Config.Loader.key)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.DeSerializeConfig">
            <summary>
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.SerializeConfig">
            <summary>
            二进制序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.SerializeAttribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeSerializer`1">
            <summary>
            二进制数据反序列化
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.attribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.DefaultDeSerializer">
            <summary>
            反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.IsReferenceMember">
            <summary>
            是否支持循环引用处理
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.DeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.StructDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.ClassDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.classDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.BaseDeSerialize``1(AutoCSer.BinarySerialize.DeSerializer,``0@)">
            <summary>
            对象反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.RealType(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            真实类型反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.realType(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            真实类型
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.fromNull(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            不支持对象转换null
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.noConstructor(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            找不到构造函数
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumByte(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumSByte(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumShort(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumUShort(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumInt(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumUInt(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumLong(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumULong(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fieldDeSerializer">
            <summary>
            默认二进制数据反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fieldDeSerializers">
            <summary>
            默认二进制数据反序列化集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.GetDeSerializer(System.UInt32)">
            <summary>
            获取二进制数据反序列化
            </summary>
            <param name="globalVersion"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.getDeSerializer(System.UInt32)">
            <summary>
            获取二进制数据反序列化
            </summary>
            <param name="globalVersion"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fixedMemberDeSerializer">
            <summary>
            固定分组成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fixedMemberMapDeSerializer">
            <summary>
            固定分组成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberDeSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberMapDeSerializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.globalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fixedFillSize">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.isMemberMap">
            <summary>
            是否处理成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.#ctor(System.UInt32,AutoCSer.BinarySerialize.Fields{AutoCSer.BinarySerialize.FieldSize}@,System.Int32,System.Boolean)">
            <summary>
            二进制数据反序列化
            </summary>
            <param name="globalVersion"></param>
            <param name="fields"></param>
            <param name="memberCountVerify"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.MemberDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeSerializer`1.deSerialize">
            <summary>
            二进制数据反序列化委托
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberMapDeSerialize">
            <summary>
            二进制数据反序列化委托
            </summary>
            <param name="memberMap">成员位图</param>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeWarning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarning.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarning.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LockDictionary`2">
            <summary>
            字典
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LockDictionary`2.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockDictionary`2.dictionaryLock">
            <summary>
            访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.Set(`0,`1,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="oldValue">被替换的数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Pub">
            <summary>
            常用公共定义
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.PuzzleValue">
            <summary>
            LGD
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.StartTime">
            <summary>
            程序启用时间
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.identity32">
            <summary>
            默认自增标识
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.ClearCaches">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Pub.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.clearUnmanagedCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.ClearCacheNoGC(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.emptyAction">
            <summary>
            空委托
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.EmptyAction">
            <summary>
            空委托
            </summary>
        </member>
        <member name="P:AutoCSer.Pub.Identity32">
            <summary>
            默认自增标识
            </summary>
        </member>
        <member name="T:AutoCSer.NullableBool">
            <summary>
            可控逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBool.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBool.False">
            <summary>
            逻辑假值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBool.True">
            <summary>
            逻辑真值
            </summary>
        </member>
        <member name="T:AutoCSer.MemberCopy.CustomAttribute">
            <summary>
            自定义类型成员复制函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.NumberType">
            <summary>
            数字类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.NaN">
            <summary>
            NaN
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.Null">
            <summary>
            null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.BinarySerialize">
            <summary>
            二进制序列化扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.serialize``1(``0,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            二进制序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,System.Byte[],AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,AutoCSer.LeftArray{System.Byte},AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,AutoCSer.LeftArray{System.Byte}@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,AutoCSer.UnmanagedStream,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="startIndex">数据起始位置</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,System.Byte*,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="size">数据字节长度</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Config.UnionLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Config.UnionLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.CharStream">
            <summary>
            内存字符流
            </summary>
            <summary>
            内存字符流
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonNull">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonObject">
            <summary>
            输出空对象
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonObjectString">
            <summary>
            输出对象字符串 [object Object]
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonArray">
            <summary>
            输出空数组
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonBool(System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Byte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.SByte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Int16)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.UInt16)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Int32)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.UInt32)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Int64,System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
            <param name="isMaxToString">超出最大有效精度是否转换成字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.writeJson(System.Int64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.UInt64,System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
            <param name="isMaxToString">超出最大有效精度是否转换成字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.writeJson(System.UInt64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Single)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Char,System.Char)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
            <param name="nullChar">空字符替换</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Char*,System.Int32,System.Char)">
            <summary>
            写入 JSON 字符串
            </summary>
            <param name="stringStart">起始位置</param>
            <param name="stringLength">字符串长度</param>
            <param name="nullChar">空字符替换</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonDictionaryKey(System.String)">
            <summary>
            字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonOther(System.DateTime)">
            <summary>
            时间转字符串 第三方格式 /Date(xxx)/
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonString(System.DateTime)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.DateTime)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Guid@)">
            <summary>
            Guid转换成字符串
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.CharStream.#ctor(System.Int32)">
            <summary>
            内存数据流
            </summary>
            <param name="length">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.CharStream.#ctor(System.Char*,System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data">无需释放的数据</param>
            <param name="length">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.CharStream.GetPrepSizeCurrent(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="size">增加长度</param>
        </member>
        <member name="M:AutoCSer.CharStream.PrepLength(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="length">增加长度</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeWrite(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteNotNull(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeWrite(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.SimpleWriteNotNull(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeSimpleWrite(System.String)">
            <summary>
            写字符串(无需预增数据流)
            </summary>
            <param name="value">字符串,长度必须>0</param>
        </member>
        <member name="M:AutoCSer.CharStream.SimpleWriteNotNull(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeSimpleWriteNotNull(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置,不能为null</param>
            <param name="count">写入字符数，必须>0</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonInfinity(System.Single)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonInfinity(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonNaN">
            <summary>
            输出非数字值
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WritePositiveInfinity">
            <summary>
            输出正无穷
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteNegativeInfinity">
            <summary>
            输出负无穷
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.writeDoubleMaxValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.writeDoubleMinValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.CharStream.Char">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.CharStream.CurrentChar">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.CharStream.Length">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializer">
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.Config">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.Buffer">
            <summary>
            数据字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.DataLength">
            <summary>
            数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.GlobalVersion">
            <summary>
            全局版本编号
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.start">
            <summary>
            序列化数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.end">
            <summary>
            序列化数据结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.Read">
            <summary>
            当前读取数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.State">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.points">
            <summary>
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.isReferenceMember">
            <summary>
            是否检测相同的引用成员
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.IsObjectRealType">
            <summary>
            是否检测引用类型对象的真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.isReferenceArray">
            <summary>
            是否检测数组引用
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize``1(System.Byte[],System.Byte*,System.Byte*,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="data"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.getGlobalVersion">
            <summary>
            获取全局版本编号
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.TypeDeSerialize``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.TypeDeSerialize``1">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">设置的自定义序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckPoint``1(``0@)">
            <summary>
            获取历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.IsRealType">
            <summary>
            是否真实类型处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.AddPoint``1(``0@)">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckMemberCount(System.Int32)">
            <summary>
            检测成员数量
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetMemberMap``1">
            <summary>
            检测成员位图
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.ParseJson``1(``0@)">
            <summary>
            JSON反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckNull">
            <summary>
            不支持对象null解析检测
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckNullValue">
            <summary>
            对象null值检测
            </summary>
            <returns>返回 0 表示 null</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.VerifyRead(System.Int32)">
            <summary>
            自定义序列化重置当前读取数据位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.MoveRead(System.Int32)">
            <summary>
            移动当前读取数据位置，负数表示自定义序列化失败
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.ReadInt">
            <summary>
            读取一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.ReadULong">
            <summary>
            读取一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.createArray``1(``0[]@,System.Int32)">
            <summary>
            创建数组
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerializeArray``1(``0[]@)">
            <summary>
            数组反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns>数组长度</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Boolean[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Boolean}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Byte[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Byte}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.SByte[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.SByte*,System.Nullable{System.SByte}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Int16[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Int16}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.UInt16[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.UInt16}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Int32[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Int32}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.UInt32[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.UInt32}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Int64[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Int64}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.UInt64[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.UInt64}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Single[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Single}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Double[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Double}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Decimal[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Decimal}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Char}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.DateTime[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.DateTime}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Guid[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Guid}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Byte*,System.Char*,System.Int32,System.Int32)">
            <summary>
            字符串反序列化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="write">写入位置</param>
            <param name="length">写入长度</param>
            <param name="lengthSize">写入长度字节大小</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.baseSerialize``2(AutoCSer.BinarySerialize.DeSerializer,``1@)">
            <summary>
            基类反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.realTypeObject``1(AutoCSer.BinarySerialize.DeSerializer,System.Object)">
            <summary>
            真实类型反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="objectValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumByte``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumSByte``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumShort``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumUShort``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumInt``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumUInt``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumLong``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumULong``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.leftArrayDeSerialize``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            数组对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryDeSerialize``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryArrayDeSerialize``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableDeSerialize``1(System.Nullable{``0}@)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.keyValuePairDeSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedDictionaryDeSerialize``2(System.Collections.Generic.SortedDictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedListDeSerialize``2(System.Collections.Generic.SortedList{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.collection``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structCollection``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.classCollection``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryConstructorDeSerialize``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structDictionaryDeSerialize``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.classDictionaryDeSerialize``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structDeSerialize``1(``0@)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberClassDeSerialize``1(``0@)">
            <summary>
            引用类型成员反序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumByteMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumSByteMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumShortMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUShortMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryMember``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableMemberDeSerialize``1(System.Nullable{``0}@)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedDictionaryMember``2(System.Collections.Generic.SortedDictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedListMember``2(System.Collections.Generic.SortedList{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumByteArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumSByteArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumShortArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUShortArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumIntArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUIntArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumLongArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumULongArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableArray``1(System.Nullable{``0}[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structArray``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.array``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableArrayMember``1(System.Nullable{``0}[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structArrayMember``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.arrayMember``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumByteArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumSByteArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumShortArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUShortArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumIntArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUIntArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumLongArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumULongArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte[],``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte[],AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte},``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte}@,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte},AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte}@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.UnmanagedStream,``0@,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="startIndex">数据起始位置</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.UnmanagedStream,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="startIndex">数据起始位置</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="size">数据字节长度</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte*,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="size">数据字节长度</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte[],System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="buffer"></param>
            <param name="data"></param>
            <param name="size"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Boolean[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Boolean}[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Byte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Byte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Byte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.SByte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.SByte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.SByte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Single}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Single[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Single}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Double}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Double[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Double}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Decimal}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Decimal[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Decimal}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Char@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Char[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Char}@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Char}[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.DateTime}@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.DateTime[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.DateTime}[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Guid}@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Guid[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Guid}[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.String[]@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Type@)">
            <summary>
            类型信息反序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.memberDeSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetMemberDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.memberMapDeSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetMemberMapDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Boolean[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Boolean}[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Byte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Byte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Byte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.SByte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.SByte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.SByte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int32@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt32@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int64@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt64@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Single@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Single[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Single}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Single}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Double@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Double[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Double}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Double}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Decimal@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Decimal[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Decimal}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Decimal}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Char@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Char[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Char}@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Char}[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.DateTime@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.DateTime[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.DateTime}@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.DateTime}[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Guid@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Guid[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Guid}@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Guid}[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.String[]@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(AutoCSer.SubString@)">
            <summary>
            反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Type@)">
            <summary>
            类型信息反序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.deSerializeMethods">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型反序列化函数
            </summary>
            <param name="type">基本类型</param>
            <returns>反序列化函数</returns>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeSerializer.CustomRead">
            <summary>
            自定义序列化获取当前读取数据位置
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.StateSearcher">
            <summary>
            枚举状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.SearchEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchEnumOnly(AutoCSer.Xml.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchCDataEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.SearchFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchCDataFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.NextFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="T:AutoCSer.Xml.Node">
            <summary>
            XML节点
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Node.attributes">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Node.nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Node.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetString(System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetString(System.String,System.Int32,System.Int32)">
            <summary>
            设置字符串
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetNode(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.SubString,AutoCSer.Xml.Node}}@)">
            <summary>
            设置子节点集合
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetAttribute(System.String,AutoCSer.KeyValue{AutoCSer.Range,AutoCSer.Range}[])">
            <summary>
            属性集合
            </summary>
            <param name="xml"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.GetAttribute(System.Char*,System.Int32,AutoCSer.Range@)">
            <summary>
            获取属性索引位置
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Xml.Node.Nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Node.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Node.Item(System.String)">
            <summary>
            根据名称获取 XML 节点
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.UnmanagedStream">
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.#ctor(System.Byte*,System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data">无需释放的数据</param>
            <param name="dataSize">容器初始字节数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.PrepLength(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="length">增加长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.GetPrepSizeCurrent(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="size">增加长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.AddSize(System.Int32)">
            <summary>
            增加流长度并返回增加后的流长度
            </summary>
            <param name="length">增加长度</param>
            <returns>增加后的流长度</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.SerializeFill(System.Int32)">
            <summary>
            二进制序列化填充空白字符
            </summary>
            <param name="fillSize">字节数量</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.SerializeFillWithStartIndex(System.Int32)">
            <summary>
            补白对齐 4 字节
            </summary>
            <param name="startIndex">起始位置</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.SerializeFillByteSize(System.Int32)">
            <summary>
            增加当前数据长度并且补白对齐 4 字节
            </summary>
            <param name="size">增加数据长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.GetArray">
            <summary>
            转换成字节数组
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="T:AutoCSer.Range">
            <summary>
            索引范围
            </summary>
        </member>
        <member name="F:AutoCSer.Range.StartIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Range.EndIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Range.Set(System.Int32,System.Int32)">
            <summary>
            重置索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="P:AutoCSer.Range.Length">
            <summary>
            范围长度
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.BoxSerializeAttribute">
            <summary>
            值类型序列化包装处理
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.BoxSerializeAttribute.IsJson">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.BoxSerializeAttribute.IsXml">
            <summary>
            XML序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BoxSerializeAttribute.#ctor">
            <summary>
            值类型序列化包装处理
            </summary>
        </member>
        <member name="T:AutoCSer.Json.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.ParseConfig">
            <summary>
            JSON 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.ParseAttribute">
            <summary>
            JSON 解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.SerializeConfig">
            <summary>
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.SerializeAttribute">
            <summary>
            JSON 序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.XmlSerialize">
            <summary>
            XML 序列化扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.toXml``1(``0,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.toXml``1(``0,AutoCSer.CharStream,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="xmlStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
            <returns>警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.fromXml``1(``0,AutoCSer.SubString,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.fromXml``1(``0,AutoCSer.SubString@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.fromXml``1(``0,System.String,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="T:AutoCSer.Emit.ArrayConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.ArrayConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeSerializer`1">
            <summary>
            二进制数据序列化
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.attribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.DefaultSerializer">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedMemberSerializer">
            <summary>
            固定分组成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedMemberMapSerializer">
            <summary>
            固定分组成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedSize">
            <summary>
            固定分组字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedFillSize">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.IsReferenceMember">
            <summary>
            是否支持循环引用处理
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.Serialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.StructSerialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.ClassSerialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.MemberSerialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.RealTypeObject(AutoCSer.BinarySerialize.Serializer,System.Object)">
            <summary>
            真实类型序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.BaseSerialize``1(AutoCSer.BinarySerialize.Serializer,``0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumByte(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumSByte(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumShort(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumUShort(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumInt(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumUInt(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumLong(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumULong(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.toNull(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            不支持对象转换null
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.noConstructor(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            找不到构造函数
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMapMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Write">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.UnmanagedStream,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.UnmanagedStream,System.Int32,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
            <param name="prepLength">附加长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Boolean)">
            <summary>
            添加数据
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Nullable{System.Boolean})">
            <summary>
            添加数据
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.End(AutoCSer.UnmanagedStream)">
            <summary>
            位图写入结束
            </summary>
            <param name="stream">序列化数据流</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1">
            <summary>
            类型解析器
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.DefaultParser">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.memberParsers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.onUnknownName">
            <summary>
            未知名称节点处理
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.attribute">
            <summary>
            XML解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.isAnonymousType">
            <summary>
            是否匿名类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.parseClass(AutoCSer.Xml.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ParseClass(AutoCSer.Xml.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ParseStruct(AutoCSer.Xml.Parser,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ParseMembers(AutoCSer.Xml.Parser,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.Array(AutoCSer.Xml.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ArrayIndex(AutoCSer.Xml.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="values">目标数据</param>
            <returns>数据数量,-1表示失败</returns>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.notSupport(AutoCSer.Xml.Parser,`0@)">
            <summary>
            不支持基元类型解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.unbox(AutoCSer.Xml.Parser,`0@)">
            <summary>
            包装处理
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumParser">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumParser.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumParser.parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumParser.getIndex(AutoCSer.Xml.Parser,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value"></param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumByte.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumByte.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumSByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumSByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumSByte.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumSByte.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumShort.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumShort.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumUShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumUShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUShort.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUShort.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumInt.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumInt.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumUInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumUInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUInt.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUInt.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumLong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumLong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumLong.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumLong.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumULong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumULong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumULong.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumULong.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.TryParseFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.TryParseFilter.TryParse">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.TryParseFilter.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.TryParseFilter.MemberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.TryParseFilter.Call(AutoCSer.Xml.Parser,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
            <returns>是否存在下一个数据</returns>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.TryParseFilter.Call(AutoCSer.Xml.Parser,AutoCSer.Metadata.MemberMap,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="parser">XML解析器</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
            <returns>是否存在下一个数据</returns>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.TryParse">
            <summary>
            解析委托
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.UnknownParse">
            <summary>
            未知名称解析委托
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
            <param name="name">节点名称</param>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMethodCache">
            <summary>
            XML 序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],AutoCSer.Xml.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Xml.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.typeMethods">
            <summary>
            未知类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.classSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetType(System.Type)">
            <summary>
            未知类型枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.enumMethods">
            <summary>
            枚举转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.enumToStringMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>枚举转换委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom">成员类型</param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputSubStringMethod">
            <summary>
            是否输出字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputStringMethod">
            <summary>
            是否输出字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputMethod">
            <summary>
            是否输出对象函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetIsOutputMethod(System.Type)">
            <summary>
            获取是否输出对象函数信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputNullableMethods">
            <summary>
            是否输出可空对象函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputNullableMethod">
            <summary>
            是否输出可空对象函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetIsOutputNullable(System.Type)">
            <summary>
            获取是否输出可空对象函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.BaseSerializeMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.arrayMethods">
            <summary>
            数组转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structArrayMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.arrayMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetArray(System.Type)">
            <summary>
            获取数组转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nullableMethods">
            <summary>
            可空类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nullableSerializeMethod">
            <summary>
            可空类型转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetNullable(System.Type)">
            <summary>
            获取可空类型转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>可空类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.enumerableMethods">
            <summary>
            枚举集合转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structStructEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structClassEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.classStructEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.classClassEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetIEnumerable(System.Type)">
            <summary>
            获取枚举集合转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举集合转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.customMethods">
            <summary>
            自定义转换调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetCustom(System.Type)">
            <summary>
            自定义枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>自定义转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nameStartPools">
            <summary>
            名称数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetNameStartPool(System.String)">
            <summary>
            获取名称数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nameEndPools">
            <summary>
            名称数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetNameEndPool(System.String)">
            <summary>
            获取名称数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Memory">
            <summary>
            内存或字节数组处理
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.ClearUnsafe(System.UInt64*,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Clear(System.Byte*,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">字节数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Fill(System.UInt64*,System.UInt64,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="value">填充整数</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.GetHashCode(System.Void*,System.Int32)">
            <summary>
            计算 32 位 HASH 值
            </summary>
            <param name="data">数据起始位置</param>
            <param name="length">数据长度</param>
            <returns>32 位 HASH 值</returns>
        </member>
        <member name="M:AutoCSer.Memory.GetHashCode64(System.Byte*,System.Int32)">
            <summary>
            计算 64 位 HASH 值
            </summary>
            <param name="start">数据起始位置</param>
            <param name="length">数据长度</param>
            <returns>64 位 HASH 值</returns>
        </member>
        <member name="M:AutoCSer.Memory.EqualNotNull(System.Void*,System.Void*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.equal(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.CopyNotNull(System.Void*,System.Byte[],System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原字节起始地址,不能为null</param>
            <param name="destination">目标串数组,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.CopyNotNull(System.Void*,System.Void*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.SimpleEqualNotNull(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.SimpleEqualNotNull(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.SimpleCopyNotNull(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.SimpleCopyNotNull64(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组(不足8字节按8字节算)
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于0</param>
        </member>
        <member name="T:AutoCSer.MemberCopy.Copyer`1">
            <summary>
            成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.Copy(`0@,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            对象成员复制
            </summary>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.Copy(`0,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            对象成员复制
            </summary>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.isValueCopy">
            <summary>
            是否采用值类型复制模式
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.defaultCopyer">
            <summary>
            默认成员复制委托
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.defaultMemberCopyer">
            <summary>
            默认成员复制委托
            </summary>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.copyArray(`0[]@,`0[])">
            <summary>
            数组复制
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.copyArray(`0[]@,`0[],AutoCSer.Metadata.MemberMap)">
            <summary>
            数组复制
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.customCopy(`0@,`0)">
            <summary>
            自定义复制函数
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.noCopy(`0@,`0)">
            <summary>
            没有复制字段
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.noCopy(`0@,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            没有复制字段
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
            <param name="memberMap"></param>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.memberwiseClone">
            <summary>
            对象浅复制
            </summary>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.MemberwiseClone(`0)">
            <summary>
            对象浅复制
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.MemberCopy.Copyer`1.copyer">
            <summary>
            成员复制委托
            </summary>
            <param name="value"></param>
            <param name="copyValue"></param>
        </member>
        <member name="T:AutoCSer.MemberCopy.Copyer`1.memberMapCopyer">
            <summary>
            成员复制委托
            </summary>
            <param name="value"></param>
            <param name="copyValue"></param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="T:AutoCSer.Json.TypeSerializer`1">
            <summary>
            类型序列化
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.defaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.attribute">
            <summary>
            JSON序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.Json.Serializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StructSerialize(AutoCSer.Json.Serializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StructSerialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.serialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            引用类型对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.ClassSerialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            引用类型对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.MemberSerialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            值类型对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Array(AutoCSer.Json.Serializer,`0[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Enumerable(AutoCSer.Json.Serializer,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            枚举集合转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="values">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.KeyValuePair``1(AutoCSer.Json.Serializer,System.Collections.Generic.KeyValuePair{`0,``0})">
            <summary>
            字典转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Dictionary``1(AutoCSer.Json.Serializer,System.Collections.Generic.Dictionary{`0,``0})">
            <summary>
            字典转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="dictionary">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StringDictionary(AutoCSer.Json.Serializer,System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            字典转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.arrayManyRank(AutoCSer.Json.Serializer,`0)">
            <summary>
            不支持多维数组
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.enumToString(AutoCSer.Json.Serializer,`0)">
            <summary>
            枚举转换字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.toNull(AutoCSer.Json.Serializer,`0)">
            <summary>
            不支持对象转换null
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberDynamicMethod">
            <summary>
            序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.charStreamField">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isFirstMember">
            <summary>
            是否第一个字段
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.push(System.String)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberAttribute">
            <summary>
            JSON 序列化成员配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeCustomAttribute">
            <summary>
            自定义类型函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseDynamicMethod">
            <summary>
            反序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.indexLocalBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.returnIndexLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.returnErrorLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.index">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.isMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.#ctor(System.Type,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.isName">
            <summary>
            是否匹配默认顺序名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.nextIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.IOS.Preserve">
            <summary>
            编译连接
            </summary>
        </member>
        <member name="F:AutoCSer.IOS.Preserve.AllMembers">
            <summary>
            是否编译连接所有成员，作用于类型
            </summary>
        </member>
        <member name="F:AutoCSer.IOS.Preserve.Conditional">
            <summary>
            当类型被引用时才编译连接，作用于成员
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberMapMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.RangeLength">
            <summary>
            范围
            </summary>
        </member>
        <member name="F:AutoCSer.RangeLength.Length">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.RangeLength.Start">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:AutoCSer.RangeLength.#ctor(System.Int32,System.Int32)">
            <summary>
            范围
            </summary>
            <param name="start">起始位置</param>
            <param name="length">数量</param>
        </member>
        <member name="T:AutoCSer.NullValue`1">
            <summary>
            空值相关参数
            </summary>
            <typeparam name="valueType">值类型</typeparam>
        </member>
        <member name="F:AutoCSer.NullValue`1.Array">
            <summary>
            0元素数组
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.push(System.String,System.Int32,System.Reflection.Emit.Label)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
            <param name="memberIndex"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeConfig">
            <summary>
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.DefaultCheckLoopDepth">
            <summary>
            循环引用检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.SetLoopObject">
            <summary>
            循环引用设置函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.GetLoopObject">
            <summary>
            循环引用获取函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.CheckLoopDepth">
            <summary>
            循环引用检测深度，0 表示实时检测，默认为 20
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.NullChar">
            <summary>
            字符 0
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDateTimeMinNull">
            <summary>
            最小时间是否输出为 null，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDateTimeToString">
            <summary>
            时间是否转换成字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDateTimeOther">
            <summary>
            第三方格式 /Date(xxx)/
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsObject">
            <summary>
            是否将 object 转换成真实类型输出
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsStringDictionaryToObject">
            <summary>
            Dictionary[string,] 是否转换成对象输出，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDictionaryToObject">
            <summary>
            Dictionary 是否转换成对象模式输出
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsMaxNumberToString">
            <summary>
            超出最大有效精度的 long / ulong 是否转换成字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsMemberMapErrorToDefault">
            <summary>
            成员位图类型不匹配时是否使用默认输出，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsInfinityToNaN">
            <summary>
            默认为 true 表示将 Infinity / -Infinity 转换为 NaN 输出
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeConfig.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.HashString">
            <summary>
            字符串 HASH
            </summary>
        </member>
        <member name="F:AutoCSer.HashString.String">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.HashString.hashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.#ctor(AutoCSer.SubString)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashString.#ctor(AutoCSer.SubString@)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(System.String)~AutoCSer.HashString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(AutoCSer.SubString)~AutoCSer.HashString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashString.Null">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.HashString)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.HashString@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.SubString)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.SubString@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(System.String)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.ArrayExtension">
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.isEmpty``1(``0[])">
            <summary>
            数组是否为空或者长度为0
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>数组是否为空或者长度为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.length``1(``0[])">
            <summary>
            获取数组长度
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.notNull``1(``0[])">
            <summary>
            空值转0长度数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>非空数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.MoveNotNull``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.copy``1(``0[])">
            <summary>
            复制数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待复制数组</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.copyNew``1(``0[],System.Int32)">
            <summary>
            复制数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待复制数组</param>
            <param name="newLength">新数组长度</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getArray``2(``0[],System.Func{``0,``1})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="arrayType">目标数组类型</typeparam>
            <param name="array">数组数据</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.concat``1(``0[],``0[])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <param name="addValues">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getConcatArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.concat``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">比较器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.joinString``1(``0[],System.Char,System.Func{``0,System.String})">
            <summary>
            连接字符串
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据集合</param>
            <param name="toString">字符串转换器</param>
            <param name="join">连接字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.JoinString(System.String[],System.Char)">
            <summary>
            连接字符串集合
            </summary>
            <param name="array">字符串集合</param>
            <param name="join">字符连接</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeState">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.UnknownData">
            <summary>
            数据不可识别
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberMap">
            <summary>
            成员位图检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberMapType">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberMapVerify">
            <summary>
            成员位图数量验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.HeaderError">
            <summary>
            头部数据不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.EndVerify">
            <summary>
            结束验证错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.FullDataError">
            <summary>
            数据完整检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.NoPoint">
            <summary>
            没有命中历史对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.IndexOutOfRange">
            <summary>
            数据长度不足
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.NotNull">
            <summary>
            不支持对象 null 解析检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberIndex">
            <summary>
            成员索引检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.JsonError">
            <summary>
            JSON反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.RemoteTypeError">
            <summary>
            远程类型加载失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.Custom">
            <summary>
            自定义序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.KeyValue`2">
            <summary>
            键值对
            </summary>
            <typeparam name="keyType">键类型</typeparam>
            <typeparam name="valueType">值类型</typeparam>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0,`1)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0@,`1@)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.Set(`0,`1)">
            <summary>
            重置键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:AutoCSer.Json.SerializeWarning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.LessSetLoop">
            <summary>
            缺少循环引用设置函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.LessGetLoop">
            <summary>
            缺少循环引用获取函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeMethod">
            <summary>
            基本类型序列化函数配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.Serializer">
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.MaxInt">
            <summary>
            最大整数值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.OtherDateStart">
            <summary>
            第三方ajax时间前缀
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.DateEnd">
            <summary>
            ajax时间后缀
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.DateStart">
            <summary>
            ajax时间前缀
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Byte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.SByte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Int16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.UInt16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.UInt32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.UInt64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Single})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Double})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Char})">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.DateTime})">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Guid)">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Guid})">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Object)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Type)">
            <summary>
            类型转换
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(AutoCSer.Json.Node)">
            <summary>
            字符串转换
            </summary>
            <param name="value">JSON节点</param>
        </member>
        <member name="F:AutoCSer.Json.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.Json.Serializer.AllMemberAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.CharStream">
            <summary>
            字符串输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.objectIndexs">
            <summary>
            对象编号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.forefather">
            <summary>
            祖先节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.forefatherCount">
            <summary>
            祖先节点数量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.checkLoopDepth">
            <summary>
            循环检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.isLoopObject">
            <summary>
            是否调用循环引用处理函数
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">Json输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@,AutoCSer.UnmanagedStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="stream">二进制缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.TypeSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.TypeSerialize``1(``0@)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.pushArray``1(``0)">
            <summary>
            进入对象节点
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">数据对象</param>
            <returns>是否继续处理对象</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Push``1(``0)">
            <summary>
            进入对象节点
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">数据对象</param>
            <returns>是否继续处理对象</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Pop">
            <summary>
            退出对象节点
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomSerialize``1(``0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomWriteFirstName(System.String)">
            <summary>
            写入对象名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomWriteNextName(System.String)">
            <summary>
            写入对象名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomObjectEnd">
            <summary>
            写入对象结束括号
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomArrayStart">
            <summary>
            写入数组开始括号
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomArrayEnd">
            <summary>
            写入数组结束括号
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.classSerialize``1(``0)">
            <summary>
            引用类型对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.structSerialize``1(``0)">
            <summary>
            值类型对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.baseSerialize``2(AutoCSer.Json.Serializer,``1)">
            <summary>
            基类转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serializeObject``1(AutoCSer.Json.Serializer,System.Object)">
            <summary>
            object转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.EnumToString``1(``0)">
            <summary>
            字符串转换
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.dictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            字典转换
            </summary>
            <param name="dictionary">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.stringDictionary``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            字典转换
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.nullableSerialize``1(System.Nullable{``0})">
            <summary>
            值类型对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.keyValuePairSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            字典转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.structEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.enumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0@,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0,AutoCSer.UnmanagedStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
            <param name="config"></param>
        </member>
        <member name="P:AutoCSer.Json.Serializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseMethodCache">
            <summary>
            JSON 解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.BaseParseMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],AutoCSer.Json.ParseAttribute,AutoCSer.Metadata.FieldIndex@)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <param name="defaultMember">默认解析字段</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Json.ParseAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom"></param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.ParserIsNameMethod">
            <summary>
            是否匹配默认顺序名称 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.ParseStateField">
            <summary>
            解析状态 字段信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumMethods">
            <summary>
            枚举解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumSByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumLongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumULongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumSByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumLongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumULongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举解析调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.valueTypeMethods">
            <summary>
            值类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.structParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetValueType(System.Type)">
            <summary>
            获取值类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>值类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.typeMethods">
            <summary>
            引用类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.typeParseMethod">
            <summary>
            引用类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetType(System.Type)">
            <summary>
            获取引用类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>引用类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.arrayMethods">
            <summary>
            数组解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.arrayMethod">
            <summary>
            数组解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetArray(System.Type)">
            <summary>
            获取数组解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.dictionaryMethods">
            <summary>
            字典解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.dictionaryMethod">
            <summary>
            字典解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetDictionary(System.Type)">
            <summary>
            获取字典解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>字典解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.nullableMethods">
            <summary>
            可空类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.nullableEnumParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.nullableParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetNullable(System.Type)">
            <summary>
            获取可空类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>可空类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.keyValuePairMethods">
            <summary>
            键值对解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.keyValuePairParseMethod">
            <summary>
            值类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetKeyValuePair(System.Type)">
            <summary>
            获取键值对解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>键值对解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.customMethods">
            <summary>
            自定义解析调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetCustom(System.Type)">
            <summary>
            自定义解析委托调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>自定义解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumerableConstructorMethods">
            <summary>
            获取枚举构造调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.listConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.collectionConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumerableConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.arrayConstructorMethod">
            <summary>
            数组构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.dictionaryConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetIEnumerableConstructor(System.Type)">
            <summary>
            获取枚举构造调用函数信息
            </summary>
            <param name="type">集合类型</param>
            <returns>枚举构造调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Json.Node">
            <summary>
            JSON 节点
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Node.Int64">
            <summary>
            64位整数值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.String">
            <summary>
            JSON 节点隐式转换为字符串
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Json.Node.checkQuoteString">
            <summary>
            检测未解析字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.toString(AutoCSer.CharStream,AutoCSer.Json.Parser@)">
            <summary>
            输出字符串
            </summary>
            <param name="charStream"></param>
            <param name="parser"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.Boolean">
            <summary>
            JSON 节点隐式转换为逻辑值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>逻辑值</returns>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.Double">
            <summary>
            JSON 节点隐式转换为数值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>数值</returns>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.DateTime">
            <summary>
            JSON 节点隐式转换为时间
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="F:AutoCSer.Json.Node.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Node.list">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Node.SubString">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.SetNumberString(System.Char)">
            <summary>
            设置数字字符串
            </summary>
            <param name="quote"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.SetQuoteString(System.Int32,System.Char,System.Boolean)">
            <summary>
            未解析字符串
            </summary>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.SetList(AutoCSer.LeftArray{AutoCSer.Json.Node}@)">
            <summary>
            设置列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.SetDictionary(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.Json.Node,AutoCSer.Json.Node}}@)">
            <summary>
            设置字典
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Json.Node.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Values">
            <summary>
            字典数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.LeftArray">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.IsNull">
            <summary>
            是否空节点
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Count">
            <summary>
            字典 / 列表节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Item(System.Int32)">
            <summary>
            获取列表节点数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Json.Node.Item(System.String)">
            <summary>
            获取字典数据
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.IgnoreMemberAttribute">
            <summary>
            JSON 序列化成员忽略配置
            </summary>
        </member>
        <member name="M:AutoCSer.Json.IgnoreMemberAttribute.#ctor">
            <summary>
            JSON 序列化成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.Json.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.JsonSerialize">
            <summary>
            JSON 序列化扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJson``1(``0,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJson``1(``0,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.fromJson``1(``0,AutoCSer.SubString,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.fromJson``1(``0,AutoCSer.SubString@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.fromJson``1(``0,System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJsonNode``1(AutoCSer.SubString,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 节点解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>JSON 节点 + 解析状态结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJsonNode``1(System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>JSON 节点 + 解析状态结果</returns>
        </member>
        <member name="T:AutoCSer.Config.Pub">
            <summary>
            公用全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.YieldPoolCount">
            <summary>
            链表缓存池默认缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Config.Pub.GetYieldPoolCount(System.Type)">
            <summary>
            获取链表缓存池默认缓存数量
            </summary>
            <param name="type">缓存数据类型</param>
            <returns>链表缓存池默认缓存数量</returns>
        </member>
        <member name="F:AutoCSer.Config.Pub.Default">
            <summary>
            默认全局配置
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.ParseConfig">
            <summary>
            XML 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.SerializeConfig">
            <summary>
            XML 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.SerializeAttribute">
            <summary>
            XML 序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.PropertyMethod">
            <summary>
            属性成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.PropertyMethod.Property">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.PropertyMethod.Method">
            <summary>
            访问函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.PropertyMethod.Attribute">
            <summary>
            自定义属性
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ParseConfig">
            <summary>
            XML 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.Constructor">
            <summary>
            自定义构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.BootNodeName">
            <summary>
            根节点名称(不能包含非法字符)
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.ItemName">
            <summary>
            集合子节点名称(不能包含非法字符)
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.IsAttribute">
            <summary>
            是否保存属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.IsTempString">
            <summary>
            是否临时字符串(可修改)
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.IsMatchEnum">
            <summary>
            是否强制匹配枚举值
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Unknown">
            <summary>
            未知成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicInstanceField">
            <summary>
            公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicInstanceField">
            <summary>
            非公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicInstanceProperty">
            <summary>
            公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicInstanceProperty">
            <summary>
            非公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicStaticField">
            <summary>
            公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicStaticField">
            <summary>
            非公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicStaticProperty">
            <summary>
            公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicStaticProperty">
            <summary>
            非公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicInstance">
            <summary>
            公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicInstance">
            <summary>
            非公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicStatic">
            <summary>
            公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicStatic">
            <summary>
            非公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.InstanceField">
            <summary>
            动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.InstanceProperty">
            <summary>
            动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.StaticField">
            <summary>
            静态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.StaticProperty">
            <summary>
            静态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Public">
            <summary>
            公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublic">
            <summary>
            非公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Instance">
            <summary>
            动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Static">
            <summary>
            静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.AttributeMethod">
            <summary>
            自定义属性函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.Method">
            <summary>
            函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.attributes">
            <summary>
            自定义属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.staticMethods">
            <summary>
            自定义属性函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.createStaticLock">
            <summary>
            自定义属性函数信息集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.GetStatic(System.Type)">
            <summary>
            根据类型获取自定义属性函数信息集合
            </summary>
            <param name="type">对象类型</param>
            <returns>自定义属性函数信息集合</returns>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.methods">
            <summary>
            自定义属性函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.createLock">
            <summary>
            自定义属性函数信息集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.Get(System.Type)">
            <summary>
            根据类型获取自定义属性函数信息集合
            </summary>
            <param name="type">对象类型</param>
            <returns>自定义属性函数信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.Attributes``1">
            <summary>
            获取自定义属性集合
            </summary>
            <typeparam name="attributeType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.GetAttribute``1">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <returns>自定义属性</returns>
        </member>
        <member name="T:AutoCSer.Json.StateSearcher">
            <summary>
            名称状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchName(AutoCSer.Json.Parser,System.Boolean@)">
            <summary>
            获取名称索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <param name="isQuote">名称是否带引号</param>
            <returns>名称索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.searchString(AutoCSer.Json.Parser,System.Char)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <param name="value">第一个字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchString(AutoCSer.Json.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchFlagEnum(AutoCSer.Json.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.flagEnum(AutoCSer.Json.Parser,System.Char)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <param name="value">当前字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.NextFlagEnum(AutoCSer.Json.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.memberSearchers">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.memberSearcherLock">
            <summary>
            成员名称查找数据创建锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.GetMemberSearcher(System.Type,System.String[])">
            <summary>
            获取成员名称查找数据
            </summary>
            <param name="type">定义类型</param>
            <param name="names">成员名称集合</param>
            <returns>成员名称查找数据</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Json.SerializeResult">
            <summary>
            序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeResult.Json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeResult.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeResult.op_Implicit(AutoCSer.Json.SerializeResult)~System.String">
            <summary>
            JSON 字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.ParseUnknownNameAttriubte">
            <summary>
            未知名称解析函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseCustomAttribute">
            <summary>
            自定义类型解析函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.ListConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.ListConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.DynamicArray">
            <summary>
            动态数组信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayCache">
            <summary>
            是否需要清除数组缓存信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayLock">
            <summary>
            是否需要清除数组缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray.IsClearArray(System.Type)">
            <summary>
            是否需要清除数组
            </summary>
            <param name="type">类型</param>
            <returns>需要清除数组</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.isClearArray(System.Type)">
            <summary>
            是否需要清除数组
            </summary>
            <param name="type">类型</param>
            <returns>需要清除数组</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.DynamicArray`1">
            <summary>
            动态数组基类
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.DynamicArray`1.IsClearArray">
            <summary>
            是否需要清除数组
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.GetNewArray(System.Int32)">
            <summary>
            创建新数组
            </summary>
            <param name="length">数组长度</param>
            <returns>数组</returns>
        </member>
        <member name="F:AutoCSer.DynamicArray`1.Array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.Add(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.Add(`0[],System.Int32,System.Int32)">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="P:AutoCSer.DynamicArray`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.IgnoreMemberAttribute">
            <summary>
            二进制数据序列化成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeWarning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeWarning.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeWarning.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeAttribute">
            <summary>
            XML 序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeAttribute.AnonymousTypeMember">
            <summary>
            匿名类型序列化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ParseResult">
            <summary>
            XML 解析结果
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.Xml">
            <summary>
            XML 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseResult.op_Implicit(AutoCSer.Xml.ParseResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.ParseMethodCache">
            <summary>
            类型解析器静态信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Xml.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumMethods">
            <summary>
            枚举解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumSByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumLongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumULongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumSByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumLongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumULongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举解析调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.valueTypeMethods">
            <summary>
            值类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.structParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetValueType(System.Type)">
            <summary>
            获取值类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>值类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.typeMethods">
            <summary>
            引用类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.typeParseMethod">
            <summary>
            引用类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetType(System.Type)">
            <summary>
            获取引用类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>引用类型解析调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom"></param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.BaseParseMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.arrayMethods">
            <summary>
            数组解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.arrayMethod">
            <summary>
            数组解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetArray(System.Type)">
            <summary>
            获取数组解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableEnumParseMethods">
            <summary>
            可空枚举类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableEnumParseMethod">
            <summary>
            可空枚举类型解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetNullableEnumParse(System.Type,System.Type[])">
            <summary>
            获取可空枚举类型解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <param name="parameterTypes">泛型参数类型集合</param>
            <returns>可空枚举类型解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableParseMethods">
            <summary>
            可空类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableParseMethod">
            <summary>
            可空类型解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetNullableParse(System.Type,System.Type[])">
            <summary>
            获取可空类型解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <param name="parameterTypes">泛型参数类型集合</param>
            <returns>可空类型解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.keyValuePairMethods">
            <summary>
            键值对解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.keyValuePairParseMethod">
            <summary>
            值类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetKeyValuePair(System.Type)">
            <summary>
            获取键值对解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>键值对解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumerableConstructorMethods">
            <summary>
            获取枚举构造调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.listConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.collectionConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumerableConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.arrayConstructorMethod">
            <summary>
            数组构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.dictionaryConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetIEnumerableConstructor(System.Type)">
            <summary>
            获取枚举构造调用函数信息
            </summary>
            <param name="type">集合类型</param>
            <returns>枚举构造调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.customMethods">
            <summary>
            自定义解析调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetCustom(System.Type)">
            <summary>
            自定义解析委托调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>自定义解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.genericDefinitionMemberSearchers">
            <summary>
            泛型定义类型成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.genericDefinitionMemberSearcherCreateLock">
            <summary>
            泛型定义类型成员名称查找数据创建锁
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetGenericDefinitionMemberSearcher(System.Type,System.String[])">
            <summary>
            获取泛型定义成员名称查找数据
            </summary>
            <param name="type">泛型定义类型</param>
            <param name="names">成员名称集合</param>
            <returns>泛型定义成员名称查找数据</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Xml.ParseMethod">
            <summary>
            解析类型
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseMemberAttribute">
            <summary>
            JSON 解析成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMemberAttribute.IsDefault">
            <summary>
            是否默认解析成员
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseAttribute">
            <summary>
            JSON 解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Config.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Config.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Config.UnionType.Pub">
            <summary>
            公用全局配置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeAttribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsBaseType">
            <summary>
            是否作用于未知派生类型，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsJson">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记，默认为 false
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsReferenceMember">
            <summary>
            是否检测相同的引用成员(作为根节点时有效)，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsMemberMap">
            <summary>
            是否序列化成员位图，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsAnonymousFields">
            <summary>
            是否选择匿名字段，默认为 false
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeAttribute.#ctor">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeAttribute.#ctor(System.Boolean)">
            <summary>
            二进制数据序列化类型配置
            </summary>
            <param name="isReferenceMember">是否检测相同的引用成员</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeConfig">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeConfig.IsFullData">
            <summary>
            数据是否完整
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeConfig.IsDisposeMemberMap">
            <summary>
            是否自动释放成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.CharStreamField">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.ItemNameField">
            <summary>
            集合子节点名称字段
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.nameStart(System.String,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.ObjectReference">
            <summary>
            对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectReference.Value">
            <summary>
            对象
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectReference.Equals(AutoCSer.ObjectReference)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReference.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReference.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap`1">
            <summary>
            成员位图
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.Type">
            <summary>
            成员位图类型信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.ClearMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member">成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Equals(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            比较是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewFull">
            <summary>
            所有成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewEmpty">
            <summary>
            空成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreAttribute">
            <summary>
            禁止安装属性
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.FieldIndex">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.#ctor(System.Reflection.FieldInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            字段信息
            </summary>
            <param name="field">字段信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="P:AutoCSer.Metadata.FieldIndex.AnonymousName">
            <summary>
            匿名字段名称
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseState">
            <summary>
            JSON 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NullJson">
            <summary>
            JSON 字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NullValue">
            <summary>
            解析目标对象参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.UnknownNote">
            <summary>
            未能识别的注释
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NoteNotRound">
            <summary>
            /**/ 注释缺少回合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotNull">
            <summary>
            null 值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotHex">
            <summary>
            16 进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.StringEnter">
            <summary>
            字符串被换行截断
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.ArrayManyRank">
            <summary>
            不支持多维数组
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotArray">
            <summary>
            数组解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotArrayValue">
            <summary>
            数组数据解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotObject">
            <summary>
            对象解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotFoundName">
            <summary>
            没有找到成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotFoundColon">
            <summary>
            没有找到冒号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.UnknownValue">
            <summary>
            忽略值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotDictionary">
            <summary>
            字典解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.Custom">
            <summary>
            自定义序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.EnumerableConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.EnumerableConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeResult">
            <summary>
            反序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeResult.DataLength">
            <summary>
            数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeResult.State">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeResult.op_Implicit(AutoCSer.BinarySerialize.DeSerializeResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
    </members>
</doc>
