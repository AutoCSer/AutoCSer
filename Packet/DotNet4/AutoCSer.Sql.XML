<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer.Sql</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.Sql.UpdateMemberMap`2">
            <summary>
            数据更新成员位图
            </summary>
            <typeparam name="tableType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.UpdateMemberMap`2.value">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UpdateMemberMap`2.memberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.UpdateMemberMap`2.#ctor(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            数据更新成员位图
            </summary>
            <param name="value">更新数据</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.UpdateMemberMap`2.setMember(AutoCSer.Metadata.MemberMap{`1}.MemberIndex)">
            <summary>
            设置成员索引
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Sql.UpdateMemberMap`2.update(AutoCSer.Sql.Table{`0,`1},System.Boolean)">
            <summary>
            更新数据
            </summary>
            <param name="table">数据表格</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.UpdateMemberMap`2.update(AutoCSer.Sql.Table{`0,`1},System.Action{`0},System.Boolean)">
            <summary>
            更新数据
            </summary>
            <param name="table">数据表格</param>
            <param name="onUpdated">更新数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
        </member>
        <member name="T:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1">
            <summary>
            获取分页记录集合
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Threading.PageTask`1">
            <summary>
            获取分页记录集合任务
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Threading.LinkQueueTaskNode">
            <summary>
            链表任务队列节点
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LinkQueueTaskNode.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="F:AutoCSer.Sql.Threading.PageTask`1.values">
            <summary>
            分页记录集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.PageTask`1.pageSize">
            <summary>
            分页长度
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.PageTask`1.currentPage">
            <summary>
            分页页号
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.PageTask`1.count">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.PageTask`1.isDesc">
            <summary>
            是否逆序
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.PageTask`1.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="pageSize"></param>
            <param name="currentPage"></param>
            <param name="isDesc"></param>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1.array">
            <summary>
            延时排序缓存数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1.sorter">
            <summary>
            排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1.#ctor(System.Int32,System.Int32,System.Boolean,AutoCSer.Sql.Cache.LazyOrderArray{`0},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}})">
            <summary>
            获取分页记录集合
            </summary>
            <param name="pageSize"></param>
            <param name="currentPage"></param>
            <param name="isDesc"></param>
            <param name="array"></param>
            <param name="sorter"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LazyOrderArrayPageTask`1.Wait(System.Int32@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.MsSql.Sql2005">
            <summary>
            SQL Server 2005 客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.MsSql.Sql2000">
            <summary>
            SQL Server 2000 客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Client">
            <summary>
            SQL 客户端操作
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Client.sqlStream">
            <summary>
            Sql 字符流
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Client.Connection">
            <summary>
            SQL连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Client.ConnectionPool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Client.#ctor(AutoCSer.Sql.Connection)">
            <summary>
            SQL客户端操作
            </summary>
            <param name="connection">SQL连接信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetConnection">
            <summary>
            获取 SQL 连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.createConnection(System.Data.Common.DbConnection@)">
            <summary>
            创建 SQL 连接
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Client.FreeConnection(System.Data.Common.DbConnection@)">
            <summary>
            释放 SQL 连接
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Client.CloseErrorConnection(System.Data.Common.DbConnection@)">
            <summary>
            关闭错误连接并重新获取连接
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Client.getCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            获取SQL命令
            </summary>
            <param name="connection"></param>
            <param name="sql">SQL语句</param>
            <returns>SQL命令</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.executeNonQuery(System.Data.Common.DbConnection@,System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="connection"></param>
            <param name="sql">SQL语句</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.executeNonQuery(System.Data.Common.DbConnection,System.String)">
            <summary>
            执行SQL语句
            </summary>
            <param name="connection"></param>
            <param name="sql">SQL语句</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.getDataSet(System.Data.Common.DbCommand)">
            <summary>
            获取数据集并关闭SQL命令
            </summary>
            <param name="command">SQL命令</param>
            <returns>数据集</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.getAdapter(System.Data.Common.DbCommand)">
            <summary>
            获取数据适配器
            </summary>
            <param name="command">SQL命令</param>
            <returns>数据适配器</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetColumn(System.String,System.Type,AutoCSer.Sql.MemberAttribute)">
            <summary>
            成员信息转换为数据列
            </summary>
            <param name="name">成员名称</param>
            <param name="type">成员类型</param>
            <param name="memberAttribute">SQL成员信息</param>
            <returns>数据列</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetColumn(System.Type,AutoCSer.Sql.MemberAttribute)">
            <summary>
            成员信息转换为数据列
            </summary>
            <param name="type">成员类型</param>
            <param name="memberAttribute">SQL成员信息</param>
            <returns>数据列</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.ToSqlColumn(AutoCSer.Sql.TableColumnCollection)">
            <summary>
            SQL列转换
            </summary>
            <param name="table">表格信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.ToSqlColumn(AutoCSer.Sql.Column[])">
            <summary>
            SQL列转换
            </summary>
            <param name="columns">数据列集合</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetValue(System.Data.Common.DbConnection,System.String)">
            <summary>
            查询单值数据
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetTable(System.Data.Common.DbConnection,System.String)">
            <summary>
            根据表格名称获取表格信息
            </summary>
            <param name="connection">SQL连接</param>
            <param name="tableName">表格名称</param>
            <returns>表格信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.CreateTable(System.Data.Common.DbConnection,AutoCSer.Sql.TableColumnCollection)">
            <summary>
            创建表格
            </summary>
            <param name="connection">SQL连接</param>
            <param name="table">表格信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.CreateIndex(System.Data.Common.DbConnection,System.String,AutoCSer.Sql.ColumnCollection)">
            <summary>
            创建索引
            </summary>
            <param name="connection"></param>
            <param name="tableName">表格名称</param>
            <param name="columnCollection">索引列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.AppendIndexName(AutoCSer.CharStream,System.String,AutoCSer.Sql.ColumnCollection)">
            <summary>
            写入索引名称
            </summary>
            <param name="sqlStream">SQL语句流</param>
            <param name="tableName">表格名称</param>
            <param name="columnCollection">索引列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.DeleteFields(System.Data.Common.DbConnection,AutoCSer.Sql.ColumnCollection)">
            <summary>
            删除列集合
            </summary>
            <param name="connection">SQL连接</param>
            <param name="columnCollection">删除列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.AddFields(System.Data.Common.DbConnection,AutoCSer.Sql.ColumnCollection)">
            <summary>
            新增列集合
            </summary>
            <param name="connection">SQL连接</param>
            <param name="columnCollection">新增列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetSql``1(System.Linq.Expressions.LambdaExpression,AutoCSer.CharStream,AutoCSer.Sql.SelectQuery{``0}@)">
            <summary>
            委托关联表达式转SQL表达式
            </summary>
            <param name="expression">委托关联表达式</param>
            <param name="sqlStream">SQL表达式流</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetSelectQuery``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@)">
            <summary>
            获取查询信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberMap">成员位图</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetSelectQuery``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@)">
            <summary>
            获取查询信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <returns>对象集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Select``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{``1}@)">
            <summary>
            获取查询信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection"></param>
            <param name="query">查询信息</param>
            <returns>对象集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetByIdentity``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            查询对象
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.GetByPrimaryKey``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            查询对象
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.Get``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            执行SQL语句并更新成员
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">目标对象</param>
            <param name="query">查询信息</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Update``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Update``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@,System.Boolean)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Update``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Insert``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取添加数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">添加数据</param>
            <param name="memberMap">成员位图</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.insert``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取添加数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">添加数据</param>
            <param name="memberMap">成员位图</param>
            <param name="query">添加数据查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Client.Insert``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@,System.Boolean)">
            <summary>
            添加数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Insert``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            添加数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Delete``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取删除数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">删除数据</param>
            <param name="query">删除数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Delete``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@,System.Boolean)">
            <summary>
            删除数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Client.Delete``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            删除数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Client.NowTimeMilliseconds">
            <summary>
            时间间隔毫秒数
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Client.IsIndex">
            <summary>
            是否支持索引
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Client.IsAddField">
            <summary>
            是否支持新增列
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.Sql2000.DefaultNowTimeMilliseconds">
            <summary>
            默认间隔毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.Sql2000.maxStringSize">
            <summary>
            最大字符串长度
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.#ctor(AutoCSer.Sql.Connection)">
            <summary>
            SQL客户端操作
            </summary>
            <param name="connection">SQL连接信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.createConnection(System.Data.Common.DbConnection@)">
            <summary>
            创建 SQL 连接
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.getCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            获取SQL命令
            </summary>
            <param name="connection"></param>
            <param name="sql">SQL语句</param>
            <returns>SQL命令</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.getAdapter(System.Data.Common.DbCommand)">
            <summary>
            获取数据适配器
            </summary>
            <param name="command">SQL命令</param>
            <returns>数据适配器</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.GetColumn(System.Type,AutoCSer.Sql.MemberAttribute)">
            <summary>
            成员信息转换为数据列
            </summary>
            <param name="type">成员类型</param>
            <param name="memberAttribute">SQL成员信息</param>
            <returns>数据列</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.getTableSql(System.String)">
            <summary>
            根据表格名称获取表格信息的SQL语句
            </summary>
            <param name="tableName">表格名称</param>
            <returns>表格信息的SQL语句</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.GetTable(System.Data.Common.DbConnection,System.String)">
            <summary>
            根据表格名称获取表格信息
            </summary>
            <param name="connection">SQL连接</param>
            <param name="tableName">表格名称</param>
            <returns>表格信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.CreateTable(System.Data.Common.DbConnection,AutoCSer.Sql.TableColumnCollection)">
            <summary>
            创建表格
            </summary>
            <param name="connection">SQL连接</param>
            <param name="table">表格信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.appendColumn(AutoCSer.CharStream,AutoCSer.Sql.Column)">
            <summary>
            写入列信息
            </summary>
            <param name="sqlStream">SQL语句流</param>
            <param name="column">列信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.formatDefaultValue(System.Object)">
            <summary>
            删除默认值左右括号()
            </summary>
            <param name="defaultValue">默认值</param>
            <returns>默认值</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.CreateIndex(System.Data.Common.DbConnection,System.String,AutoCSer.Sql.ColumnCollection)">
            <summary>
            创建索引
            </summary>
            <param name="connection"></param>
            <param name="tableName">表格名称</param>
            <param name="columnCollection">索引列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.DeleteFields(System.Data.Common.DbConnection,AutoCSer.Sql.ColumnCollection)">
            <summary>
            删除列集合
            </summary>
            <param name="connection">SQL连接</param>
            <param name="columnCollection">删除列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.AddFields(System.Data.Common.DbConnection,AutoCSer.Sql.ColumnCollection)">
            <summary>
            新增列集合
            </summary>
            <param name="connection">SQL连接</param>
            <param name="columnCollection">新增列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.selectKeys``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@,System.String,AutoCSer.CharStream)">
            <summary>
            查询对象集合
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <param name="keyName">关键之名称</param>
            <param name="sqlStream"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.selectNoOrder``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@,AutoCSer.CharStream)">
            <summary>
            查询对象集合
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <param name="sqlStream"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.GetSelectQuery``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@)">
            <summary>
            获取查询信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <returns>对象集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.GetByIdentity``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            查询对象
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.GetByPrimaryKey``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            查询对象
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.Update``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.Update``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.insert``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取添加数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">添加数据</param>
            <param name="memberMap">成员位图</param>
            <param name="query">添加数据查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.Insert``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            添加数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.Delete``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取删除数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">删除数据</param>
            <param name="query">删除数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2000.Delete``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            删除数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.Sql2005.orderOverName">
            <summary>
            排序名称
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2005.#ctor(AutoCSer.Sql.Connection)">
            <summary>
            SQL客户端操作
            </summary>
            <param name="connection">SQL连接信息</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2005.selectKeys``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@,System.String,AutoCSer.CharStream)">
            <summary>
            查询对象集合
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <param name="keyName">关键之名称</param>
            <param name="sqlStream"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2005.selectRows``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@,AutoCSer.CharStream)">
            <summary>
            查询对象集合
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <param name="sqlStream"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2005.selectNoOrder``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@,AutoCSer.CharStream)">
            <summary>
            查询对象集合
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <param name="sqlStream"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2005.GetSelectQuery``2(AutoCSer.Sql.Table{``0,``1},AutoCSer.Sql.CreateSelectQuery{``1}@,AutoCSer.Sql.SelectQuery{``1}@)">
            <summary>
            获取查询信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="createQuery"></param>
            <param name="query">查询信息</param>
            <returns>对象集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.Sql2005.getTableSql(System.String)">
            <summary>
            根据表格名称获取表格信息的SQL语句
            </summary>
            <param name="tableName">表格名称</param>
            <returns>表格信息的SQL语句</returns>
        </member>
        <member name="T:AutoCSer.Sql.ModelTable`1">
            <summary>
            数据表格
            </summary>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Table`2">
            <summary>
            数据表格
            </summary>
            <typeparam name="tableType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Table`1">
            <summary>
            数据表格
            </summary>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.identity64">
            <summary>
            自增ID生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.Attribute">
            <summary>
            数据库表格配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.TableName">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.Client">
            <summary>
            SQL操作客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.nowTimes">
            <summary>
            当前时间数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.queue">
            <summary>
            操作队列
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.Log">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.createCacheWait">
            <summary>
            创建缓存等待
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.CacheLoadWait">
            <summary>
            缓存加载等待
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.isLoadCache">
            <summary>
            是否已经加载缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.isLoadLogStream">
            <summary>
            日志流数据是否加载完成
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.ignoreCase">
            <summary>
            成员名称是否忽略大小写
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.IsError">
            <summary>
            是否初始化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.NoIndexMemberNames">
            <summary>
            待创建一级索引的成员名称集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.#ctor(AutoCSer.Sql.TableAttribute,System.String,AutoCSer.Sql.NowTime[],System.Boolean)">
            <summary>
            数据库表格操作工具
            </summary>
            <param name="attribute">数据库表格配置</param>
            <param name="tableName">表格名称</param>
            <param name="nowTimes">当前时间数组</param>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="M:AutoCSer.Sql.Table.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.CreateIndex(System.Data.Common.DbConnection,System.String,System.Boolean)">
            <summary>
            创建索引
            </summary>
            <param name="connection"></param>
            <param name="name">列名称</param>
            <param name="isUnique">是否唯一值</param>
        </member>
        <member name="M:AutoCSer.Sql.Table.WaitCreateCache">
            <summary>
            等待创建缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.CacheCreated">
            <summary>
            缓存对象创建完毕
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.WaitLoad">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.AddQueue(AutoCSer.Sql.Threading.LinkQueueTaskNode)">
            <summary>
            添加操作队列
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table.callOnCacheLoaded">
            <summary>
            缓存加载完毕事件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.CallOnLogMemberLoaded">
            <summary>
            计算列加载完成事件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table.GetNowTime(System.DateTime,System.Int32)">
            <summary>
            获取当前时间
            </summary>
            <param name="time"></param>
            <param name="memberIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Table.StringVerify(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            字符串验证
            </summary>
            <param name="memberName">成员名称</param>
            <param name="value">成员值</param>
            <param name="length">最大长度</param>
            <param name="isAscii">是否ASCII</param>
            <param name="isNull">是否可以为null</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Table.NullVerify(System.String)">
            <summary>
            成员值不能为null
            </summary>
            <param name="memberName">成员名称</param>
        </member>
        <member name="F:AutoCSer.Sql.Table.StringVerifyMethod">
            <summary>
            数据库字符串验证函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table.NullVerifyMethod">
            <summary>
            数据库字段空值验证
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Table.Identity64">
            <summary>
            当前自增ID
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Table.NextIdentity">
            <summary>
            自增ID
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Table.NowTimeMilliseconds">
            <summary>
            当前时间间隔毫秒数
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table.OnCacheLoaded">
            <summary>
            缓存加载完毕事件
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table.OnLogMemberLoaded">
            <summary>
            计算列加载完成事件
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`1.SelectMemberMap">
            <summary>
            更新查询SQL数据成员
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`1.#ctor(AutoCSer.Sql.TableAttribute,System.String,AutoCSer.Sql.NowTime[],System.Boolean)">
            <summary>
            数据表格
            </summary>
            <param name="attribute">数据库表格配置</param>
            <param name="tableName">表格名称</param>
            <param name="nowTimes">当前时间数组</param>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`1.AddLogStreamLoadedType(System.Action{AutoCSer.Sql.LogStream.LoadedType},AutoCSer.Sql.LogStream.LoadedType[])">
            <summary>
            数据完成类型注册
            </summary>
            <param name="onLoaded">数据完成操作</param>
            <param name="types">待加载类型集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`1.SetSelectMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置更新查询SQL数据成员
            </summary>
            <param name="member">字段表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`1.GetSelectMemberMap(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            获取更新查询SQL数据成员
            </summary>
            <param name="memberMap">查询SQL数据成员</param>
            <returns>更新查询SQL数据成员</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.#ctor(AutoCSer.Sql.TableAttribute,AutoCSer.Sql.NowTime[],System.Boolean)">
            <summary>
            数据表格
            </summary>
            <param name="attribute">数据库表格配置</param>
            <param name="nowTimes">当前时间数组</param>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Get(System.Boolean,AutoCSer.Sql.NowTime[])">
            <summary>
            获取数据库表格操作工具
            </summary>
            <returns>数据库表格操作工具</returns>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
            <param name="nowTimes">当前时间数组</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CallOnInsert(`0)">
            <summary>
            添加数据之前的处理事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CallOnInserted(`0)">
            <summary>
            添加数据之后的处理事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CallOnUpdate(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据之前的处理事件
            </summary>
            <param name="value">更新数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CallOnUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据之后的处理事件
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CallOnDelete(`0)">
            <summary>
            删除数据之前的处理事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CallOnDeleted(`0)">
            <summary>
            删除数据之后的处理事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CacheLoaded(System.Action{`0},AutoCSer.Sql.Table{`0,`1}.OnTableUpdated,System.Action{`0},System.Boolean,System.Boolean)">
            <summary>
            缓存数据加载完成
            </summary>
            <param name="onInserted">添加记录事件</param>
            <param name="onUpdated">更新记录事件</param>
            <param name="onDeleted">删除记录事件</param>
            <param name="isLoadMemberCache">是否加载缓存依赖类型</param>
            <param name="isSqlStreamTypeCount">是否日志流计数完成类型注册</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.CacheLoaded(System.Boolean,System.Boolean)">
            <summary>
            缓存数据加载完成
            </summary>
            <param name="isLoadMemberCache">是否加载缓存依赖类型</param>
            <param name="isSqlStreamTypeCount">是否日志流计数完成类型注册</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.LoadMemberCache(System.Type)">
            <summary>
            加载成员缓存初始化依赖类型
            </summary>
            <param name="memberCacheType">成员缓存绑定类型</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.WaitMemberCache">
            <summary>
            等待成员扩展缓存初始化
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.GetSelectQuery(AutoCSer.Metadata.MemberMap{`1},AutoCSer.Sql.CreateSelectQuery{`1}@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            获取查询信息
            </summary>
            <param name="memberMap"></param>
            <param name="createQuery"></param>
            <param name="query"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Select(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            查询数据集合
            </summary>
            <param name="connection"></param>
            <param name="query"></param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Select(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            获取数据库记录集合
            </summary>
            <param name="where">查询条件</param>
            <param name="memberMap">成员位图</param>
            <returns>数据库记录集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Select(System.Data.Common.DbConnection@,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            获取数据库记录集合
            </summary>
            <param name="connection"></param>
            <param name="where">查询条件</param>
            <param name="memberMap">成员位图</param>
            <returns>数据库记录集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Get(System.Int64,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            根据自增 Id 获取数据库记录
            </summary>
            <param name="identity">自增 Id</param>
            <param name="memberMap">成员位图</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Get(System.Int32,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            根据自增 Id 获取数据库记录
            </summary>
            <param name="identity">自增 Id</param>
            <param name="memberMap">成员位图</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Get(System.Data.Common.DbConnection@,System.Int64,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            根据自增 Id 获取数据库记录
            </summary>
            <param name="connection"></param>
            <param name="identity">自增 Id</param>
            <param name="memberMap">成员位图</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Get(System.Data.Common.DbConnection@,System.Int32,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            根据自增 Id 获取数据库记录
            </summary>
            <param name="connection"></param>
            <param name="identity">自增 Id</param>
            <param name="memberMap">成员位图</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Insert(`0,System.Boolean,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            将数据添加到数据库
            </summary>
            <param name="value">待添加数据</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <param name="memberMap">需要生成 SQL 语句的字段成员位图</param>
            <returns>添加是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Insert(`0,System.Action{`0},System.Boolean,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            将数据添加到数据库
            </summary>
            <param name="value">待添加数据</param>
            <param name="onInserted">添加数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <param name="memberMap">需要生成 SQL 语句的字段成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Update(`0,AutoCSer.Metadata.MemberMap{`1},System.Boolean)">
            <summary>
            更新数据
            </summary>
            <param name="value">更新数据</param>
            <param name="memberMap">更新数据字段成员位图</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Update(`0,AutoCSer.Metadata.MemberMap{`1},System.Action{`0},System.Boolean)">
            <summary>
            更新数据
            </summary>
            <param name="value">更新数据</param>
            <param name="memberMap">更新数据字段成员位图</param>
            <param name="onUpdated">更新数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Delete(`0,System.Boolean)">
            <summary>
            删除数据
            </summary>
            <param name="value">待删除数据</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>删除是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Delete(System.Int64,System.Boolean)">
            <summary>
            根据自增 Id 删除数据库数据
            </summary>
            <param name="identity">自增 Id</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Delete(System.Int32,System.Boolean)">
            <summary>
            根据自增 Id 删除数据库数据
            </summary>
            <param name="identity">自增 Id</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Delete(`0,System.Action{`0},System.Boolean)">
            <summary>
            删除数据
            </summary>
            <param name="value">待删除数据</param>
            <param name="onDeleted">删除数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Delete(System.Int64,System.Action{`0},System.Boolean)">
            <summary>
            删除数据
            </summary>
            <param name="identity">自增 Id</param>
            <param name="onDeleted">删除数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Delete(System.Int32,System.Action{`0},System.Boolean)">
            <summary>
            删除数据
            </summary>
            <param name="identity">自增 Id</param>
            <param name="onDeleted">删除数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
        </member>
        <member name="E:AutoCSer.Sql.Table`2.OnInsert">
            <summary>
            添加数据之前的处理事件
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table`2.OnInserted">
            <summary>
            添加数据之后的处理事件
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table`2.OnUpdate">
            <summary>
            更新数据之前的处理事件
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table`2.OnUpdated">
            <summary>
            更新数据之后的处理事件 [更新后的数据 + 更新前的数据 + 更新成员位图]
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table`2.OnDelete">
            <summary>
            删除数据之前的处理事件
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Table`2.OnDeleted">
            <summary>
            删除数据之后的处理事件
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.OnTableUpdated">
            <summary>
            数据更新事件
            </summary>
            <param name="newValue">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新数据成员</param>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.OnInsertCancel">
            <summary>
            添加数据之前的处理事件
            </summary>
            <param name="value"></param>
            <param name="cancel"></param>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.OnUpdateCancel">
            <summary>
            更新数据之前的处理事件
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="cancel"></param>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.OnDeleteCancel">
            <summary>
            删除数据之前的处理事件
            </summary>
            <param name="value"></param>
            <param name="cancel"></param>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.Selecter">
            <summary>
            同步获取数据
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Threading.LinkQueueTaskNode`1">
            <summary>
            链表任务队列节点
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Threading.LinkQueueTaskNode`1.YieldPool">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTaskNode`1.YieldPool.Default">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LinkQueueTaskNode`1.YieldPool.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Selecter.Table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Selecter.Value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Selecter.Query">
            <summary>
            查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Selecter.wait">
            <summary>
            获取数据等待锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Selecter.#ctor">
            <summary>
            同步获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Selecter.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Selecter.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Selecter.Wait">
            <summary>
            等待获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.Getter">
            <summary>
            同步获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Getter.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Getter.Value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Getter.Query">
            <summary>
            单条记录查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Getter.wait">
            <summary>
            获取数据等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Getter.isValue">
            <summary>
            是否获取到数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Getter.#ctor">
            <summary>
            同步获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Getter.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Getter.Set(AutoCSer.Sql.Table{`0,`1},`0)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Getter.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Getter.Wait">
            <summary>
            等待获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.Inserter">
            <summary>
            同步添加数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Inserter.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Inserter.value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Inserter.query">
            <summary>
            添加数据查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Inserter.wait">
            <summary>
            添加数据等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Inserter.isIgnoreTransaction">
            <summary>
            是否忽略应用程序事务
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Inserter.isValue">
            <summary>
            添加数据是否成功
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Inserter.#ctor">
            <summary>
            同步获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Inserter.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Inserter.Set(AutoCSer.Sql.Table{`0,`1},`0,AutoCSer.Sql.InsertQuery@,System.Boolean)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <param name="query"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Inserter.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Inserter.Wait">
            <summary>
            等待添加数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.AsynchronousInserter">
            <summary>
            异步添加数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousInserter.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousInserter.value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousInserter.onInserted">
            <summary>
            添加数据回调
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousInserter.query">
            <summary>
            添加数据查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousInserter.isIgnoreTransaction">
            <summary>
            是否忽略应用程序事务
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.AsynchronousInserter.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.AsynchronousInserter.Set(AutoCSer.Sql.Table{`0,`1},`0,System.Action{`0}@,AutoCSer.Sql.InsertQuery@,System.Boolean)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="onInserted">添加数据回调</param>
            <param name="value"></param>
            <param name="query"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.Updater">
            <summary>
            同步更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.memberMap">
            <summary>
            更新成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.Query">
            <summary>
            更新记录查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.wait">
            <summary>
            添加数据等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.isIgnoreTransaction">
            <summary>
            是否忽略应用程序事务
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Updater.isValue">
            <summary>
            更新数据是否成功
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Updater.#ctor">
            <summary>
            同步更新数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Updater.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Updater.Set(AutoCSer.Sql.Table{`0,`1},`0,AutoCSer.Metadata.MemberMap{`1},System.Boolean)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Updater.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Updater.Wait">
            <summary>
            等待添加数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.AsynchronousUpdater">
            <summary>
            异步更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousUpdater.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousUpdater.value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousUpdater.onUpdated">
            <summary>
            更新数据回调
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousUpdater.memberMap">
            <summary>
            更新成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousUpdater.Query">
            <summary>
            更新记录查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousUpdater.isIgnoreTransaction">
            <summary>
            是否忽略应用程序事务
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.AsynchronousUpdater.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.AsynchronousUpdater.Set(AutoCSer.Sql.Table{`0,`1},`0,AutoCSer.Metadata.MemberMap{`1},System.Action{`0}@,System.Boolean)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="onUpdated"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.Deletor">
            <summary>
            同步删除数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Deletor.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Deletor.value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Deletor.query">
            <summary>
            删除数据 SQL 语句
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Deletor.wait">
            <summary>
            删除数据等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Deletor.isIgnoreTransaction">
            <summary>
            是否忽略应用程序事务
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.Deletor.isValue">
            <summary>
            删除数据是否成功
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Deletor.#ctor">
            <summary>
            同步获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Deletor.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Deletor.Set(AutoCSer.Sql.Table{`0,`1},`0,AutoCSer.Sql.InsertQuery@,System.Boolean)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <param name="query"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Deletor.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.Deletor.Wait">
            <summary>
            等待删除数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Table`2.AsynchronousDeletor">
            <summary>
            异步删除数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousDeletor.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousDeletor.value">
            <summary>
            目标数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousDeletor.onDeleted">
            <summary>
            删除数据回调
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousDeletor.query">
            <summary>
            删除数据 SQL 语句
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`2.AsynchronousDeletor.isIgnoreTransaction">
            <summary>
            是否忽略应用程序事务
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.AsynchronousDeletor.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Table`2.AsynchronousDeletor.Set(AutoCSer.Sql.Table{`0,`1},`0,System.Action{`0}@,AutoCSer.Sql.InsertQuery@,System.Boolean)">
            <summary>
            设置数据
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <param name="onDeleted">删除数据回调</param>
            <param name="query"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
        </member>
        <member name="M:AutoCSer.Sql.ModelTable`1.#ctor(AutoCSer.Sql.TableAttribute,System.Boolean)">
            <summary>
            数据表格
            </summary>
            <param name="attribute">数据库表格配置</param>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="M:AutoCSer.Sql.ModelTable`1.Get(System.Boolean)">
            <summary>
            获取数据库表格操作工具
            </summary>
            <returns>数据库表格操作工具</returns>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="T:AutoCSer.Sql.ModelTable`2">
            <summary>
            数据表格
            </summary>
            <typeparam name="modelType">模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Table`3">
            <summary>
            数据表格
            </summary>
            <typeparam name="tableType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Table`3.SetPrimaryKey">
            <summary>
            设置关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Table`3.GetPrimaryKey">
            <summary>
            获取关键字
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Table`3.#ctor(AutoCSer.Sql.TableAttribute,AutoCSer.Sql.NowTime[],System.Boolean)">
            <summary>
            数据表格
            </summary>
            <param name="attribute">数据库表格配置</param>
            <param name="nowTimes">当前时间数组</param>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`3.Get(System.Boolean,AutoCSer.Sql.NowTime[])">
            <summary>
            获取数据库表格操作工具
            </summary>
            <returns>数据库表格操作工具</returns>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
            <param name="nowTimes">当前时间数组</param>
        </member>
        <member name="M:AutoCSer.Sql.Table`3.GetByPrimaryKey(`2,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            根据关键字获取数据对象
            </summary>
            <param name="key">关键字</param>
            <param name="memberMap">成员位图</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.Sql.Table`3.GetByPrimaryKey(System.Data.Common.DbConnection@,`2,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            根据关键字获取数据对象
            </summary>
            <param name="connection"></param>
            <param name="key">关键字</param>
            <param name="memberMap">成员位图</param>
            <returns>数据对象</returns>
        </member>
        <member name="T:AutoCSer.Sql.Table`3.GetValue">
            <summary>
            获取数据委托
            </summary>
            <param name="connection"></param>
            <param name="key">关键字</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ModelTable`2.#ctor(AutoCSer.Sql.TableAttribute,System.Boolean)">
            <summary>
            数据表格
            </summary>
            <param name="attribute">数据库表格配置</param>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="M:AutoCSer.Sql.ModelTable`2.Get(System.Boolean)">
            <summary>
            获取数据库表格操作工具
            </summary>
            <returns>数据库表格操作工具</returns>
            <param name="isCreateCacheWait">是否等待创建缓存</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberDictionary`5">
            <summary>
            分组字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="valueKeyType">目标数据关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Member`5">
            <summary>
            成员绑定缓存
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="modelType"></typeparam>
            <typeparam name="keyType"></typeparam>
            <typeparam name="targetType"></typeparam>
            <typeparam name="cacheType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Member`5.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Member`5.getKey">
            <summary>
            分组字典关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Member`5.getValue">
            <summary>
            获取缓存目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Member`5.getMember">
            <summary>
            获取缓存委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Member`5.setMember">
            <summary>
            设置缓存委托
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Member`5.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,`4}},System.Func{System.Collections.Generic.IEnumerable{`3}})">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets">获取缓存目标对象集合</param>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.getValueKey">
            <summary>
            获取数据关键字委托
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`4},System.Linq.Expressions.Expression{System.Func{`4,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`3},`0}}},System.Func{System.Collections.Generic.IEnumerable{`4}},System.Func{`1,`3},System.Boolean)">
            <summary>
            分组字典缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="getValueKey">获取数据关键字委托</param>
            <param name="isReset">是否绑定事件并重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.onInserted(`0,`2@)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.onDeleted(`0,`2@)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除的数据关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.getCache(`2)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.GetArray(`2)">
            <summary>
            获取数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.MemberDictionary`5.Item(`2,`3)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="valueKey"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`3">
            <summary>
            自增ID整表数组缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`3">
            <summary>
            自增ID整表数组缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityCache`3">
            <summary>
            自增ID整表缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3">
            <summary>
            自增ID整表缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.Key`4">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.Cache`3">
            <summary>
            事件缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.Cache`2">
            <summary>
            事件缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Copy`2">
            <summary>
            SQL 表格缓存（成员位图复制操作）
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Table`2">
            <summary>
            SQL 表格缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Table`2.SqlTable">
            <summary>
            SQL操作工具
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Table`2.MemberMap">
            <summary>
            数据成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Table`2.memberGroup">
            <summary>
            成员分组
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Table`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Table`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Table`2.OnCacheUpdated">
            <summary>
            缓存更新事件
            </summary>
            <param name="cacheValue">缓存数据</param>
            <param name="newValue">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新数据成员</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Copy`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Copy`2.update(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新缓存数据
            </summary>
            <param name="value">缓存数据</param>
            <param name="newValue">更新后的新数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="updateMemberMap">更新成员位图</param>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.setIsLogProxyLoaded">
            <summary>
            设置计算列加载完成
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.isLogProxyLoaded">
            <summary>
            计算列加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.reset(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            重置缓存
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重置缓存
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.onLogMemberLoaded">
            <summary>
            计算列加载完成事件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.callSetIsLogProxyLoaded(`0)">
            <summary>
            设置计算列加载完成
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.callOnInserted(`0)">
            <summary>
            添加记录
            </summary>
            <param name="value">新添加的对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.callOnUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新记录
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的对象</param>
            <param name="oldValue">更新前的对象</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.callOnDeleted(`0)">
            <summary>
            删除记录
            </summary>
            <param name="value">被删除的对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.Loaded(System.Action{`0},AutoCSer.Sql.Cache.Table{`0,`1}.OnCacheUpdated,System.Action{`0},System.Boolean,System.Boolean)">
            <summary>
            缓存数据加载完成
            </summary>
            <param name="onInserted">添加记录事件</param>
            <param name="onUpdated">更新记录事件</param>
            <param name="onDeleted">删除记录事件</param>
            <param name="isLoadMemberCache">是否加载缓存依赖类型</param>
            <param name="isSqlStreamTypeCount">是否日志流计数完成类型注册</param>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.memberCaches">
            <summary>
            成员绑定缓存集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberPrimaryKey``1(System.Func{``0,`0},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Int32,System.Boolean)">
            <summary>
            创建关键字整表缓存
            </summary>
            <typeparam name="primaryKey"></typeparam>
            <param name="getValue">根据关键字获取数据</param>
            <param name="member">缓存字段表达式</param>
            <param name="group">数据分组</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberList``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.ListArray{`0}}},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            创建分组列表缓存
            </summary>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标表格类型</typeparam>
            <typeparam name="targetModelType">目标模型类型</typeparam>
            <typeparam name="targetMemberCacheType">目标缓存绑定类型</typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberListWhere``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.ListArray{`0}}},System.Func{`0,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            创建分组列表缓存
            </summary>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标表格类型</typeparam>
            <typeparam name="targetModelType">目标模型类型</typeparam>
            <typeparam name="targetMemberCacheType">目标缓存绑定类型</typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="isValue">数据匹配器</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberLazyOrderArray``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.Sql.Cache.LazyOrderArray{`0}}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Boolean)">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标表格类型</typeparam>
            <typeparam name="targetModelType">目标模型类型</typeparam>
            <typeparam name="targetMemberCacheType">目标缓存绑定类型</typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="sorter">数据排序</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberLazyOrderArrayWhere``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.Sql.Cache.LazyOrderArray{`0}}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标表格类型</typeparam>
            <typeparam name="targetModelType">目标模型类型</typeparam>
            <typeparam name="targetMemberCacheType">目标缓存绑定类型</typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="sorter">数据排序</param>
            <param name="isValue">数据匹配器</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberOrderList``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.ListArray{`0}}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Boolean,System.Boolean)">
            <summary>
            创建分组列表 延时排序缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="targetType"></typeparam>
            <typeparam name="targetModelType"></typeparam>
            <typeparam name="targetMemberCacheType"></typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="sorter">排序器</param>
            <param name="isReset">是否初始化</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberDictionary``5(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Linq.Expressions.Expression{System.Func{``3,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{``4},`0}}},System.Func{`1,``4},System.Boolean,System.Boolean)">
            <summary>
            创建分组字典缓存
            </summary>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标表格类型</typeparam>
            <typeparam name="targetModelType">目标模型类型</typeparam>
            <typeparam name="targetMemberCacheType">目标缓存绑定类型</typeparam>
            <typeparam name="valueKeyType">目标数据关键字类型</typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="getValueKey">获取数据关键字委托</param>
            <param name="isReset">是否绑定事件并重置数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberDictionaryListWhere``5(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Func{`1,``4},System.Linq.Expressions.Expression{System.Func{``3,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{``4},AutoCSer.ListArray{`0}}}},System.Func{`0,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            创建分组列表缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="targetType"></typeparam>
            <typeparam name="targetModelType"></typeparam>
            <typeparam name="targetMemberCacheType"></typeparam>
            <typeparam name="memberKeyType"></typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getMemberKey">分组列表关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="isValue">数据匹配器</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberArrayLazyOrderArray``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Func{`0,System.Int32},System.Int32,System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.Sql.Cache.LazyOrderArray{`0}[]}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Boolean,System.Boolean)">
            <summary>
            创建分组列表 延时排序缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="targetType"></typeparam>
            <typeparam name="targetModelType"></typeparam>
            <typeparam name="targetMemberCacheType"></typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getIndex">获取数组索引</param>
            <param name="arraySize">数组容器大小</param>
            <param name="member">缓存字段表达式</param>
            <param name="sorter">排序器</param>
            <param name="isReset">是否初始化</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateMemberArrayList``4(AutoCSer.Sql.Cache.Whole.Event.Key{``1,``2,``3,``0},System.Func{`1,``0},System.Func{`0,System.Int32},System.Int32,System.Linq.Expressions.Expression{System.Func{``3,AutoCSer.ListArray{`0}[]}},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            创建分组列表缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="targetType"></typeparam>
            <typeparam name="targetModelType"></typeparam>
            <typeparam name="targetMemberCacheType"></typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getIndex">获取数组索引</param>
            <param name="arraySize">数组容器大小</param>
            <param name="member">缓存字段表达式</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionaryDictionary``2(System.Func{`0,``0},System.Func{`0,``1},System.Boolean,System.Boolean)">
            <summary>
            创建分组字典缓存
            </summary>
            <typeparam name="groupKeyType"></typeparam>
            <typeparam name="keyType"></typeparam>
            <param name="getGroupKey">分组关键字获取器</param>
            <param name="getKey">字典关键字获取器</param>
            <param name="isReset">是否初始化数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionarySearchTreeDictionary``2(System.Func{`0,``0},System.Func{`0,``1},System.Boolean,System.Boolean)">
            <summary>
            创建分组字典缓存
            </summary>
            <typeparam name="keyType">分组关键字类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
            <param name="getKey">分组关键字获取器</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isReset">是否初始化数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionaryList``1(System.Func{`0,``0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            创建分组列表缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <param name="getKey">字典关键字获取器</param>
            <param name="isRemoveEnd">分组关键字获取器</param>
            <param name="isReset">是否初始化数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateArrayList(System.Func{`0,System.Int32},System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            创建数组列表缓存
            </summary>
            <param name="getIndex">数组索引获取器</param>
            <param name="arraySize">数组容器大小</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionaryArray``1(System.Func{`0,``0},System.Boolean,System.Boolean)">
            <summary>
            创建字典缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isReset">是否初始化</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionaryArrayWhere``1(System.Func{`0,``0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            创建字典缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isValue">数据匹配器</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionary``1(System.Func{`0,``0},System.Boolean,System.Boolean)">
            <summary>
            创建字典缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isReset">是否初始化</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateDictionaryWhere``1(System.Func{`0,``0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            创建字典缓存
            </summary>
            <typeparam name="keyType"></typeparam>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isValue">数据匹配器</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateSearchTreeWhere``1(System.Func{`0,``0},System.Func{`0,System.Boolean})">
            <summary>
            创建搜索树缓存
            </summary>
            <typeparam name="sortType">排序关键字类型</typeparam>
            <param name="getSort">排序关键字获取器</param>
            <param name="isValue">数据匹配器</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateSearchTreeWhere``2(System.Func{`0,``0},System.Func{`0,``1},System.Func{`0,System.Boolean})">
            <summary>
            创建搜索树缓存
            </summary>
            <typeparam name="sortType1">排序关键字类型</typeparam>
            <typeparam name="sortType2">排序关键字类型</typeparam>
            <param name="getSort1">排序关键字获取器</param>
            <param name="getSort2">排序关键字获取器</param>
            <param name="isValue">数据匹配器</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateArraySearchTreeDictionary``1(System.Func{`0,System.Int32},System.Int32,System.Func{`0,``0},System.Boolean,System.Boolean)">
            <summary>
            创建数组+搜索树缓存
            </summary>
            <typeparam name="sortType"></typeparam>
            <param name="getIndex">数组索引获取器</param>
            <param name="arraySize">数组容器大小</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isReset">是否初始化</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.CreateArraySearchTreeWhere``1(System.Func{`0,System.Int32},System.Int32,System.Func{`0,``0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            创建数组+搜索树缓存
            </summary>
            <typeparam name="sortType"></typeparam>
            <param name="getIndex">数组索引获取器</param>
            <param name="arraySize">数组容器大小</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isValue">缓存值判定</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.Cache`2.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ValueCount">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Whole.Event.Cache`2.OnInserted">
            <summary>
            添加记录事件
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Whole.Event.Cache`2.OnUpdated">
            <summary>
            更新记录事件 [缓存数据 + 更新后的数据 + 更新前的数据 + 更新数据成员]
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Whole.Event.Cache`2.OnDeleted">
            <summary>
            删除记录事件
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask">
            <summary>
            重置缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.cache">
            <summary>
            SQL 表格缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.Query">
            <summary>
            查询信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            重置缓存
            </summary>
            <param name="cache"></param>
            <param name="where"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            重置缓存
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`2.ResetTask.Wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`3.GetMemberCache">
            <summary>
            获取成员缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`3.setMemberCache">
            <summary>
            设置成员缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`3.setMemberCacheValue">
            <summary>
            设置成员缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Cache`3.GetAllMemberCache">
            <summary>
            获取所有成员缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="memberCache"></param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`3.setMemberCacheAndValue(`0)">
            <summary>
            设置成员缓存与数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Cache`3.getAllMemberCache">
            <summary>
            所有成员缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Key`4.GetKey">
            <summary>
            键值获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Key`4.GetMemberCacheByKey">
            <summary>
            获取成员缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Key`4.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Func{`1,`3},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="memberCache"></param>
            <param name="getKey">键值获取器</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Key`4.getMemberCacheByKey(`3)">
            <summary>
            获取成员缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.Key`4.CreateMemberDictionary``3(AutoCSer.Sql.Cache.Whole.Event.Key{``0,``1,``2,`3},System.Func{`1,`3},System.Linq.Expressions.Expression{System.Func{``2,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`3},`0}}},System.Boolean,System.Boolean)">
            <summary>
            创建分组字典缓存
            </summary>
            <typeparam name="targetType">目标表格类型</typeparam>
            <typeparam name="targetModelType">目标模型类型</typeparam>
            <typeparam name="targetMemberCacheType">目标缓存绑定类型</typeparam>
            <param name="targetCache">目标缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="member">缓存字段表达式</param>
            <param name="isReset">是否绑定事件并重置数据</param>
            <param name="isSave">是否保存缓存对象防止被垃圾回收</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.Key`4.Item(`3)">
            <summary>
            获取数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据</returns>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.baseIdentity">
            <summary>
            基础ID
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32,System.Int32)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="memberCache"></param>
            <param name="group">数据分组</param>
            <param name="baseIdentity">基础ID</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.CreateCounter(System.Linq.Expressions.Expression{System.Func{`2,AutoCSer.KeyValue{`0,System.Int32}}},System.Int32)">
            <summary>
            创建自增id标识缓存计数器
            </summary>
            <param name="member">缓存字段表达式</param>
            <param name="group">数据分组</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.CreateCounterMemberQueue(System.Linq.Expressions.Expression{System.Func{`2,AutoCSer.KeyValue{`0,System.Int32}}},System.Linq.Expressions.Expression{System.Func{`2,`0}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Int32,System.Int32)">
            <summary>
            创建先进先出优先队列缓存
            </summary>
            <param name="member">缓存字段表达式</param>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="group">数据分组</param>
            <param name="maxCount">缓存默认最大容器大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.Update(`0,AutoCSer.Metadata.MemberMap{`1},System.Boolean)">
            <summary>
            修改数据库记录
            </summary>
            <param name="value">待修改数据</param>
            <param name="memberMap">需要修改的字段成员位图</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.Update(`0,AutoCSer.Metadata.MemberMap{`1},System.Action{`0},System.Boolean)">
            <summary>
            修改数据库记录
            </summary>
            <param name="value">待修改数据</param>
            <param name="memberMap">需要修改的字段成员位图</param>
            <param name="onUpdated">更新数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务（不是数据库事务）</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.Delete(System.Int32,System.Boolean)">
            <summary>
            删除数据库记录
            </summary>
            <param name="identity"></param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.Delete(System.Int32,System.Action{`0},System.Boolean)">
            <summary>
            删除数据库记录
            </summary>
            <param name="identity"></param>
            <param name="onDeleted">删除数据回调</param>
            <param name="isIgnoreTransaction">是否忽略应用程序事务</param>
            <returns>是否成功</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.IdentityMemberMap`3.ValueCount">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityCache`3.Array">
            <summary>
            缓存数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityCache`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="memberCache"></param>
            <param name="baseIdentity">基础ID</param>
            <param name="group">数据分组</param>
            <param name="isEvent">是否绑定更新事件</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityCache`3.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.IdentityCache`3.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.IdentityCache`3.Item(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="identity">数据自增ID</param>
            <returns>数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32,System.Int32,System.Boolean)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="memberCache">成员缓存</param>
            <param name="group">数据分组</param>
            <param name="baseIdentity">基础ID</param>
            <param name="isReset">是否初始化事件与数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`3.reset(AutoCSer.LeftArray{`0})">
            <summary>
            重新加载数据
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`3.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`3.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`3.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            自增ID整表数组缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberCache"></param>
            <param name="isValue">数据匹配器,必须保证更新数据的匹配一致性</param>
            <param name="baseIdentity">基础ID</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`3.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`3.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`2">
            <summary>
            自增ID整表数组缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            自增ID整表数组缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="isValue">数据匹配器,必须保证更新数据的匹配一致性</param>
            <param name="baseIdentity">基础ID</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3">
            <summary>
            自增ID整表数组缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Func{`0,System.Boolean},System.Int32,System.Int32)">
            <summary>
            自增ID整表数组缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberCache"></param>
            <param name="isValue">数据匹配器,必须保证更新数据的匹配一致性</param>
            <param name="baseIdentity">基础ID</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`2">
            <summary>
            自增ID整表数组缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Func{`0,System.Boolean},System.Int32,System.Int32)">
            <summary>
            自增ID整表数组缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="isValue">数据匹配器,必须保证更新数据的匹配一致性</param>
            <param name="baseIdentity">基础ID</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`2">
            <summary>
            自增ID整表数组缓存
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityArray`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32,System.Int32,System.Boolean)">
            <summary>
            SQL操作缓存
            </summary>
            <param name="table">SQL操作工具</param>
            <param name="group">数据分组</param>
            <param name="baseIdentity">基础ID</param>
            <param name="isReset">是否初始化事件与数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Queue`5">
            <summary>
            先进先出优先队列缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="counterKeyType">缓存统计关键字类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="cacheValueType">缓存数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Cache`3">
            <summary>
            计数缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Cache`3.counter">
            <summary>
            缓存计数器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Cache`3.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2})">
            <summary>
            计数缓存
            </summary>
            <param name="counter">缓存计数器</param>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`5.getKey">
            <summary>
            缓存关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`5.queueCache">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`5.maxCount">
            <summary>
            缓存默认最大容器大小
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`5.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2},System.Func{`1,`3},System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`5.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2},System.Linq.Expressions.Expression{System.Func{`1,`3}},System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Queue`3">
            <summary>
            先进先出优先队列缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`3.getValue">
            <summary>
            数据获取器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2},AutoCSer.Sql.Table{`0,`1,`2}.GetValue,System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getValue">数据获取器,禁止数据库与锁操作</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.onInserted(`0,`2)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
            <param name="key">关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue">缓存数据</param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.get(System.Data.Common.DbConnection@,`2)">
            <summary>
            获取缓存数据
            </summary>
            <param name="connection"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.Queue`3.Item(`2)">
            <summary>
            缓存数据
            </summary>
            <param name="key">关键字</param>
            <returns>缓存数据</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.#ctor(AutoCSer.Sql.Cache.Counter.Queue{`0,`1,`2},`2)">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Queue`3.GetTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueue`2">
            <summary>
            先进先出优先队列缓存
            </summary>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="cacheValueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.getMemberValue">
            <summary>
            获取节点数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.setMemberValue">
            <summary>
            设置节点数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.getPrevious">
            <summary>
            获取前一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.setPrevious">
            <summary>
            设置前一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.getNext">
            <summary>
            获取后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.setNext">
            <summary>
            设置后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.header">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.end">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.maxCount">
            <summary>
            缓存默认最大容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`2.count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Int32)">
            <summary>
            先进先出优先队列缓存(非计数缓存)
            </summary>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`2.removeCounter(`0)">
            <summary>
            删除节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`2.get(`0)">
            <summary>
            获取缓存数据
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`2.appendNode(`0,`1)">
            <summary>
            添加节点
            </summary>
            <param name="node"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`2.removeNode(`0)">
            <summary>
            删除节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueue`7">
            <summary>
            先进先出优先队列缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="couterKeyType"></typeparam>
            <typeparam name="counterTargetType"></typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="cacheValueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`7.counter">
            <summary>
            缓存计数器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`7.getKey">
            <summary>
            缓存关键字获取器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`7.#ctor(AutoCSer.Sql.Cache.Counter.Event.Member{`0,`1,`2,`3,`4},System.Func{`1,`5},System.Linq.Expressions.Expression{System.Func{`2,`6}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueue`4">
            <summary>
            先进先出优先队列缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`4.getValue">
            <summary>
            数据获取器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.#ctor(AutoCSer.Sql.Cache.Counter.Event.Member{`0,`1,`2,`3,`2},AutoCSer.Sql.Table{`0,`1,`3}.GetValue,System.Linq.Expressions.Expression{System.Func{`2,`0}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getValue">数据获取器,禁止数据库与锁操作</param>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.removeCounter(`2)">
            <summary>
            删除节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.get(System.Data.Common.DbConnection@,`2,`3)">
            <summary>
            获取缓存数据
            </summary>
            <param name="connection"></param>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.MemberQueue`4.Item(`3)">
            <summary>
            缓存数据
            </summary>
            <param name="key">关键字</param>
            <returns>缓存数据</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.node">
            <summary>
            成员缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.#ctor(AutoCSer.Sql.Cache.Counter.MemberQueue{`0,`1,`2,`3},`2,`3)">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueue`4.GetTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.ClientKindAttribute">
            <summary>
            SQL 客户端类型默认配置信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKindAttribute.ClientType">
            <summary>
            SQL 客户端处理类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKindAttribute.ConverterType">
            <summary>
            SQL 常量转换处理类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKindAttribute.IgnoreCase">
            <summary>
            名称是否忽略大小写
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ClientKind">
            <summary>
            SQL 客户端类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKind.ThirdParty">
            <summary>
            第三方
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKind.Sql2000">
            <summary>
            SQL Server2000
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKind.Sql2005">
            <summary>
            SQL Server2005
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKind.Sql2008">
            <summary>
            SQL Server2008
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKind.Sql2012">
            <summary>
            SQL Server2012
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ClientKind.Excel">
            <summary>
            Excel
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.MemberAttribute">
            <summary>
            数据列配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.DefaultDataMember">
            <summary>
            数据库成员信息空值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.DataType">
            <summary>
            数据库字段类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.EnumType">
            <summary>
            枚举真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.UpdateValue">
            <summary>
            新增字段时的计算子查询
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.IsAscii">
            <summary>
            字符串是否ASCII
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.IsIgnoreMaxStringLength">
            <summary>
            是否忽略字符串最大长度提示
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.IsMemberIndex">
            <summary>
            是否生成成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberAttribute.IsNowTime">
            <summary>
            是否生成当前时间
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MemberAttribute.Get(AutoCSer.Metadata.MemberIndexInfo)">
            <summary>
            获取数据库成员信息
            </summary>
            <param name="member">成员信息</param>
            <returns>数据库成员信息</returns>
        </member>
        <member name="P:AutoCSer.Sql.MemberAttribute.IsDefaultMember">
            <summary>
            是否数据库成员信息空值
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.CountAttribute">
            <summary>
            计数成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.CountAttribute.ReadServerName">
            <summary>
            计数读取服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.CountAttribute.WriteServerName">
            <summary>
            计数更新服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.CountAttribute.Timeout">
            <summary>
            计数成员超时秒数，默认为 0 表示非计数成员
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Where">
            <summary>
            关键字条件动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Where.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Where.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Where.updateDynamicMethod">
            <summary>
            更新数据动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Where.isNextMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Where.#ctor(System.Type,AutoCSer.Sql.ColumnAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Where.Push(AutoCSer.Sql.Field,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="index">字段名称序号</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Where.Create``1">
            <summary>
            创建 SQL 条件委托
            </summary>
            <returns>SQL 条件委托</returns>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1">
            <summary>
            数据列
            </summary>
            <summary>
            数据列
            </summary>
            <summary>
            数据列
            </summary>
            <summary>
            数据列
            </summary>
            <summary>
            数据列
            </summary>
            <summary>
            数据列
            </summary>
            <summary>
            数据列
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.attribute">
            <summary>
            SQL列配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.custom">
            <summary>
            自定义类型处理接口
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.dataColumns">
            <summary>
            数据列名与类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.GetDataColumns(System.String)">
            <summary>
            获取成员名称与类型集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.Where">
            <summary>
            条件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Where.Write(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter,System.String)">
            <summary>
            条件SQL流
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
            <param name="columnName">列名前缀</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Where.writer">
            <summary>
            条件SQL流
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer">
            <summary>
            数据列验证
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer.columnNames">
            <summary>
            数据列名集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer.GetColumnNames(System.String)">
            <summary>
            获取列名集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer.verifyFields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer.Verify(`0,AutoCSer.Sql.Table,System.String)">
            <summary>
            数据验证
            </summary>
            <param name="value"></param>
            <param name="sqlTool"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Verifyer.verifyer">
            <summary>
            数据验证
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.Inserter">
            <summary>
            数据列添加SQL流
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Inserter.columnNames">
            <summary>
            数据列名集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Inserter.GetColumnNames(System.String)">
            <summary>
            获取列名集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Inserter.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Inserter.Insert(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter)">
            <summary>
            获取插入数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Inserter.inserter">
            <summary>
            获取插入数据SQL表达式
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.Updater">
            <summary>
            数据列更新SQL流
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Updater.columnNames">
            <summary>
            数据列名集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Updater.GetColumnNames(System.String)">
            <summary>
            获取列名集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Updater.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Updater.Update(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter,System.String)">
            <summary>
            获取更新数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
            <param name="columnName">列名前缀</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Updater.updater">
            <summary>
            获取更新数据SQL表达式
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.ToArray">
            <summary>
            数据列转换数组
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.ToArray.Write(`0,System.Object[],System.Int32@)">
            <summary>
            数据列转换数组
            </summary>
            <param name="values">目标数组</param>
            <param name="value">数据列</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.ToArray.defaultWriter">
            <summary>
            数据列转换数组
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.ToArray.Writer">
            <summary>
            数据列转换数组
            </summary>
            <param name="values">目标数组</param>
            <param name="value">数据列</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.Setter">
            <summary>
            数据列设置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column`1.Setter.Set(System.Data.Common.DbDataReader,`0@,System.Int32@)">
            <summary>
            设置字段值
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column`1.Setter.defaultSetter">
            <summary>
            默认数据列设置
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column`1.Setter.SetValue">
            <summary>
            设置字段值
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Verifyer">
            <summary>
            数据列验证动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.attribute">
            <summary>
            数据列配置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.#ctor(System.Type,AutoCSer.Sql.ColumnAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.Push(AutoCSer.Sql.Field,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="index">名称序号</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.typeVerifyers">
            <summary>
            类型调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.GetTypeVerifyer(System.Type)">
            <summary>
            类型委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>类型委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.verify``1(``0,AutoCSer.Sql.Table,System.String)">
            <summary>
            数据验证
            </summary>
            <param name="value"></param>
            <param name="sqlTool"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.verifyMethod">
            <summary>
            数据验证函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.getColumnNameMethods">
            <summary>
            获取列名委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.GetColumnNames(System.Type)">
            <summary>
            获取列名委托
            </summary>
            <param name="type">数据列类型</param>
            <returns>获取列名委托</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.getColumnNames``1(AutoCSer.LeftArray{System.String}@,System.String)">
            <summary>
            获取列名集合
            </summary>
            <param name="names">列名集合</param>
            <param name="name">列名前缀</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Verifyer.getColumnNamesMethod">
            <summary>
            获取列名集合函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Verifyer.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Verifyer.GetName">
            <summary>
            获取列名委托
            </summary>
            <param name="names"></param>
            <param name="name"></param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Inserter">
            <summary>
            数据列添加SQL流动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.attribute">
            <summary>
            数据列配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.isNextMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.#ctor(System.Type,AutoCSer.Sql.ColumnAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.typeInserts">
            <summary>
            类型调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.GetTypeInsert(System.Type)">
            <summary>
            类型委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>类型委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.insert``1(AutoCSer.CharStream,``0,AutoCSer.Sql.ConstantConverter)">
            <summary>
            获取插入数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.insertMethod">
            <summary>
            获取插入数据SQL表达式函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.getColumnNameMethods">
            <summary>
            获取列名委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.GetColumnNames(System.Type)">
            <summary>
            获取列名委托
            </summary>
            <param name="type">数据列类型</param>
            <returns>获取列名委托</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.getColumnNames``1(System.String)">
            <summary>
            获取列名集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Inserter.getColumnNamesMethod">
            <summary>
            获取列名集合函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Inserter.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.Type">
            <summary>
            默认缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.Unknown">
            <summary>
            未知/自定义缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.IdentityArray">
            <summary>
            将 ID 作为数组索引的缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityArray&lt;valueType, modelType, valueType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.IdentityTree">
            <summary>
            将 ID 作为数组索引并且支持分页查询的缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityTree&lt;valueType, modelType, valueType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.PrimaryKeyArray">
            <summary>
            K-V 缓存， AutoCSer.Sql.Cache.Whole.Event.PrimaryKey&lt;valueType, modelType, valueType, keyType&gt;[256]
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.PrimaryKey">
            <summary>
            K-V 缓存， AutoCSer.Sql.Cache.Whole.Event.PrimaryKey&lt;valueType, modelType, valueType, keyType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreateIdentityArray">
            <summary>
            将 ID 作为数组索引的缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityArray&lt;valueType, modelType, valueType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreateIdentityArrayWhere">
            <summary>
            将 ID 作为数组索引的缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhere&lt;valueType, modelType, valueType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreateIdentityArrayWhereExpression">
            <summary>
            将 ID 作为数组索引的缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityArrayWhereExpression&lt;valueType, modelType, valueType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreateIdentityTree">
            <summary>
            将 ID 作为数组索引并且支持分页查询的缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityTree&lt;valueType, modelType, valueType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreatePrimaryKeyArray">
            <summary>
            K-V 缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityTree&lt;valueType, modelType, valueType, keyType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreatePrimaryKey">
            <summary>
            K-V 缓存， AutoCSer.Sql.Cache.Whole.Event.IdentityTree&lt;valueType, modelType, valueType, keyType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.CreateMemberKey">
            <summary>
            成员绑定缓存， AutoCSer.Sql.Cache.Whole.Event.MemberKey&lt;valueType, modelType, memberCacheType, keyType, memberKeyType, targetType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.Type.Custom">
            <summary>
            自定义缓存，用于生成基于缓存的远程调用链与日志流处理，需要继承自 AutoCSer.Sql.Cache.Whole.Event.Cache&lt;valueType, modelType&gt;
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionaryArray`3">
            <summary>
            字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.getKey">
            <summary>
            分组字典关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.Array">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Boolean)">
            <summary>
            字典缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.DictionaryArray`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionaryWhere`3">
            <summary>
            数组+搜索树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3">
            <summary>
            数组+搜索树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.getIndex">
            <summary>
            数组索引获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.getSort">
            <summary>
            排序关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.treeArray">
            <summary>
            数组+搜索树缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,System.Int32},System.Int32,System.Func{`0,`2},System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getIndex">数组索引获取器</param>
            <param name="arraySize">数组大小</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.onInserted(`0,System.Int32)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.onDeleted(`0,System.Int32)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.GetCount(System.Int32)">
            <summary>
            获取数据数量
            </summary>
            <param name="index">数组索引</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.GetPage(System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="index">数组索引</param>
            <param name="pageSize">分页长度</param>
            <param name="currentPage">分页页号</param>
            <param name="count">记录总数</param>
            <param name="isDesc">是否逆序</param>
            <returns>分页记录集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.GetArray(System.Int32)">
            <summary>
            获取数据集合
            </summary>
            <param name="index">数组索引</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.CountLess(System.Int32,`2)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="index">数组索引</param>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionary`3.CountThan(System.Int32,`2)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="index">数组索引</param>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionaryWhere`3.isValue">
            <summary>
            缓存值判定
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionaryWhere`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,System.Int32},System.Int32,System.Func{`0,`2},System.Func{`0,System.Boolean})">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getIndex">数组索引获取器</param>
            <param name="arraySize">数组容器大小</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isValue">缓存值判定</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionaryWhere`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionaryWhere`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArraySearchTreeDictionaryWhere`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.QueueExpression`5">
            <summary>
            先进先出优先队列缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="counterKeyType">缓存统计关键字类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="cacheValueType">缓存数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueExpression`5.getWhere">
            <summary>
            条件表达式获取器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueExpression`5.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2},System.Linq.Expressions.Expression{System.Func{`1,`3}},System.Int32,System.Func{`3,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}})">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="maxCount">缓存默认最大容器大小</param>
            <param name="getWhere">条件表达式获取器</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.TimerWhere`2">
            <summary>
            缓存时间事件
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="modelType"></typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Timer`2">
            <summary>
            缓存时间事件
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="modelType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.getTime">
            <summary>
            时间获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.runTimeHandle">
            <summary>
            事件委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.run">
            <summary>
            事件委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.minTime">
            <summary>
            最小事件时间
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.times">
            <summary>
            事件时间集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Timer`2.timeLock">
            <summary>
            事件时间访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Timer`2.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,System.DateTime},System.Action,System.Boolean)">
            <summary>
            缓存时间事件
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getTime">时间获取器</param>
            <param name="run">事件委托</param>
            <param name="isReset">是否绑定事件与重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Timer`2.Append(System.DateTime)">
            <summary>
            添加事件时间
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Timer`2.runTime">
            <summary>
            时间事件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Timer`2.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Timer`2.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.TimerWhere`2.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.TimerWhere`2.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,System.DateTime},System.Action,System.Func{`0,System.Boolean})">
            <summary>
            缓存时间事件
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getTime">时间获取器</param>
            <param name="run">事件委托</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.TimerWhere`2.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.TimerWhere`2.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.IdentityClient`2">
            <summary>
            自增标识客户端
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Client`3">
            <summary>
            日志流客户端
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">数据模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Client`2">
            <summary>
            日志流客户端
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Client">
            <summary>
            日志流客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client.log">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client.isLoaded">
            <summary>
            数据是否加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client.#ctor(AutoCSer.Log.ILog)">
            <summary>
            日志流客户端
            </summary>
            <param name="log">日志处理</param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Client.Getter">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client.Getter.keepCallback">
            <summary>
            日志流处理保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client.Getter.isError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client.Getter.isLoaded">
            <summary>
            数据是否加载完成
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client`2.getLog">
            <summary>
            获取日志数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client`2.custom">
            <summary>
            客户端自定义绑定
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`2.#ctor">
            <summary>
            日志流客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`2.#ctor(System.Func{System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data}},AutoCSer.Net.TcpServer.KeepCallback},AutoCSer.Sql.LogStream.Client{`0,`1}.Custom,AutoCSer.Log.ILog)">
            <summary>
            日志流客户端
            </summary>
            <param name="getLog">获取日志数据委托</param>
            <param name="custom">客户端自定义绑定</param>
            <param name="log">日志处理</param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Client`2.Custom">
            <summary>
            客户端自定义绑定
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`2.Custom.Load(System.Collections.Generic.ICollection{`0})">
            <summary>
            重新加载数据
            </summary>
            <param name="values">初始化数据</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`2.Custom.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`2.Custom.Update(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新之前的数据</param>
            <param name="updateValue">准备更新的数据</param>
            <param name="memberMap">准备更新的数据成员</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`2.Custom.Delete(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client`2.Custom.Null">
            <summary>
            虚拟客户端自定义绑定
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client`3.getValue">
            <summary>
            获取数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client`3.getValueAwaiter">
            <summary>
            获取数据委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Client`3.getKey">
            <summary>
            获取关键字委托
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`3.#ctor">
            <summary>
            日志流客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Client`3.#ctor(System.Func{System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data}},AutoCSer.Net.TcpServer.KeepCallback},System.Func{`1,`2},System.Func{`2,AutoCSer.Net.TcpServer.ReturnValue{`0}},System.Func{`2,AutoCSer.Net.TcpServer.AwaiterBox{`0}},AutoCSer.Sql.LogStream.Client{`0,`1}.Custom,AutoCSer.Log.ILog)">
            <summary>
            日志流客户端
            </summary>
            <param name="getLog">获取日志数据委托</param>
            <param name="getKey">获取关键字委托</param>
            <param name="getValue">获取数据委托</param>
            <param name="getValueAwaiter">获取数据委托</param>
            <param name="custom">客户端自定义绑定</param>
            <param name="log">日志处理</param>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.IdentityClient`2.Null">
            <summary>
            虚拟空日志流客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.IdentityClient`2.getter">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.IdentityClient`2.array">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.IdentityClient`2.maxIdentity">
            <summary>
            最大自增标识
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.#ctor">
            <summary>
            虚拟空日志流客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.#ctor(System.Func{System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data}},AutoCSer.Net.TcpServer.KeepCallback},System.Func{System.Int32,AutoCSer.Net.TcpServer.ReturnValue{`0}},System.Func{System.Int32,AutoCSer.Net.TcpServer.AwaiterBox{`0}},AutoCSer.Sql.LogStream.Client{`0,`1}.Custom,AutoCSer.Log.ILog)">
            <summary>
            日志流客户端
            </summary>
            <param name="getLog">获取日志数据委托</param>
            <param name="getValue">获取数据委托</param>
            <param name="getValueAwaiter">获取数据委托</param>
            <param name="custom">客户端自定义绑定</param>
            <param name="log">日志处理</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.CreateNull(System.Type,AutoCSer.Sql.LogStream.Client{`0,`1}.Custom,AutoCSer.Log.ILog)">
            <summary>
            虚拟客户端创建自增标识客户端
            </summary>
            <param name="tcpCallType">TCP 调用类型</param>
            <param name="custom">客户端自定义绑定</param>
            <param name="log">日志处理</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.onError">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.load(AutoCSer.LeftArray{`0}@)">
            <summary>
            加载数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.onLog(AutoCSer.Sql.LogStream.Log{`0,`1}.Data@)">
            <summary>
            日志流数据处理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.Get(System.Int32,`0@)">
            <summary>
            获取数据，尽量不要在 .NET 4.0 及以下版本中使用
            </summary>
            <param name="identity"></param>
            <param name="value"></param>
            <returns>null 表示已经同步获取数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.Get(AutoCSer.Net.TcpServer.ReturnValue{System.Int32[]})">
            <summary>
            获取数据集合
            </summary>
            <param name="identitys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.Get(System.Int32[])">
            <summary>
            获取数据集合
            </summary>
            <param name="identitys"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.LogStream.IdentityClient`2.Item(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.LogStream.IdentityClient`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.IdentityClient`2.Getter">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.IdentityClient`2.Getter.client">
            <summary>
            自增标识客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.IdentityClient`2.Getter.array">
            <summary>
            加载数据缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.Getter.#ctor(AutoCSer.Sql.LogStream.IdentityClient{`0,`1})">
            <summary>
            自增标识客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.Getter.error">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.IdentityClient`2.Getter.onLog(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data})">
            <summary>
            日志流数据处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Sql.ExpressionCall">
            <summary>
            SQL函数调用
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ExpressionCall.Count``1(``0)">
            <summary>
            计数
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns>计数</returns>
        </member>
        <member name="M:AutoCSer.Sql.ExpressionCall.Sum``1(``0)">
            <summary>
            求和
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns>求和</returns>
        </member>
        <member name="M:AutoCSer.Sql.ExpressionCall.GetDate">
            <summary>
            获取当前时间
            </summary>
            <returns>当前时间</returns>
        </member>
        <member name="M:AutoCSer.Sql.ExpressionCall.In``1(``0,``0[])">
            <summary>
            IN表达式
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value">数值</param>
            <param name="values">数值集合</param>
            <returns>是否包含数值</returns>
        </member>
        <member name="T:AutoCSer.Sql.ColumnBuilder">
            <summary>
            SQL列转换
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnBuilder.Client">
            <summary>
            SQL 客户端操作
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnBuilder.Columns">
            <summary>
            数据列集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnBuilder.Append(AutoCSer.Sql.Column)">
            <summary>
            SQL列转换
            </summary>
            <param name="column">数据列</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnBuilder.get(System.Type)">
            <summary>
            获取SQL列转换集合
            </summary>
            <param name="type">SQL列类型</param>
            <returns>SQL列转换集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnBuilder.getNoLock(System.Type)">
            <summary>
            获取SQL列转换集合
            </summary>
            <param name="type">SQL列类型</param>
            <returns>SQL列转换集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnBuilder.append(System.Type)">
            <summary>
            添加SQL列类型
            </summary>
            <param name="type">SQL列类型</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnBuilder.sqlColumns">
            <summary>
            SQL列转换类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnBuilder.sqlColumnLock">
            <summary>
            SQL列转换类型集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnBuilder.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnAttribute">
            <summary>
            数据列配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnAttribute.Default">
            <summary>
            默认空属性
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnAttribute.IsNullStringEmpty">
            <summary>
            null 字符串是否转换为 string.Empty
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3">
            <summary>
            自增 ID 整表排序树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.counts">
            <summary>
            排序树节点数量集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.size">
            <summary>
            排序树容器数量
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32,System.Int32)">
            <summary>
            自增ID整表数组缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberCache">成员缓存</param>
            <param name="group">数据分组</param>
            <param name="baseIdentity">基础ID</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.onDelete(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.getIndex(System.Int32)">
            <summary>
            获取记录起始位置
            </summary>
            <param name="skipCount">跳过记录数</param>
            <returns>起始位置</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.getPage(System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="pageSize">分页长度</param>
            <param name="currentPage">分页页号</param>
            <param name="count">记录总数</param>
            <returns>分页记录集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.getPageDesc(System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="pageSize">分页长度</param>
            <param name="currentPage">分页页号</param>
            <param name="count">记录总数</param>
            <returns>分页记录集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.GetPage(System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="pageSize">分页长度</param>
            <param name="currentPage">分页页号</param>
            <param name="count">记录总数</param>
            <param name="isDesc">是否逆序</param>
            <returns>分页记录集合</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.PageTask">
            <summary>
            获取分页记录集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.PageTask.tree">
            <summary>
            自增 ID 整表排序树缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.PageTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.PageTask.#ctor(AutoCSer.Sql.Cache.Whole.Event.IdentityTree{`0,`1,`2},System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="tree"></param>
            <param name="pageSize"></param>
            <param name="currentPage"></param>
            <param name="isDesc"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.PageTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`3.PageTask.Wait(System.Int32@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`2">
            <summary>
            自增ID整表排序树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.IdentityTree`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32,System.Int32)">
            <summary>
            自增ID整表数组缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="group">数据分组</param>
            <param name="baseIdentity">基础ID</param>
        </member>
        <member name="T:AutoCSer.Extension.Type_Sql">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Type_Sql.toNullableType(System.Type)">
            <summary>
            值类型转换为可空类型
            </summary>
            <param name="type">值类型</param>
            <returns>可空类型,失败返回null</returns>
        </member>
        <member name="T:AutoCSer.Emit.NullableConstructor">
            <summary>
            可空类型构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NullableConstructor.Constructors">
            <summary>
            可空类型构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Threading.QueueTask">
            <summary>
            SQL 队列任务
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.QueueTask.RunTask">
            <summary>
            运行任务
            </summary>
            <returns>下一个 SQL 队列任务</returns>
        </member>
        <member name="M:AutoCSer.Sql.Threading.QueueTask.Add(System.Action)">
            <summary>
            添加任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.QueueTask.Add``1(System.Action{``0},``0)">
            <summary>
            添加任务
            </summary>
            <param name="action">任务执行委托</param>
            <param name="parameter">参数</param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.QueueTask.Add``1(System.Action{``0},``0@)">
            <summary>
            添加任务
            </summary>
            <param name="action">任务执行委托</param>
            <param name="parameter">参数</param>
        </member>
        <member name="T:AutoCSer.Sql.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.ConfigLoader.Config">
            <summary>
            SQL 配置
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberArrayList`4">
            <summary>
            分组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.getIndex">
            <summary>
            数组索引获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.arraySize">
            <summary>
            数组容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.isRemoveEnd">
            <summary>
            移除数据并使用最后一个数据移动到当前位置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`0,System.Int32},System.Int32,System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.ListArray{`0}[]}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Boolean,System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getIndex">获取数组索引</param>
            <param name="arraySize">数组容器大小</param>
            <param name="getValue"></param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.onInserted(`0,`2,System.Int32)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.onDeleted(`0,`2,System.Int32)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除的数据关键字</param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayList`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.ArrayList`2">
            <summary>
            数组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArrayList`2.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArrayList`2.getIndex">
            <summary>
            数组索引获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArrayList`2.array">
            <summary>
            分组数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.ArrayList`2.isRemoveEnd">
            <summary>
            移除数据并使用最后一个数据移动到当前位置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,System.Int32},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getIndex">数组索引获取器</param>
            <param name="arraySize">数组容器大小</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.onInserted(`0,System.Int32)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.onDeleted(`0,System.Int32)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.GetPage(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页数据
            </summary>
            <param name="index">数组索引</param>
            <param name="pageSize">分页长度</param>
            <param name="currentPage">分页页号</param>
            <param name="count">记录总数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.ArrayList`2.GetPageDesc(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取逆序分页数据
            </summary>
            <param name="index">数组索引</param>
            <param name="pageSize">分页长度</param>
            <param name="currentPage">分页页号</param>
            <param name="count">记录总数</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Type">
            <summary>
            计数缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.Unknown">
            <summary>
            未知/自定义缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.IdentityCounter">
            <summary>
            ID 计数缓存，AutoCSer.Sql.Cache.Counter.Event.Identity&lt;valueType, modelType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.PrimaryKeyCounter">
            <summary>
            关键字计数缓存，AutoCSer.Sql.Cache.Counter.Event.PrimaryKey&lt;valueType, modelType, primaryKey&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.CreateIdentityCounterMemberQueue">
            <summary>
            先进先出优先队列缓存，AutoCSer.Sql.Cache.Counter.MemberQueue&lt;valueType, modelType, memberCacheType, int&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.CreateIdentityCounterQueue">
            <summary>
            先进先出优先队列缓存，AutoCSer.Sql.Cache.Counter.Queue&lt;valueType, modelType, int&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.CreateIdentityCounterQueueList">
            <summary>
            先进先出优先队列缓存，AutoCSer.Sql.Cache.Counter.QueueList&lt;valueType, modelType, counterKeyType, keyType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.CreatePrimaryKeyCounterQueue">
            <summary>
            先进先出优先队列缓存，AutoCSer.Sql.Cache.Counter.Queue&lt;valueType, modelType, primaryKey&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.CreatePrimaryKeyCounterQueueList">
            <summary>
            先进先出优先队列缓存，AutoCSer.Sql.Cache.Counter.QueueList&lt;valueType, modelType, primaryKey, keyType&gt;
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Type.CreatePrimaryKeyCounterQueueDictionary">
            <summary>
            先进先出优先队列缓存，AutoCSer.Sql.Cache.Counter.QueueDictionary&lt;valueType, modelType, primaryKey, keyType, dictionaryKeyType&gt;
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogAttribute">
            <summary>
            日志同步成员信息
            </summary>
            <summary>
            日志同步成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogAttribute.IsAwait">
            <summary>
            无意义，用于兼容 .NET 4.5 及以上版本
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogAttribute.CountType">
            <summary>
            计数完成类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogAttribute.CountTypeNumber">
            <summary>
            计数完成类型表格编号
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogAttribute.IsMember">
            <summary>
            SQL 数据库成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogAttribute.IsRemoteMethod">
            <summary>
            默认为 false 表示存在返回值并不带参数的时候生成远程属性
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.UpdateQuery`1">
            <summary>
            更新记录查询信息
            </summary>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.UpdateQuery`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UpdateQuery`1.Sql">
            <summary>
            查询语句
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UpdateQuery`1.UpdateSql">
            <summary>
            更新语句
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.UpdateQuery`1.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.UpdateQuery`1.ClearSql">
            <summary>
            清空 Sql 语句
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.UpdateQuery`1.Free">
            <summary>
            释放成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Threading.TaskQueue">
            <summary>
            SQL 队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.TaskQueue.#ctor(System.Boolean)">
            <summary>
            SQL 队列处理
            </summary>
            <param name="isBackground">是否后台线程</param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.TaskQueue.Add(AutoCSer.Sql.Threading.QueueTask)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.TaskQueue.run">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.TaskQueue.Default">
            <summary>
            SQL 队列处理
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.TaskQueue.Background">
            <summary>
            SQL 队列处理
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Threading.QueueTaskAction">
            <summary>
            任务信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.QueueTaskAction.Action">
            <summary>
            任务执行委托
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.QueueTaskAction.RunTask">
            <summary>
            运行任务
            </summary>
            <returns>下一个 SQL 队列任务</returns>
        </member>
        <member name="T:AutoCSer.Sql.Threading.QueueTaskAction`1">
            <summary>
            任务信息
            </summary>
            <typeparam name="parameterType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Threading.QueueTaskAction`1.Action">
            <summary>
            任务执行委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.QueueTaskAction`1.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.QueueTaskAction`1.RunTask">
            <summary>
            运行任务
            </summary>
            <returns>下一个 SQL 队列任务</returns>
        </member>
        <member name="T:AutoCSer.Sql.TableColumnCollection">
            <summary>
            表格信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableColumnCollection.Columns">
            <summary>
            列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableColumnCollection.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableColumnCollection.Identity">
            <summary>
            自增列
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableColumnCollection.Indexs">
            <summary>
            索引集合
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.IdentityName">
            <summary>
            默认自增ID列名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.FieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.DataMember">
            <summary>
            数据库成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.NullableDataType">
            <summary>
            可空类型数据库数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.DataType">
            <summary>
            数据库数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.DataReaderMethod">
            <summary>
            数据读取函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.ToSqlMethod">
            <summary>
            数据转换SQL字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.ToSqlCastMethod">
            <summary>
            数据转换SQL字符串之前的类型转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.ToModelCastMethod">
            <summary>
            数据转换成对象之前的类型转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.SqlFieldName">
            <summary>
            SQL名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.MemberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.IsSqlColumn">
            <summary>
            是否数据列
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.IsUnknownJson">
            <summary>
            是否默认JSON
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.IsNowTime">
            <summary>
            是否当前时间
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Field.#ctor(AutoCSer.Metadata.FieldIndex,AutoCSer.Sql.MemberAttribute)">
            <summary>
            字段信息
            </summary>
            <param name="field">字段信息</param>
            <param name="attribute">数据库成员信息</param>
        </member>
        <member name="F:AutoCSer.Sql.Field.getSqlColumnName">
            <summary>
            获取数据列名称
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Field.GetSqlColumnName">
            <summary>
            获取数据列名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.format(AutoCSer.Sql.MemberAttribute,System.Type,System.Boolean@)">
            <summary>
            格式化数据库成员信息
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="isSqlColumn"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.jsonSerialize``1(``0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="F:AutoCSer.Sql.Field.jsonSerializeMethod">
            <summary>
            对象转换JSON字符串函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Field.jsonParse``1(System.String)">
            <summary>
            Json解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="jsonString">Json字符串</param>
            <returns>目标数据</returns>
        </member>
        <member name="F:AutoCSer.Sql.Field.jsonParseMethod">
            <summary>
            Json解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.keywordSearcher">
            <summary>
            SQL 关键字搜索器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Field.toSqlName(System.String)">
            <summary>
            SQL名称关键字处理
            </summary>
            <param name="name"></param>
            <returns>SQL名称</returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.ToSqlName(System.String)">
            <summary>
            SQL名称关键字处理
            </summary>
            <param name="name"></param>
            <returns>SQL名称</returns>
        </member>
        <member name="F:AutoCSer.Sql.Field.sqlColumnTypes">
            <summary>
            数据列类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Field.isSqlColumn(System.Type)">
            <summary>
            是否有效数据列
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.Field.verifyTypes">
            <summary>  
            数据列验证类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Field.RefIntType">
            <summary>
            int引用参数类型
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Field.Get(AutoCSer.Metadata.FieldIndex[],System.Boolean)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="isColumn"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.GetIdentity(AutoCSer.Sql.Field[])">
            <summary>
            获取自增标识
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.GetPrimaryKeys(AutoCSer.Sql.Field[])">
            <summary>
            获取关键字集合
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.GetMemberIndexs``1(System.Type,``0)">
            <summary>
            获取数据库成员信息集合 
            </summary>
            <param name="type">数据库绑定类型</param>
            <param name="database">数据库配置</param>
            <returns>数据库成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.GetMembers(AutoCSer.Metadata.MemberIndexInfo[])">
            <summary>
            获取数据库成员信息集合
            </summary>
            <param name="members">成员集合</param>
            <returns>数据库成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Field.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="P:AutoCSer.Sql.Field.IsVerify">
            <summary>
            是否需要验证
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.ICustom`1">
            <summary>
            自定义类型处理接口
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.Set(System.Data.Common.DbDataReader,`0@,System.Int32@)">
            <summary>
            设置字段值
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.Verify(`0,AutoCSer.Sql.Table,System.String)">
            <summary>
            数据验证
            </summary>
            <param name="value"></param>
            <param name="sqlTool"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.GetColumnNames(System.String)">
            <summary>
            获取,分割列名集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.GetDataColumns(System.String)">
            <summary>
            获取成员名称与类型集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.Insert(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter)">
            <summary>
            获取插入数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.Update(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter,System.String)">
            <summary>
            获取更新数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
            <param name="columnName">列名前缀</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.ToArray(`0,System.Object[],System.Int32@)">
            <summary>
            读取字段值
            </summary>
            <param name="value">数据列</param>
            <param name="values">目标数组</param>
            <param name="index">当前写入位置</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ICustom`1.Where(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter,System.String)">
            <summary>
            获取添加SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
            <param name="columnName">列名前缀</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionaryArrayWhere`3">
            <summary>
            字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryArrayWhere`3.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArrayWhere`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Func{`0,System.Boolean})">
            <summary>
            字典缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArrayWhere`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArrayWhere`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryArrayWhere`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.DictionaryArray`2">
            <summary>
            字典数组
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.DictionaryArray`2.array">
            <summary>
            字典数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.DictionaryArray`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.DictionaryArray`2.Reset">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.DictionaryArray`2.Add(`0,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.DictionaryArray`2.Remove(`0,`1@)">
            <summary>
            删除数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.DictionaryArray`2.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.DictionaryArray`2.Item(`0)">
            <summary>
            获取数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据</returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig">
            <summary>
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.LinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.maxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.PushNotNull(AutoCSer.Metadata.MemberMapValueJsonSerializeConfig)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.pushLink(AutoCSer.Metadata.MemberMapValueJsonSerializeConfig,AutoCSer.Metadata.MemberMapValueJsonSerializeConfig,System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="pushCount">数据数量</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValueJsonSerializeConfig.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="saveCount">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.ModelAttribute">
            <summary>
            数据表格模型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.Default">
            <summary>
            默认空属性
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.LogServerName">
            <summary>
            日志队列 TCP 调用名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.DeleteColumnNames">
            <summary>
            删除列名称集合，对于组合列必须是数据库中的实际展开名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.CacheType">
            <summary>
            默认缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.CounterCacheType">
            <summary>
            默认计数缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsLogClientQueue">
            <summary>
            日志流是否客户端队列模式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsLoadedCache">
            <summary>
            默认为 true 表示生成加载缓存事件代码
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsMemberCache">
            <summary>
            是否绑定成员缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsLogMemberMap">
            <summary>
            默认为 true 表示日志序列化需要支持成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsLogSerializeReferenceMember">
            <summary>
            默认为 true 表示日志队列输出参数二进制序列化需要检测循环引用，如果可以保证参数没有循环引用而且对象无需重用则应该设置为 false 减少 CPU 开销。
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsLogClientGetCache">
            <summary>
            默认为 true 表示生成日志流客户端获取缓存调用
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsDefaultSerialize">
            <summary>
            默认为 true 生成默认序列化配置 [AutoCSer.Json.Serialize] + [AutoCSer.Json.Parse] + [AutoCSer.BinarySerialize.Serialize(IsReferenceMember = false)]
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsNullStringEmpty">
            <summary>
            默认为 true 表示 null 字符串自动转换为 string.Empty
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsDefaultSerializeIsMemberMap">
            <summary>
            默认二进制序列化是否序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsUpdateMemberMap">
            <summary>
            默认为 false 表示不生成数据更新成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsUpdateMemberMapClassType">
            <summary>
            默认为 false 生成数据更新成员位图类型使用 struct 定义，否则采用 class
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ModelAttribute.IsRemoteKey">
            <summary>
            默认为 true 表示为 getSqlCache 函数生成 [AutoCSer.Net.TcpStaticServer.RemoteKey] 
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnCollectionType">
            <summary>
            列集合类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollectionType.None">
            <summary>
            普通集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollectionType.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollectionType.Index">
            <summary>
            普通索引
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollectionType.UniqueIndex">
            <summary>
            唯一索引
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnCollection">
            <summary>
            列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollection.Name">
            <summary>
            列集合名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollection.Type">
            <summary>
            列集合类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnCollection.Columns">
            <summary>
            列集合
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.SearchTreeDictionaryWhere`3">
            <summary>
            搜索树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3">
            <summary>
            搜索树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.getSort">
            <summary>
            排序关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.tree">
            <summary>
            搜索树缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isReset">是否绑定事件与重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.GetArray">
            <summary>
            获取数据集合
            </summary>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.GetPage(System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="pageSize">分页大小</param>
            <param name="currentPage">分页页号</param>
            <param name="count">数据总数</param>
            <param name="isDesc">是否逆序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.CountLess(`2)">
            <summary>
            根据关键字比它小的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.CountThan(`2)">
            <summary>
            根据关键字比它大的节点数量
            </summary>
            <param name="key">关键字</param>
            <returns>节点数量</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.SearchTreeDictionary`3.Count">
            <summary>
            获取缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.SearchTreeDictionaryWhere`3.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionaryWhere`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Func{`0,System.Boolean})">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionaryWhere`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionaryWhere`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.SearchTreeDictionaryWhere`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5">
            <summary>
            分组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="memberKeyType"></typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.getMemberKey">
            <summary>
            关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.isRemoveEnd">
            <summary>
            移除数据并使用最后一个数据移动到当前位置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`1,`3},System.Func{`2,`4},System.Linq.Expressions.Expression{System.Func{`4,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`3},AutoCSer.ListArray{`0}}}},System.Func{System.Collections.Generic.IEnumerable{`4}},System.Boolean,System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getMemberKey"></param>
            <param name="getValue"></param>
            <param name="member"></param>
            <param name="getTargets"></param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.onDeleted(`0,`2,`3)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除的数据关键字</param>
            <param name="memberKey"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryList`5.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.MemberCacheAttribute">
            <summary>
            表格缓存扩展成员申明
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.LazyOrderArray`1">
            <summary>
            延时排序缓存数组
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.LazyOrderArray`1.Array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.LazyOrderArray`1.isSorted">
            <summary>
            数据是否已经排序
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.LazyOrderArray`1.Insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.LazyOrderArray`1.Update(`0)">
            <summary>
            更新数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.LazyOrderArray`1.Delete(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.LazyOrderArray`1.At(System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="sorter"></param>
            <param name="index">分页大小</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.LazyOrderArray`1.GetPage(System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="sorter"></param>
            <param name="pageSize">分页大小</param>
            <param name="currentPage">分页页号</param>
            <param name="count">数据总数</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.LazyOrderArray`1.GetPageDesc(System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="sorter"></param>
            <param name="pageSize">分页大小</param>
            <param name="currentPage">分页页号</param>
            <param name="count">数据总数</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.ICustom`1">
            <summary>
            自定义缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.ICustom`1.Add(`0)">
            <summary>
            添加缓存数据
            </summary>
            <param name="value">缓存数据</param>
            <returns>是否添加数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.ICustom`1.Update(`0,`0)">
            <summary>
            更新缓存数据
            </summary>
            <param name="value">缓存数据</param>
            <param name="oldValue">旧数据</param>
            <returns>添加数据返回正数，删除数据返回负数，没有变化返回0</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.ICustom`1.Remove(`0)">
            <summary>
            删除缓存数据
            </summary>
            <param name="value">缓存数据</param>
            <returns>是否存在被删除数据</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.ICustom`1.Values">
            <summary>
            所有缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Threading.LinkQueueTask">
            <summary>
            链表任务队列
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTask.client">
            <summary>
            SQL 客户端操作
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTask.threadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTask.head">
            <summary>
            任务队列首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTask.end">
            <summary>
            任务队列尾节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTask.queueLock">
            <summary>
            任务队列访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LinkQueueTask.isThread">
            <summary>
            是否启动线程
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LinkQueueTask.#ctor(AutoCSer.Sql.Client,AutoCSer.Threading.ThreadPool)">
            <summary>
            链表任务队列
            </summary>
            <param name="client">SQL 客户端操作</param>
            <param name="threadPool">线程池</param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LinkQueueTask.Add(AutoCSer.Sql.Threading.LinkQueueTaskNode)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LinkQueueTask.run">
            <summary>
            链表任务处理
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Member.IntDate">
            <summary>
            整形日期 映射到 int
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Member.IntDate.Value">
            <summary>
            整形日期值
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Member.IntDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            整形日期
            </summary>
            <param name="year">年份</param>
            <param name="month">月份</param>
            <param name="day">日期</param>
        </member>
        <member name="M:AutoCSer.Sql.Member.IntDate.op_Implicit(System.Int32)~AutoCSer.Sql.Member.IntDate">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Member.IntDate.op_Implicit(AutoCSer.Sql.Member.IntDate)~System.Int32">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Member.IntDate.op_Implicit(System.DateTime)~AutoCSer.Sql.Member.IntDate">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Member.IntDate.Year">
            <summary>
            年份
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Member.IntDate.Month">
            <summary>
            月份
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Member.IntDate.Day">
            <summary>
            日期天数
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Member.IntDate.DateTime">
            <summary>
            日期时间值
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.InsertQuery">
            <summary>
            添加数据查询信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.InsertQuery.Sql">
            <summary>
            查询语句
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.InsertQuery.InsertSql">
            <summary>
            添加语句
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.InsertQuery.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.cache">
            <summary>
            事件缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.getValue">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.getMember">
            <summary>
            获取缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.setMember">
            <summary>
            设置缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`0},System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="cache"></param>
            <param name="getKey">键值获取器</param>
            <param name="getValue">根据关键字获取数据</param>
            <param name="member">缓存字段表达式</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.insert(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.Item(`2)">
            <summary>
            获取数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`3.ValueCount">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="memberKeyType"></typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.getKey">
            <summary>
            获取关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.getMemberKey">
            <summary>
            获取关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.getValue">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.getTargets">
            <summary>
            获取所有节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.getMember">
            <summary>
            获取缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.setMember">
            <summary>
            设置缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.#ctor(AutoCSer.Sql.Table{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Func{`1,`3},System.Func{`1,`4},System.Func{`3,`5},System.Linq.Expressions.Expression{System.Func{`5,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`4},`0}}},System.Func{System.Collections.Generic.IEnumerable{`5}},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberCache">成员缓存</param>
            <param name="getKey">键值获取器</param>
            <param name="getMemberKey">成员缓存键值获取器</param>
            <param name="getValue"></param>
            <param name="member">缓存成员</param>
            <param name="getTargets"></param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.insert(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.ValueCount">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.MemberKey`6.MissTargetCount">
            <summary>
            缺少目标数据错误数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.MemberKey`5">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="memberKeyType"></typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.MemberKey`5.#ctor(AutoCSer.Sql.Table{`0,`1},System.Func{`1,`2},System.Func{`1,`3},System.Func{`2,`4},System.Linq.Expressions.Expression{System.Func{`4,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`3},`0}}},System.Func{System.Collections.Generic.IEnumerable{`4}},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="getKey">键值获取器</param>
            <param name="getMemberKey">成员缓存键值获取器</param>
            <param name="getValue"></param>
            <param name="member">缓存成员</param>
            <param name="getTargets"></param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.Member`5">
            <summary>
            缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType"></typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Member`5.GetKey">
            <summary>
            分组字典关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Member`5.GetByKey">
            <summary>
            获取缓存目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Member`5.GetValue">
            <summary>
            获取缓存目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Member`5.GetMember">
            <summary>
            获取缓存委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Member`5.setMember">
            <summary>
            设置缓存委托
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Member`5.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1,`2},System.Int32,System.Func{`1,`3},System.Func{`3,`4},System.Func{`0,`4},System.Linq.Expressions.Expression{System.Func{`4,AutoCSer.KeyValue{`0,System.Int32}}})">
            <summary>
            缓存计数
            </summary>
            <param name="cache"></param>
            <param name="group">数据分组</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="getByKey"></param>
            <param name="getValue"></param>
            <param name="member"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Member`5.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Member`5.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Member`5.Get(`3)">
            <summary>
            获取缓存数据
            </summary>
            <param name="key">关键字</param>
            <returns>缓存数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Member`5.AddGetTarget(`0)">
            <summary>
            添加缓存数据
            </summary>
            <param name="value">缓存数据</param>
            <returns>缓存数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Member`5.Remove(`4)">
            <summary>
            删除缓存数据
            </summary>
            <param name="cache">缓存数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.Event.Member`5.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.Event.Member`5.Item(`3)">
            <summary>
            获取缓存值
            </summary>
            <param name="key">关键字</param>
            <returns>缓存值</returns>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Counter.Event.Member`5.OnUpdated">
            <summary>
            更新记录事件 [缓存数据 + 更新后的数据 + 更新前的数据 + 更新数据成员]
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Counter.Event.Member`5.OnDeleted">
            <summary>
            删除记录事件
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Excel.ProviderAttribute">
            <summary>
            数据接口属性
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.ProviderAttribute.Name">
            <summary>
            连接名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.ProviderAttribute.Excel">
            <summary>
            Excel版本号
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Excel.DbType">
            <summary>
            SQL数据类型相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.DbType.sqlTypeNames">
            <summary>
            数据类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Excel.DbType.getSqlTypeName(System.Data.SqlDbType)">
            <summary>
            获取数据类型名称
            </summary>
            <param name="type">数据类型</param>
            <returns>数据类型名称</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueueList`4">
            <summary>
            先进先出优先队列缓存(不适应于update/delete)
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.sqlTable">
            <summary>
            SQL操作工具
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.getKey">
            <summary>
            缓存关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.getTarget">
            <summary>
            获取节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.getWhere">
            <summary>
            条件表达式获取器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.#ctor(AutoCSer.Sql.Table{`0,`1},System.Func{`1,`3},System.Func{`3,`2},System.Func{`3,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}},System.Linq.Expressions.Expression{System.Func{`2,AutoCSer.ListArray{`0}}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="sqlTable">数据表格</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="getTarget">获取节点</param>
            <param name="getWhere">条件表达式获取器</param>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.removeCounter(`2)">
            <summary>
            删除节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.get(System.Data.Common.DbConnection@,`2,`3)">
            <summary>
            获取缓存数据集合
            </summary>
            <param name="connection"></param>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.Item(`3)">
            <summary>
            缓存数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>缓存数据集合</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.node">
            <summary>
            成员缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.#ctor(AutoCSer.Sql.Cache.Counter.MemberQueueList{`0,`1,`2,`3},`2,`3)">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueList`4.GetTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5">
            <summary>
            先进先出优先队列自定义缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="cacheValueType">目标缓存类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.sqlTable">
            <summary>
            SQL操作工具
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.getKey">
            <summary>
            缓存关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.getTarget">
            <summary>
            获取节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.getCache">
            <summary>
            获取缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.#ctor(AutoCSer.Sql.Table{`0,`1},System.Func{`1,`3},System.Func{`3,`2},System.Func{`3,`4},System.Linq.Expressions.Expression{System.Func{`2,`4}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Int32)">
            <summary>
            先进先出优先队列缓存
            </summary>
            <param name="sqlTable">数据表格</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="getTarget">获取节点</param>
            <param name="getCache">获取缓存数据</param>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.removeCounter(`2)">
            <summary>
            删除节点
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.Remove(`3)">
            <summary>
            删除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.get(`2,`3)">
            <summary>
            获取缓存数据
            </summary>
            <param name="node"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.Item(`3)">
            <summary>
            缓存数据
            </summary>
            <param name="key">关键字</param>
            <returns>缓存数据</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.node">
            <summary>
            成员缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.#ctor(AutoCSer.Sql.Cache.Counter.MemberQueueCustom{`0,`1,`2,`3,`4},`2,`3)">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="node"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.MemberQueueCustom`5.GetTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.SelectQuery`1">
            <summary>
            查询信息
            </summary>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.SelectQuery`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.SelectQuery`1.Sql">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.SelectQuery`1.SkipCount">
            <summary>
            跳过记录数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.SelectQuery`1.IndexFieldName">
            <summary>
            索引列名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.SelectQuery`1.IndexFieldSqlName">
            <summary>
            索引列 Sql 名称
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.SelectQuery`1.Free">
            <summary>
            释放成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.SelectQuery`1.SetIndex(System.String,System.String)">
            <summary>
            设置索引列名称
            </summary>
            <param name="fieldName">索引列名称</param>
            <param name="fieldSqlName">索引列 Sql 名称</param>
        </member>
        <member name="M:AutoCSer.Sql.SelectQuery`1.GetIndex(System.String@,System.String@)">
            <summary>
            设置索引列名称
            </summary>
            <param name="fieldName">索引列名称</param>
            <param name="fieldSqlName">索引列 Sql 名称</param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.PrimaryKeyClient`3">
            <summary>
            自增标识客户端
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">数据模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Null">
            <summary>
            虚拟空日志流客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.dictionary">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.getter">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.#ctor">
            <summary>
            虚拟空日志流客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.#ctor(System.Func{System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data}},AutoCSer.Net.TcpServer.KeepCallback},System.Func{`2,AutoCSer.Net.TcpServer.ReturnValue{`0}},System.Func{`2,AutoCSer.Net.TcpServer.AwaiterBox{`0}},AutoCSer.Sql.LogStream.Client{`0,`1}.Custom,AutoCSer.Log.ILog)">
            <summary>
            日志流客户端
            </summary>
            <param name="getLog">获取日志数据委托</param>
            <param name="getValue">获取数据委托</param>
            <param name="getValueAwaiter">获取数据委托</param>
            <param name="custom">客户端自定义绑定</param>
            <param name="log">日志处理</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.onError">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.load(System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`2},`0})">
            <summary>
            加载数据
            </summary>
            <param name="dictionary">数据集合</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.onLog(AutoCSer.Sql.LogStream.Log{`0,`1}.Data@)">
            <summary>
            日志流数据处理
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Get(`2,`0@)">
            <summary>
            获取数据，尽量不要在 .NET 4.0 及以下版本中使用
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>null 表示已经同步获取数据</returns>
        </member>
        <member name="P:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Item(`2)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Getter">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Getter.client">
            <summary>
            自增标识客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Getter.dictionary">
            <summary>
            加载数据缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Getter.#ctor(AutoCSer.Sql.LogStream.PrimaryKeyClient{`0,`1,`2})">
            <summary>
            自增标识客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Getter.error">
            <summary>
            错误处理
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.PrimaryKeyClient`3.Getter.onLog(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data})">
            <summary>
            日志流数据处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Sql.Connection">
            <summary>
            SQL 数据库连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.Owner">
            <summary>
            数据库表格所有者
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.Attribute">
            <summary>
            SQL 客户端类型默认配置信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.Client">
            <summary>
            SQL 客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.Log">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.Type">
            <summary>
            SQL 客户端类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Connection.connections">
            <summary>
            连接集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Connection.GetConnection(System.String)">
            <summary>
            根据连接类型获取连接信息
            </summary>
            <param name="type">连接类型</param>
            <returns>连接信息</returns>
        </member>
        <member name="P:AutoCSer.Sql.Connection.ClientAttribute">
            <summary>
            SQL 客户端类型默认配置信息
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Connection.SqlClient">
            <summary>
            SQL 客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Updater">
            <summary>
            更新数据动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.attribute">
            <summary>
            数据列配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.isNextMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.#ctor(System.Type,AutoCSer.Sql.ColumnAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.#ctor(System.Reflection.Emit.DynamicMethod,System.Reflection.Emit.ILGenerator,AutoCSer.Sql.ColumnAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="dynamicMethod"></param>
            <param name="generator"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.Push(AutoCSer.Sql.Field,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="index">字段名称序号</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.PushOnly(AutoCSer.Sql.Field,System.Int32)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="index">字段名称序号</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.typeUpdates">
            <summary>
            类型调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.GetTypeUpdate(System.Type)">
            <summary>
            类型委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>类型委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.update``1(AutoCSer.CharStream,``0,AutoCSer.Sql.ConstantConverter,System.String)">
            <summary>
            获取更新数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
            <param name="columnName">列名前缀</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.updateMethod">
            <summary>
            获取更新数据SQL表达式函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.getColumnNameMethods">
            <summary>
            获取列名委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.GetColumnNames(System.Type)">
            <summary>
            获取列名委托
            </summary>
            <param name="type">数据列类型</param>
            <returns>获取列名委托</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.getColumnNames``1(AutoCSer.LeftArray{System.String}@,System.String)">
            <summary>
            获取列名集合
            </summary>
            <param name="names">列名集合</param>
            <param name="name">列名前缀</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Updater.getColumnNamesMethod">
            <summary>
            获取列名集合函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Updater.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.ToArray">
            <summary>
            数据列转换数组动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.ToArray.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.ToArray.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.ToArray.attribute">
            <summary>
            数据列配置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.#ctor(System.Type,AutoCSer.Sql.ColumnAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.ToArray.typeToArrays">
            <summary>
            类型调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.GetTypeToArray(System.Type)">
            <summary>
            类型委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>类型委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.toArray``1(``0,System.Object[],System.Int32@)">
            <summary>
            数据列转换数组
            </summary>
            <param name="values">目标数组</param>
            <param name="value">数据列</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.ToArray.toArrayMethod">
            <summary>
            数据列转换数组函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.ToArray.getDataColumns">
            <summary>
            获取列名与类型委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.GetDataColumns(System.Type)">
            <summary>
            获取列名与类型委托
            </summary>
            <param name="type">数据列类型</param>
            <returns>获取列名与类型委托</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.ToArray.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.PrimaryKey`3">
            <summary>
            关键字缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.Cache`3">
            <summary>
            缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Cache`3.GetKey">
            <summary>
            缓存关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.Event.Cache`3.dictionary">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32,System.Linq.Expressions.Expression{System.Func{`1,`2}})">
            <summary>
            缓存计数
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32,System.Func{`1,`2})">
            <summary>
            缓存计数
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.Get(`2)">
            <summary>
            获取缓存数据
            </summary>
            <param name="key">关键字</param>
            <returns>缓存数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.Add(`0)">
            <summary>
            添加缓存数据
            </summary>
            <param name="value">缓存数据</param>
            <returns>缓存数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.Remove(`0)">
            <summary>
            删除缓存数据
            </summary>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Cache`3.CreateQueue(AutoCSer.Sql.Table{`0,`1,`2}.GetValue,System.Int32)">
            <summary>
            创建先进先出优先队列缓存
            </summary>
            <param name="getValue">数据获取器,禁止数据库与锁操作</param>
            <param name="maxCount">缓存默认最大容器大小</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.Event.Cache`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Counter.Event.Cache`3.Item(`2)">
            <summary>
            获取缓存值
            </summary>
            <param name="key">关键字</param>
            <returns>缓存值</returns>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Counter.Event.Cache`3.OnUpdated">
            <summary>
            更新记录事件 [缓存数据 + 更新后的数据 + 更新前的数据 + 更新数据成员]
            </summary>
        </member>
        <member name="E:AutoCSer.Sql.Cache.Counter.Event.Cache`3.OnDeleted">
            <summary>
            删除记录事件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.PrimaryKey`3.#ctor(AutoCSer.Sql.Table{`0,`1,`2},System.Int32)">
            <summary>
            关键字缓存计数器
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity64`4">
            <summary>
            自增id标识缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity64`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1,`2},System.Func{System.Int64,`3},System.Func{`0,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.KeyValue{`0,System.Int32}}},System.Int32)">
            <summary>
            自增id标识缓存计数器
            </summary>
            <param name="cache"></param>
            <param name="getByKey"></param>
            <param name="getValue"></param>
            <param name="member"></param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Extension.ExpressionExtension">
            <summary>
            表达式扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.ExpressionExtension.IsSimple(System.Linq.Expressions.Expression)">
            <summary>
            是否简单表达式（不需要括号）
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.ExpressionExtension.IsConstantNull(System.Linq.Expressions.Expression)">
            <summary>
            是否常量 null
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Excel.Intermixed">
            <summary>
            混合数据处理方式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Intermixed.Write">
            <summary>
            输出模式，此情况下只能用作写入Excel
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Intermixed.Read">
            <summary>
            输入模式，此情况下只能用作读取Excel，并且始终将Excel数据作为文本类型读取
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Intermixed.WriteAndRead">
            <summary>
            连接模式，此情况下既可用作写入、也可用作读取
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.CastType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.CastType.FromType">
            <summary>
            原始类型
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.CastType.ToType">
            <summary>
            目标类型
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.CastType.Equals(AutoCSer.Emit.CastType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.CastType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.CastType.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Emit.CastType.methods">
            <summary>
            类型转换函数集合
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.CastType.GetMethod(System.Type,System.Type)">
            <summary>
            获取类型转换函数
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.CastType.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.sorter">
            <summary>
            排序器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.Sql.Cache.LazyOrderArray{`0}}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Boolean)">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="sorter">排序器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.onDeleted(`0,`2)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除数据的关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.getCache(`2)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.Count(`2)">
            <summary>
            获取匹配数量
            </summary>
            <param name="key">关键字</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.GetFindArray(`2,System.Func{`0,System.Boolean})">
            <summary>
            获取匹配的数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.GetCache(`2)">
            <summary>
            获取不排序的数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.At(`2,System.Int32)">
            <summary>
            获取有序数据
            </summary>
            <param name="key">关键字</param>
            <param name="index">关键字</param>
            <returns>获取有序数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArray`4.GetPage(`2,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="pageSize">分页大小</param>
            <param name="currentPage">分页页号</param>
            <param name="count">数据总数</param>
            <param name="isDesc">是否逆序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="T:AutoCSer.Sql.OnTime">
            <summary>
            定时触发 Sql 扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.OnTime.Set(AutoCSer.Date.NowTime.OnTimeFlag)">
            <summary>
            设置定时触发类型
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:AutoCSer.Sql.OnTime.onTime(AutoCSer.Date.NowTime.OnTimeFlag)">
            <summary>
            触发定时任务
            </summary>
            <param name="flag"></param>
        </member>
        <member name="T:AutoCSer.Sql.NowTime">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.NowTime.minTime">
            <summary>
            下一次最小时间
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.NowTime.maxTime">
            <summary>
            初始化最大时间
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.NowTime.ticks">
            <summary>
            间隔时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.NowTime.timeLock">
            <summary>
            时间访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.NowTime.#ctor(System.Int32)">
            <summary>
            当前时间
            </summary>
            <param name="milliseconds">间隔毫秒数</param>
        </member>
        <member name="M:AutoCSer.Sql.NowTime.Set(System.DateTime)">
            <summary>
            设置时间
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:AutoCSer.Sql.NowTime.SetMaxTime(System.DateTime)">
            <summary>
            在初始化循环中设置最大时间
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:AutoCSer.Sql.NowTime.SetMaxTime(System.Nullable{System.DateTime})">
            <summary>
            在初始化循环中设置最大时间
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:AutoCSer.Sql.NowTime.SetMaxTime">
            <summary>
            在初始化循环结束后确认最大时间
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.NowTime.Next">
            <summary>
            获取下一个时间
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.IsSqlLogProxyLoadedName">
            <summary>
            计算列加载完成字段名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.wait">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.waitMap">
            <summary>
            等待加载成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.waitCount">
            <summary>
            等待加载成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.waitMapLock">
            <summary>
            等待加载成员位图访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.onLogIndex">
            <summary>
            日志回调委托索引
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.onLogLock">
            <summary>
            日志回调委托访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.isStart">
            <summary>
            是否开始处理日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.isLoaded">
            <summary>
            是否加载完成
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log.isMemberMap">
            <summary>
            是否支持成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.#ctor(AutoCSer.Sql.Table,System.Int32[])">
            <summary>
            日志
            </summary>
            <param name="table"></param>
            <param name="memberIndexs"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.cacheLoaded">
            <summary>
            缓存加载完毕事件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.LoadMember(System.Int32)">
            <summary>
            加载成员处理
            </summary>
            <param name="memberIndex"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.WaitMember(System.Int32)">
            <summary>
            判断成员是否已经加载
            </summary>
            <param name="memberIndex"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.loadCount">
            <summary>
            加载完成检测
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.Start">
            <summary>
            开始处理日志
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.loaded">
            <summary>
            加载完成
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log.onLoaded">
            <summary>
            缓存加载完毕
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Log`2">
            <summary>
            日志
            </summary>
            <typeparam name="valueType">表格类型</typeparam>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.onLogs">
            <summary>
            日志回调委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.insertLog">
            <summary>
            添加数据日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.updateLog">
            <summary>
            更新数据日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.updateMemberMapLog">
            <summary>
            更新数据日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.deleteLog">
            <summary>
            删除数据日志
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32[])">
            <summary>
            日志
            </summary>
            <param name="table"></param>
            <param name="memberIndexs"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.Set(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Boolean)">
            <summary>
            设置缓存
            </summary>
            <param name="cache"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.CreateMemberMap``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            创建数据更新成员位图
            </summary>
            <typeparam name="memberType"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.onLoaded">
            <summary>
            缓存加载完毕
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.start(System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data},System.Boolean})">
            <summary>
            日志委托初始化处理
            </summary>
            <param name="onLog"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.Add(System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data},System.Boolean})">
            <summary>
            添加日志处理委托
            </summary>
            <param name="onLog"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.AddQueue(System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data},System.Boolean})">
            <summary>
            添加日志处理委托
            </summary>
            <param name="onLog"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.add(System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data},System.Boolean},System.Boolean)">
            <summary>
            添加日志处理委托
            </summary>
            <param name="onLog"></param>
            <param name="isQueue"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value"></param>
            <param name="oldValue"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.onLog(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Sql.LogStream.Log{`0,`1}.Data}@)">
            <summary>
            日志处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.Update(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            手动更新数据
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.update(`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            手动更新数据
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Log`2.Data">
            <summary>
            日志数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.Data.Value">
            <summary>
            数据库更新记录
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.Data.Type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Log`2.AddOnLogTask">
            <summary>
            添加日志处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.AddOnLogTask.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.AddOnLogTask.OnLog">
            <summary>
            日志处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.AddOnLogTask.IsQueue">
            <summary>
            是否仅队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.AddOnLogTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Log`2.UpdateTask">
            <summary>
            手动更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.UpdateTask.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.UpdateTask.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Log`2.UpdateTask.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Log`2.UpdateTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:AutoCSer.Sql.IVerify">
            <summary>
            SQL数据验证接口
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.IVerify.IsSqlVeify">
            <summary>
            是否通过SQL数据验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Updater">
            <summary>
            更新数据动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Updater.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Updater.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Updater.attribute">
            <summary>
            数据库表格模型配置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Updater.#ctor(System.Type,AutoCSer.Sql.ModelAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Updater.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Updater.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1">
            <summary>
            数据模型
            </summary>
            <summary>
            数据模型
            </summary>
            <summary>
            数据模型
            </summary>
            <summary>
            数据模型
            </summary>
            <summary>
            数据模型
            </summary>
            <summary>
            数据库表格模型
            </summary>
            <typeparam name="modelType">数据类型</typeparam>
            <summary>
            数据模型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.attribute">
            <summary>
            数据库表格模型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.Fields">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.Identity">
            <summary>
            自增字段
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.IdentitySqlName">
            <summary>
            自增字段名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.PrimaryKeys">
            <summary>
            关键字字段集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.MemberMap">
            <summary>
            SQL数据成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.GetIdentity">
            <summary>
            自增标识获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.GetIdentity32">
            <summary>
            自增标识获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.SetIdentity">
            <summary>
            设置自增标识
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.groupMemberMaps">
            <summary>
            分组数据成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.groupMemberMapLock">
            <summary>
            分组数据成员位图访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.getGroupMemberMap(System.Int32)">
            <summary>
            获取分组数据成员位图
            </summary>
            <param name="group">分组</param>
            <returns>分组数据成员位图</returns>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.GetCacheMemberMap(System.Int32)">
            <summary>
            获取分组数据成员位图
            </summary>
            <param name="group">分组</param>
            <returns>分组数据成员位图</returns>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.GetIdentityOrPrimaryKeyMemberMap">
            <summary>
            自增标识/关键字成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.SetIdentityOrPrimaryKeyMemberMap(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            自增标识/关键字成员位图
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.IdentityGetter(System.Int32)">
            <summary>
            获取自增标识获取器
            </summary>
            <param name="baseIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.GetNames(AutoCSer.CharStream,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            获取以逗号分割的名称集合
            </summary>
            <param name="sqlStream"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.GetTable(AutoCSer.Sql.Client,System.String)">
            <summary>
            获取表格信息
            </summary>
            <param name="client">SQL 客户端操作</param>
            <param name="tableName">表格名称</param>
            <returns>表格信息</returns>
        </member>
        <member name="P:AutoCSer.Sql.DataModel.Model`1.CopyMemberMap">
            <summary>
            SQL数据成员
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.Updater">
            <summary>
            数据列更新SQL流
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.Updater.Update(AutoCSer.CharStream,AutoCSer.Metadata.MemberMap,`0,AutoCSer.Sql.ConstantConverter,AutoCSer.Sql.Table)">
            <summary>
            获取更新数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="memberMap">更新成员位图</param>
            <param name="value">数据</param>
            <param name="converter">SQL常量转换</param>
            <param name="table">数据表格</param>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.Updater.updater">
            <summary>
            获取更新数据SQL表达式
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.ToArray">
            <summary>
            数据列转换数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.ToArray.dataColumns">
            <summary>
            导入数据列集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.ToArray.Write(`0,System.Object[],System.Int32@,AutoCSer.Sql.Table)">
            <summary>
            数据列转换数组
            </summary>
            <param name="values">目标数组</param>
            <param name="value">数据列</param>
            <param name="index">当前读取位置</param>
            <param name="table">数据表格</param>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.ToArray.defaultWriter">
            <summary>
            数据列转换数组
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.DataModel.Model`1.ToArray.DataColumns">
            <summary>
            导入数据列集合
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.ToArray.Writer">
            <summary>
            数据列转换数组
            </summary>
            <param name="values">目标数组</param>
            <param name="value">数据列</param>
            <param name="index">当前读取位置</param>
            <param name="table">数据表格</param>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.PrimaryKeyWhere">
            <summary>
            关键字条件
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.PrimaryKeyWhere.Write(AutoCSer.CharStream,`0,AutoCSer.Sql.ConstantConverter)">
            <summary>
            关键字条件SQL流
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="value">数据列</param>
            <param name="converter">SQL常量转换</param>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.PrimaryKeyWhere.writer">
            <summary>
            关键字条件SQL流
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.Verifyer">
            <summary>
            数据列验证
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.Verifyer.Verify(`0,AutoCSer.Metadata.MemberMap,AutoCSer.Sql.Table)">
            <summary>
            数据验证
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
            <param name="sqlTool"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.Verifyer.verifyer">
            <summary>
            数据验证
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.Setter">
            <summary>
            数据库模型设置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.Setter.Set(System.Data.Common.DbDataReader,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            设置字段值
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.Setter.setter">
            <summary>
            默认数据列设置
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Model`1.Inserter">
            <summary>
            添加数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.Inserter.GetColumnNames(AutoCSer.CharStream,AutoCSer.Metadata.MemberMap)">
            <summary>
            获取逗号分割的列名集合
            </summary>
            <param name="sqlStream"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Model`1.Inserter.Insert(AutoCSer.CharStream,AutoCSer.Metadata.MemberMap,`0,AutoCSer.Sql.ConstantConverter,AutoCSer.Sql.Table)">
            <summary>
            获取插入数据SQL表达式
            </summary>
            <param name="sqlStream">SQL表达式流</param>
            <param name="memberMap">成员位图</param>
            <param name="value">数据</param>
            <param name="converter">SQL常量转换</param>
            <param name="table">数据表格</param>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Model`1.Inserter.inserter">
            <summary>
            获取插入数据SQL表达式
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.ToArray">
            <summary>
            数据列转换数组动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.ToArray.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.ToArray.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.ToArray.attribute">
            <summary>
            数据库表格模型配置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.ToArray.#ctor(System.Type,AutoCSer.Sql.ModelAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.ToArray.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.ToArray.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="T:AutoCSer.Sql.CreateSelectQuery`1">
            <summary>
            创建查询信息
            </summary>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.CreateSelectQuery`1.Where">
            <summary>
            查询条件表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.CreateSelectQuery`1.Orders">
            <summary>
            排序表达式集合,false为升序,true为降序
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.CreateSelectQuery`1.SqlFieldOrders">
            <summary>
            排序字符串集合,false为升序,true为降序
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.CreateSelectQuery`1.GetCount">
            <summary>
            获取记录数量,0表示不限
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.CreateSelectQuery`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            创建查询信息
            </summary>
            <param name="where"></param>
        </member>
        <member name="M:AutoCSer.Sql.CreateSelectQuery`1.#ctor(System.Int32,AutoCSer.KeyValue{AutoCSer.Sql.Field,System.Boolean})">
            <summary>
            创建查询信息
            </summary>
            <param name="getCount"></param>
            <param name="order"></param>
        </member>
        <member name="M:AutoCSer.Sql.CreateSelectQuery`1.WriteWhere(AutoCSer.Sql.Table,AutoCSer.CharStream,AutoCSer.Sql.SelectQuery{`0}@)">
            <summary>
            查询条件
            </summary>
            <param name="sqlTable">数据库表格操作工具</param>
            <param name="sqlStream">SQL表达式流</param>
            <param name="query"></param>
        </member>
        <member name="M:AutoCSer.Sql.CreateSelectQuery`1.WriteOrder(AutoCSer.Sql.Table,AutoCSer.CharStream,AutoCSer.Sql.SelectQuery{`0}@)">
            <summary>
            排序字符串
            </summary>
            <param name="sqlTable">数据库表格操作工具</param>
            <param name="sqlStream">SQL表达式流</param>
            <param name="query"></param>
        </member>
        <member name="P:AutoCSer.Sql.CreateSelectQuery`1.IsOrder">
            <summary>
             是否需要排序
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionaryWhere`3">
            <summary>
            字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Dictionary`3">
            <summary>
            字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Dictionary`3.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Dictionary`3.getKey">
            <summary>
            分组字典关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Dictionary`3.dictionary">
            <summary>
            字典缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Dictionary`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Boolean)">
            <summary>
            字典缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Dictionary`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Dictionary`3.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key">数据对象的关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Dictionary`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Dictionary`3.onDeleted(`2)">
            <summary>
            删除数据
            </summary>
            <param name="key">被删除数据的关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Dictionary`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Dictionary`3.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryWhere`3.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryWhere`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Func{`0,System.Boolean})">
            <summary>
            字典缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryWhere`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryWhere`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryWhere`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.AnyCancel">
            <summary>
            取消操作数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.AnyCancel.IsCancelValue">
            <summary>
            是否取消操作
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.AnyCancel.Cancel">
            <summary>
            取消操作
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.AnyCancel.IsCancel">
            <summary>
            是否取消操作
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.EmitGenerator_Sql">
            <summary>
            MSIL生成
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator_Sql.charStreamWriteChar(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Char)">
            <summary>
            写入字符
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator_Sql.charStreamSimpleWriteNotNullMethod">
            <summary>
            内存字符流写入字符串方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator_Sql.charStreamSimpleWriteNotNull(System.Reflection.Emit.ILGenerator)">
            <summary>
            写入字符串
            </summary>
            <param name="generator"></param>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator_Sql.emptyStringField">
            <summary>
            string.Empty
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator_Sql.nullStringEmpty(System.Reflection.Emit.ILGenerator)">
            <summary>
            字符串 null 转 string.Empty
            </summary>
            <param name="generator"></param>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator_Sql.TableGetNowTimeMethod">
            <summary>
            获取当前时间函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.getIndex">
            <summary>
            数组索引获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.arraySize">
            <summary>
            数组容器大小
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.sorter">
            <summary>
            排序器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Func{`0,System.Int32},System.Int32,System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.Sql.Cache.LazyOrderArray{`0}[]}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Boolean)">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="getIndex">获取数组索引</param>
            <param name="arraySize">数组容器大小</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="sorter">排序器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.onInserted(`0,`2,System.Int32)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.onDeleted(`0,`2,System.Int32)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除数据的关键字</param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.getCache(`2,System.Int32)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberArrayLazyOrderArray`4.GetPage(`2,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="index">数组索引</param>
            <param name="pageSize">分页大小</param>
            <param name="currentPage">分页页号</param>
            <param name="count">数据总数</param>
            <param name="isDesc">是否逆序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LogType.CountError">
            <summary>
            客户端数量超限
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LogType.Loaded">
            <summary>
            数据加载完毕
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LogType.Insert">
            <summary>
            添加数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LogType.Update">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LogType.Delete">
            <summary>
            删除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ConstantConverter">
            <summary>
            常量转换
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConstantConverter.converters">
            <summary>
            常量转换处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.#ctor">
            <summary>
            常量转换
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantToString``1(AutoCSer.CharStream,``0)">
            <summary>
            常量转换字符串
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="F:AutoCSer.Sql.ConstantConverter.convertConstantToStringMethod">
            <summary>
            常量转换字符串函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Boolean)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantBoolTo01(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Boolean})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantBoolNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Byte)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantByte(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Byte})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantByteNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.SByte)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantSByte(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.SByte})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantSByteNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Int16)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantShort(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Int16})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantShortNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.UInt16)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantUShort(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.UInt16})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantUShortNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Int32)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantInt(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Int32})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantIntNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.UInt32)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantUInt(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.UInt32})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantUIntNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Int64)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantLong(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Int64})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantLongNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.UInt64)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantULong(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.UInt64})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantULongNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Single)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantFloat(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Single})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantFloatNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Double)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantDouble(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Double})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantDoubleNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Decimal)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantDecimal(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.Decimal})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantDecimalNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.DateTime)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantDateTimeMillisecond(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.Nullable{System.DateTime})">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantDateTimeMillisecondNullable(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstant(AutoCSer.CharStream,System.String)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.Convert(AutoCSer.CharStream,System.String)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="sqlStream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertConstantString(AutoCSer.CharStream,System.Object)">
            <summary>
            常量转换字符串(单引号变两个)
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.convertString(AutoCSer.CharStream,System.String)">
            <summary>
            SQL语句字符串格式化(单引号变两个)
            </summary>
            <param name="sqlStream">SQL字符流</param>
            <param name="value">常量</param>
        </member>
        <member name="F:AutoCSer.Sql.ConstantConverter.Default">
            <summary>
            常量转换
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConstantConverter.converterMethods">
            <summary>
            SQL常量转换函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.GetMethod(System.Type)">
            <summary>
            获取SQL常量转换函数信息
            </summary>
            <param name="type">数值类型</param>
            <returns>SQL常量转换函数信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.ConstantConverter.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="P:AutoCSer.Sql.ConstantConverter.Item(System.Type)">
            <summary>
            获取常量转换处理函数
            </summary>
            <param name="type">数据类型</param>
            <returns>失败返回null</returns>
        </member>
        <member name="T:AutoCSer.Sql.ConnectionPool">
            <summary>
            连接池
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.array">
            <summary>
            连接数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.index">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.arrayLock">
            <summary>
            连接数组访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.#ctor">
            <summary>
            连接池
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Pop">
            <summary>
            获取连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Push(System.Data.Common.DbConnection@)">
            <summary>
            连接池处理
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.clear(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.poolLock">
            <summary>
            连接池集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Get(System.Type,System.String)">
            <summary>
            获取连接池
            </summary>
            <param name="type">SQL 客户端处理类型</param>
            <param name="connection">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.ConnectionPool.Key">
            <summary>
            连接池标识
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.Key.Connection">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.Key.HashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ConnectionPool.Key.Type">
            <summary>
            SQL 客户端处理类型
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Key.#ctor(System.Type,System.String)">
            <summary>
            连接池标识
            </summary>
            <param name="type">SQL 客户端处理类型</param>
            <param name="connection">连接字符串</param>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Key.Equals(AutoCSer.Sql.ConnectionPool.Key)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Key.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.ConnectionPool.Key.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberCache`1">
            <summary>
            成员缓存
            </summary>
            <typeparam name="valueType">缓存数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberCache`1.Value">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.dictionary">
            <summary>
            字典缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.#ctor(AutoCSer.Sql.Table{`0,`1,`3},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberCache">成员缓存</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.Item(`3)">
            <summary>
            获取数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`4.ValueCount">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`3">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKey`3.#ctor(AutoCSer.Sql.Table{`0,`1,`2},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.dictionaryArray">
            <summary>
            字典缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.#ctor(AutoCSer.Sql.Table{`0,`1,`3},System.Linq.Expressions.Expression{System.Func{`0,`2}},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="memberCache">成员缓存</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.Reset(System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{`1}@)">
            <summary>
            重新加载数据
            </summary>
            <param name="connection"></param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.insert(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.onUpdated(`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap">更新成员位图</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.Values">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.Item(`3)">
            <summary>
            获取数据
            </summary>
            <param name="key">关键字</param>
            <returns>数据</returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.Count">
            <summary>
            缓存数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`4.ValueCount">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`3">
            <summary>
            关键字整表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Event.PrimaryKeyArray`3.#ctor(AutoCSer.Sql.Table{`0,`1,`2},System.Int32)">
            <summary>
            关键字整表缓存
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.CountMember">
            <summary>
            计数成员（非精确计数）
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember.timeout">
            <summary>
            超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember.second">
            <summary>
            当前超时秒数
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember.#ctor">
            <summary>
            计数成员
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember.Inc(System.Int32)">
            <summary>
            增加计数
            </summary>
            <param name="id">数据标识</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember.Get(System.Int32)">
            <summary>
            获取计数
            </summary>
            <param name="id">数据标识</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember.update">
            <summary>
            更新计数
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember.OnTimer">
            <summary>
            定时器触发日志写入
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember.Null">
            <summary>
            默认空计数成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember.CountMembers">
            <summary>
            计数成员链表
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.CountMember.TotalCount">
            <summary>
            计数总量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.CountMember`3">
            <summary>
            计数成员（非精确计数）
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">扩展缓存绑定类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.table">
            <summary>
            数据表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.cache">
            <summary>
            待计数缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.getCacheCount">
            <summary>
            获取缓存计数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.setCacheCount">
            <summary>
            设置缓存计数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.getCount">
            <summary>
            获取未处理计数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.setCount">
            <summary>
            设置未处理计数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.setIdentity">
            <summary>
            设置数据标识
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.counterLock">
            <summary>
            计数访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.selectMemberMap">
            <summary>
            查询成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.memberMap">
            <summary>
            计数成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.updateValue">
            <summary>
            更新数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.freeValue">
            <summary>
            释放位置临时更新数据对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.ids">
            <summary>
            未处理计数数据标识列表
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.idIndex">
            <summary>
            未处理计数数据标识索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.freeIdIndex">
            <summary>
            当前释放数据标识索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.updateIndex">
            <summary>
            当前更新数据标识索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.totalCount">
            <summary>
            计数总量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.IdentityCache{`0,`1,`2},System.Linq.Expressions.Expression{System.Func{`1,System.Int32}},System.Int32)">
            <summary>
            浏览计数
            </summary>
            <param name="cache">待计数缓存</param>
            <param name="member">计数成员</param>
            <param name="timeout">超时秒数</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.Get(System.Int32)">
            <summary>
            获取计数
            </summary>
            <param name="id">数据标识</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.Inc(System.Int32)">
            <summary>
            增加计数
            </summary>
            <param name="id">数据标识</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.update">
            <summary>
            更新计数
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.check(System.Data.Common.DbConnection@)">
            <summary>
            检测更新处理
            </summary>
            <param name="connection"></param>
        </member>
        <member name="P:AutoCSer.Sql.Cache.Whole.CountMember`3.TotalCount">
            <summary>
            计数总量
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask">
            <summary>
            释放计数更新任务
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask.countMember">
            <summary>
            计数成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask.value">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask.Query">
            <summary>
            更新记录查询信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask.Set(AutoCSer.Sql.Cache.Whole.CountMember{`0,`1,`2},`0)">
            <summary>
            设置数据
            </summary>
            <param name="countMember">计数成员</param>
            <param name="value">更新数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.FreeTask.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.CountMember`3.UpdateTask">
            <summary>
            更新计数任务
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.UpdateTask.countMember">
            <summary>
            计数成员
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.CountMember`3.UpdateTask.Query">
            <summary>
            更新记录查询信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.UpdateTask.Set(AutoCSer.Sql.Cache.Whole.CountMember{`0,`1,`2})">
            <summary>
            设置数据
            </summary>
            <param name="countMember">计数成员</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.UpdateTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            执行任务
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.CountMember`3.UpdateTask.Push">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity`4">
            <summary>
            自增id标识缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1,`2},System.Func{System.Int32,`3},System.Func{`0,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.KeyValue{`0,System.Int32}}},System.Int32)">
            <summary>
            自增id标识缓存计数器
            </summary>
            <param name="cache"></param>
            <param name="getByKey"></param>
            <param name="getValue"></param>
            <param name="member"></param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity`3">
            <summary>
            自增id标识缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="memberCacheType"></typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Key{`0,`1,`2,System.Int32},System.Linq.Expressions.Expression{System.Func{`2,AutoCSer.KeyValue{`0,System.Int32}}},System.Int32)">
            <summary>
            自增id标识缓存计数器
            </summary>
            <param name="cache">关键字整表缓存</param>
            <param name="member">缓存字段表达式</param>
            <param name="group">数据分组</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.MemberIdentity`3.CreateMemberQueue(System.Linq.Expressions.Expression{System.Func{`2,`0}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Linq.Expressions.Expression{System.Func{`2,`2}},System.Int32)">
            <summary>
            创建先进先出优先队列缓存
            </summary>
            <param name="valueMember">节点成员</param>
            <param name="previousMember">前一个节点成员</param>
            <param name="nextMember">后一个节点成员</param>
            <param name="maxCount">缓存默认最大容器大小</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.SqlTable">
            <summary>
            数据库表格扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.SqlTable.CreateMemberMap``1(AutoCSer.Sql.Table{``0})">
            <summary>
            创建成员位图
            </summary>
            <typeparam name="valueType">表格模型类型</typeparam>
            <param name="sqlTable">数据库表格操作工具</param>
            <returns>创建成员位图</returns>
        </member>
        <member name="M:AutoCSer.Extension.SqlTable.CreateMemberIndex``2(AutoCSer.Sql.Table{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            创建成员索引
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="returnType"></typeparam>
            <param name="sqlTable">数据库表格操作工具</param>
            <param name="member">字段表达式</param>
            <returns>成员索引</returns>
        </member>
        <member name="T:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2">
            <summary>
            查找匹配记录集合
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.tree">
            <summary>
            搜索树
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.isValue">
            <summary>
            数据匹配委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.array">
            <summary>
            匹配数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.#ctor(AutoCSer.SearchTree.Dictionary{`1,`0},System.Func{`0,System.Boolean})">
            <summary>
            获取匹配记录集合
            </summary>
            <param name="tree"></param>
            <param name="isValue"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            查找匹配记录集合
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.SearchTreeDictionaryFindTask`2.Wait">
            <summary>
            获取匹配记录集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.MsSql.ExpressionConverter">
            <summary>
            表达式转换
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.ExpressionConverter.SqlStream">
            <summary>
            SQL 字符串流
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.ExpressionConverter.FirstMemberName">
            <summary>
            第一个参数成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.ExpressionConverter.FirstMemberSqlName">
            <summary>
            第一个参数成员SQL名称
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.Convert(System.Linq.Expressions.Expression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertNotEqual(System.Linq.Expressions.BinaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertIsSimple(System.Linq.Expressions.Expression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Char)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression">表达式</param>
            <param name="char1">操作字符1</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertBinaryExpression(System.Linq.Expressions.BinaryExpression,System.Char,System.Char)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression">表达式</param>
            <param name="char1">操作字符1</param>
            <param name="char2">操作字符2</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertBinaryExpression(System.Linq.Expressions.BinaryExpression,System.String)">
            <summary>
            转换表达式
            </summary>
            <param name="binaryExpression">表达式</param>
            <param name="type">操作字符串</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertNot(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertNegate(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertUnaryPlus(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertIsTrue(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertIsFalse(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="unaryExpression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertConvert(System.Linq.Expressions.UnaryExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertConstant(System.Object)">
            <summary>
            转换表达式
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.ExpressionConverter.convertCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            转换表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1">
            <summary>
            成员位图绑定对象链表池
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.maxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.PushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.pushLink(`0,`0,System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="pushCount">数据数量</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValueLinkPool`1.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="saveCount">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.IMemberMapValueLink`1">
            <summary>
            成员位图绑定对象链表
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="P:AutoCSer.Sql.LogStream.IMemberMapValueLink`1.MemberMapValueLink">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.Callback`1">
            <summary>
            日志流回调
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Callback`1.callbacks">
            <summary>
            回调委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.Callback`1.callbackLock">
            <summary>
            回调委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Callback`1.Call(`0)">
            <summary>
            添加日志流
            </summary>
            <param name="log">日志数据</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.Callback`1.Append(System.Func{AutoCSer.Net.TcpServer.ReturnValue{`0},System.Boolean})">
            <summary>
            添加日志回调委托
            </summary>
            <param name="callback">日志回调委托</param>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.PrimaryKeyWhere">
            <summary>
            关键字条件动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.PrimaryKeyWhere.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.PrimaryKeyWhere.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.PrimaryKeyWhere.attribute">
            <summary>
            数据库表格模型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.PrimaryKeyWhere.isNextMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.PrimaryKeyWhere.#ctor(System.Type,AutoCSer.Sql.ModelAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.PrimaryKeyWhere.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.PrimaryKeyWhere.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.PrimaryKeyWhere.AndString">
            <summary>
            添加连接字符串
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Setter">
            <summary>
            数据列设置动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Setter.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Setter.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Setter.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Setter.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Setter.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Setter.typeSetters">
            <summary>
            类型调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Setter.GetTypeSetter(System.Type)">
            <summary>
            类型委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>类型委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Setter.set``1(System.Data.Common.DbDataReader,``0@,System.Int32@)">
            <summary>
            设置字段值
            </summary>
            <param name="reader">字段读取器物理存储</param>
            <param name="value">目标数据</param>
            <param name="index">当前读取位置</param>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Setter.setMethod">
            <summary>
            设置字段值函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Setter.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberCacheCounter`2">
            <summary>
            成员计数缓存
            </summary>
            <typeparam name="valueType">缓存数据类型</typeparam>
            <typeparam name="memberCacheType">成员缓存类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberCacheCounter`2.Counter">
            <summary>
            计数缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberCacheCounter`2.NodeValue">
            <summary>
            节点内容
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberCacheCounter`2.PreviousNode">
            <summary>
            上一个内容节点
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberCacheCounter`2.NextNode">
            <summary>
            下一个内容节点
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.QueueList`4">
            <summary>
            先进先出优先队列 列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="counterKeyType">缓存统计关键字类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2},System.Linq.Expressions.Expression{System.Func{`1,`3}},System.Func{`3,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}},System.Int32)">
            <summary>
            先进先出优先队列 列表缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="getWhere">条件表达式获取器</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue">缓存数据</param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.createList(System.Data.Common.DbConnection@,`3)">
            <summary>
            读取数据库数据列表
            </summary>
            <param name="connection"></param>
            <param name="key">关键字</param>
            <returns>数据列表</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.getList(System.Data.Common.DbConnection@,`3)">
            <summary>
            获取缓存数据集合
            </summary>
            <param name="connection"></param>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArray(`3)">
            <summary>
            获取缓存数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.GetFindArray(`3,System.Func{`0,System.Boolean})">
            <summary>
            获取缓存数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.FirstOrDefault(`3,System.Func{`0,System.Boolean})">
            <summary>
            获取一个匹配数据
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器,禁止数据库与锁操作</param>
            <returns>匹配数据,失败返回null</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.#ctor(AutoCSer.Sql.Cache.Counter.QueueList{`0,`1,`2,`3},`3)">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.GetArrayTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.#ctor(AutoCSer.Sql.Cache.Counter.QueueList{`0,`1,`2,`3},`3,System.Func{`0,System.Boolean})">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="key"></param>
            <param name="isValue"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueList`4.FindTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionaryWhere`4">
            <summary>
            字典+搜索树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组关键字类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4">
            <summary>
            字典+搜索树缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组关键字类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.getKey">
            <summary>
            分组关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.getSort">
            <summary>
            排序关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.groups">
            <summary>
            字典+搜索树缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Func{`0,`3},System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组关键字获取器</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key">数据对象的关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.onDeleted(`0,`2)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">分组关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.GetCount(`2)">
            <summary>
            获取数据数量
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.GetPage(`2,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            获取分页数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="pageSize">分页大小</param>
            <param name="currentPage">分页页号</param>
            <param name="count">数据总数</param>
            <param name="isDesc">是否逆序</param>
            <returns>分页数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.GetArray(`2)">
            <summary>
            获取数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionary`4.GetFind(`2,System.Func{`0,System.Boolean})">
            <summary>
            获取数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配委托</param>
            <returns>数据集合</returns>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionaryWhere`4.isValue">
            <summary>
            缓存值判定
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionaryWhere`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Func{`0,`3},System.Func{`0,System.Boolean})">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组关键字获取器</param>
            <param name="getSort">排序关键字获取器</param>
            <param name="isValue">缓存值判定</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionaryWhere`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionaryWhere`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionarySearchTreeDictionaryWhere`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.Value">
            <summary>
            回调对象
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.Config">
            <summary>
            SQL 配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.Connection">
            <summary>
            数据库连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.SqlCommand">
            <summary>
            数据库命令
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.SqlConnection">
            <summary>
            数据库连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.OleDbCommand">
            <summary>
            数据库命令
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.OleDbConnection">
            <summary>
            数据库连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.BinaryExpression">
            <summary>
            表示包含二元运算符的表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.ConditionalExpression">
            <summary>
            表示包含条件运算符的表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.ConstantExpression">
            <summary>
            表示具有常量值的表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.MemberExpression">
            <summary>
            表示访问字段或属性
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.MethodCallExpression">
            <summary>
            表示对静态方法或实例方法的调用
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.UnionType.UnaryExpression">
            <summary>
            表示包含一元运算符的表达式
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DbType">
            <summary>
            SQL数据类型相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DbType.UnknownSize">
            <summary>
            未知数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DbType.toCSharpTypes">
            <summary>
            SQL数据类型转C#类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DbType.toCSharpType(System.Data.SqlDbType)">
            <summary>
            根据SQL数据类型获取序列化类型
            </summary>
            <param name="type">SQL数据类型</param>
            <returns>序列化类型</returns>
        </member>
        <member name="F:AutoCSer.Sql.DbType.formCSharpTypes">
            <summary>
            C#类型转SQL数据类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DbType.formCSharpType(System.Type)">
            <summary>
            根据C#类型获取SQL数据类型
            </summary>
            <param name="type">C#类型</param>
            <returns>SQL数据类型</returns>
        </member>
        <member name="F:AutoCSer.Sql.DbType.stringTypeMap">
            <summary>
            字符串类型占位集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DbType.isStringType(System.Data.SqlDbType)">
            <summary>
            判断是否字符串类型
            </summary>
            <param name="type">数据类型</param>
            <returns>是否字符串类型</returns>
        </member>
        <member name="F:AutoCSer.Sql.DbType.textImageTypeMap">
            <summary>
            文本类型占位集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DbType.isTextImageType(System.Data.SqlDbType)">
            <summary>
            判断是否文本类型
            </summary>
            <param name="type">数据类型</param>
            <returns>是否文本类型</returns>
        </member>
        <member name="F:AutoCSer.Sql.DbType.sizes">
            <summary>
            类型默认长度
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DbType.getSize(System.Data.SqlDbType)">
            <summary>
            获取数据长度
            </summary>
            <returns>数据长度</returns>
        </member>
        <member name="F:AutoCSer.Sql.DbType.MaxEnumValue">
            <summary>
            SQL数据类型最大枚举值
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.CustomAttribute">
            <summary>
            自定义类型标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberList`4">
            <summary>
            分组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberList`4.isRemoveEnd">
            <summary>
            移除数据并使用最后一个数据移动到当前位置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.ListArray{`0}}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Boolean,System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets">获取缓存目标对象集合</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.onDeleted(`0,`2)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除的数据关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.GetCache(`2)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.Count(`2)">
            <summary>
            获取匹配数据数量
            </summary>
            <param name="key">关键字</param>
            <returns>匹配数据数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.Count(`2,System.Func{`0,System.Boolean})">
            <summary>
            获取匹配数据数量
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数据数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.FirstOrDefault(`2,System.Func{`0,System.Boolean})">
            <summary>
            获取第一个匹配数据
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器</param>
            <returns>第一个匹配数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.GetArray(`2)">
            <summary>
            获取数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.GetArray``1(`2,System.Func{`0,``0})">
            <summary>
            获取数据集合
            </summary>
            <typeparam name="arrayType"></typeparam>
            <param name="key">关键字</param>
            <param name="getValue">数组转换</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.GetFindArray(`2,System.Func{`0,System.Boolean})">
            <summary>
            获取匹配数据集合
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数据集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.GetPage(`2,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取分页数据
            </summary>
            <param name="key"></param>
            <param name="pageSize"></param>
            <param name="currentPage"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberList`4.GetPageDesc(`2,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取逆序分页数据
            </summary>
            <param name="key"></param>
            <param name="pageSize"></param>
            <param name="currentPage"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberDictionaryListWhere`5">
            <summary>
            分组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="memberKeyType"></typeparam>
            <typeparam name="targetType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberDictionaryListWhere`5.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryListWhere`5.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`1,`3},System.Func{`2,`4},System.Linq.Expressions.Expression{System.Func{`4,System.Collections.Generic.Dictionary{AutoCSer.RandomKey{`3},AutoCSer.ListArray{`0}}}},System.Func{System.Collections.Generic.IEnumerable{`4}},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getMemberKey">分组列表关键字获取器</param>
            <param name="getValue"></param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="isValue">数据匹配器</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryListWhere`5.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryListWhere`5.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberDictionaryListWhere`5.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Threading.DomainUnloadTransaction">
            <summary>
            应用程序卸载事件处理
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.DomainUnloadTransaction.action">
            <summary>
            任务执行委托
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.run">
            <summary>
            任务执行
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.RunTask">
            <summary>
            运行任务
            </summary>
            <returns>下一个 SQL 队列任务</returns>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.AddQueueTask(System.Action)">
            <summary>
            添加 SQL 队列任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.AddQueueTask``1(System.Action{``0},``0)">
            <summary>
            添加 SQL 队列任务
            </summary>
            <param name="action">任务执行委托</param>
            <param name="parameter">参数</param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.AddQueueTask``1(System.Action{``0},``0@)">
            <summary>
            添加 SQL 队列任务
            </summary>
            <param name="action">任务执行委托</param>
            <param name="parameter">参数</param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.AddTask(System.Action)">
            <summary>
            添加任务
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.AddTask``1(System.Action{``0},``0)">
            <summary>
            添加任务
            </summary>
            <param name="action">任务执行委托</param>
            <param name="parameter">参数</param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction.AddTask``1(System.Action{``0},``0@)">
            <summary>
            添加任务
            </summary>
            <param name="action">任务执行委托</param>
            <param name="parameter">参数</param>
        </member>
        <member name="T:AutoCSer.Sql.Threading.DomainUnloadTransaction`1">
            <summary>
            应用程序卸载事件处理
            </summary>
            <typeparam name="parameterType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Threading.DomainUnloadTransaction`1.Action">
            <summary>
            任务执行委托
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.DomainUnloadTransaction`1.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction`1.Run">
            <summary>
            任务执行
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.DomainUnloadTransaction`1.RunTask">
            <summary>
            运行任务
            </summary>
            <returns>下一个 SQL 队列任务</returns>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.MemberMapValue`2">
            <summary>
            反序列化池对象
            </summary>
            <typeparam name="memberMapType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.MemberMapValue`2.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.MemberMapValue`2.Value">
            <summary>
            目标数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValue`2.Set(`1,AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            设置数据
            </summary>
            <param name="value"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValue`2.toJson(AutoCSer.Json.Serializer)">
            <summary>
            对象转换成JSON字符串
            </summary>
            <param name="toJsoner">对象转换成JSON字符串</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValue`2.parseJson(AutoCSer.Json.Parser)">
            <summary>
            对象转换成JSON字符串
            </summary>
            <param name="parser">Json解析器</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValue`2.serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.MemberMapValue`2.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="deSerializer">序列化数据</param>
        </member>
        <member name="T:AutoCSer.Sql.GetQuery`1">
            <summary>
            单条记录查询信息
            </summary>
            <typeparam name="modelType">数据模型类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.GetQuery`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.GetQuery`1.Sql">
            <summary>
            SQL 语句
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.GetQuery`1.Free">
            <summary>
            释放成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Verifyer">
            <summary>
            数据列验证动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Verifyer.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Verifyer.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Verifyer.attribute">
            <summary>
            数据库表格模型配置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Verifyer.#ctor(System.Type,AutoCSer.Sql.ModelAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Verifyer.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Verifyer.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Verifyer.verifyMethods">
            <summary>
            SQL数据验证函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Verifyer.getVerifyMethod(System.Type)">
            <summary>
            SQL数据验证调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>SQL数据验证调用函数</returns>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Verifyer.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Setter">
            <summary>
            数据库模型设置动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Setter.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Setter.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Setter.indexMember">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Setter.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Setter.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Setter.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="T:AutoCSer.Sql.Column">
            <summary>
            数据列
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.SqlColumnType">
            <summary>
            表格列类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.Remark">
            <summary>
            备注说明
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.UpdateValue">
            <summary>
            新增字段时的计算子查询
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.Size">
            <summary>
            列长
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Column.IsNull">
            <summary>
            是否允许为空
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Column.IsMatch(AutoCSer.Sql.Column,System.Boolean)">
            <summary>
            判断是否匹配数据列
            </summary>
            <param name="value">数据列</param>
            <param name="isIgnoreCase">是否忽略大小写</param>
            <returns>是否匹配</returns>
        </member>
        <member name="P:AutoCSer.Sql.Column.SqlName">
            <summary>
            SQL名称
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberOrderList`4">
            <summary>
            分组列表排序缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.sorter">
            <summary>
            排序器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.ListArray{`0}}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Boolean)">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="sorter">排序器</param>
            <param name="isReset">是否初始化</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.onDeleted(`0,`2)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除数据的关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberOrderList`4.GetCache(`2)">
            <summary>
            获取缓存
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.IdentityArray">
            <summary>
            缓存专用分段二维数组参数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.IdentityArray.ArrayShift">
            <summary>
            数组长度的有效二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.IdentityArray.ArraySize">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.IdentityArray.ArraySizeAnd">
            <summary>
            数组索引计算 And 值
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.IdentityArray`1">
            <summary>
            缓存专用分段二维数组
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.IdentityArray`1.Arrays">
            <summary>
            二维数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.IdentityArray`1.arrayCount">
            <summary>
            有效数组数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.IdentityArray`1.Length">
            <summary>
            当前数组容量
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.IdentityArray`1.#ctor(System.Int32)">
            <summary>
            缓存专用分段二维数组
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.IdentityArray`1.ToSize(System.Int32)">
            <summary>
            增加数组扩展容量到指定数量
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.IdentityArray`1.GetRemove(System.Int32)">
            <summary>
            获取并清除数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.IdentityArray`1.Item(System.Int32)">
            <summary>
            获取或者设置数据(不检测位置有效性)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Cache.IdentityArray`1.Values">
            <summary>
            数据枚举
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Excel.Connection">
            <summary>
            Excel连接信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Connection.Provider">
            <summary>
            数据接口属性
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Connection.DataSource">
            <summary>
            数据源
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Connection.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Connection.Intermixed">
            <summary>
            混合数据处理方式
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Connection.IsTitleColumn">
            <summary>
            第一行是否列名
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Connection.Get">
            <summary>
            获取数据库连接信息
            </summary>
            <returns>数据库连接信息</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.Client.IdentityMemberCache`1">
            <summary>
            成员缓存
            </summary>
            <typeparam name="valueType">缓存数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Client.IdentityMemberCache`1.Id">
            <summary>
            自增标识
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Client.IdentityMemberCache`1.cache">
            <summary>
            缓存信息
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.Client.IdentityMemberCache`1.cacheLock">
            <summary>
            缓存信息访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Client.IdentityMemberCache`1.Get(System.Int32)">
            <summary>
            获取缓存数据
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.Client.IdentityMemberCache`1.GetAll">
            <summary>
            获取所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.TableAttribute">
            <summary>
            数据库表格配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.DefaultLogStreamCount">
            <summary>
            最大日志流客户端数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.DefaultOnLogStreamCount">
            <summary>
            日志流推送休眠数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.DefaultCountMemberCacheSize">
            <summary>
            计数成员缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.Name">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.TableAttribute.GetTableName(System.Type)">
            <summary>
            获取表格名称
            </summary>
            <param name="type">表格绑定类型</param>
            <returns>表格名称</returns>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.ConnectionName">
            <summary>
            数据库连接配置名称
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.TableNumber">
            <summary>
            表格编号，主要使用枚举识别同一数据模型下的不同表格
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.BaseIdentity">
            <summary>
            自增ID起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.MaxLogStreamCount">
            <summary>
            最大日志流客户端数量，默认为 16
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.OnLogStreamCount">
            <summary>
            日志流推送休眠数量，默认为 1M
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.CountMemberCacheSize">
            <summary>
            计数成员缓存数量，默认为 32K
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.IsSetIdentity">
            <summary>
            默认为 true 表示添加数据时自动设置自增标识
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.TableAttribute.IsLoadIdentity">
            <summary>
            默认为 true 表示数据库表格初始化时自动从数据库获取当前最大的自增标识，如果指定了全表缓存可以设置为 false 在缓存初始化的时候处理
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.TableAttribute.ConnectionType">
            <summary>
            数据库连接配置名称
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.LogStream.LoadedType">
            <summary>
            日志流数据完成类型加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LoadedType.Type">
            <summary>
            数据模型类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LoadedType.TableNumber">
            <summary>
            表格编号，主要使用枚举识别同一数据模型下的不同表格
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.#ctor(System.Type,System.Int32)">
            <summary>
            日志流数据完成类型加载
            </summary>
            <param name="type">数据模型类型</param>
            <param name="tableNumber">表格编号</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.Equals(System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="tableNumber"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.Equals(AutoCSer.Sql.LogStream.LoadedType)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LoadedType.loadedTypes">
            <summary>
            已经加载的数据完成类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LoadedType.loadTypes">
            <summary>
            数据完成类型加载集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.LogStream.LoadedType.loadedLock">
            <summary>
            数据完成类型加载集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.Add(System.Type,System.Int32,System.Action{AutoCSer.Sql.LogStream.LoadedType},AutoCSer.Sql.LogStream.LoadedType[])">
            <summary>
            数据完成类型注册
            </summary>
            <param name="modelType">数据模型类型</param>
            <param name="tableNumber">表格编号</param>
            <param name="onLoaded">数据完成操作</param>
            <param name="types">待加载类型集合</param>
        </member>
        <member name="M:AutoCSer.Sql.LogStream.LoadedType.Add(System.Type,System.Int32)">
            <summary>
            数据完成类型注册
            </summary>
            <param name="modelType">数据模型类型</param>
            <param name="tableNumber">表格编号</param>
        </member>
        <member name="T:AutoCSer.Sql.IgnoreMemberAttribute">
            <summary>
            数据列成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.DataModel.Inserter">
            <summary>
            添加数据动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Inserter.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Inserter.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataModel.Inserter.attribute">
            <summary>
            数据库表格模型配置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Inserter.#ctor(System.Type,AutoCSer.Sql.ModelAttribute)">
            <summary>
            动态函数
            </summary>
            <param name="modelType"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Inserter.Push(AutoCSer.Sql.Field)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Sql.DataModel.Inserter.Create``1">
            <summary>
            创建web表单委托
            </summary>
            <returns>web表单委托</returns>
        </member>
        <member name="T:AutoCSer.Sql.ColumnGroup.Column">
            <summary>
            数据列
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.ColumnGroup.Column.getDataColumns``1(System.String)">
            <summary>
            获取成员名称与类型集合
            </summary>
            <param name="name">列名前缀</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Sql.ColumnGroup.Column.GetDataColumnsMethod">
            <summary>
            获取成员名称与类型集合函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.MemberCacheLinkAttribute">
            <summary>
            成员扩展缓存初始化依赖类型声明配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkAttribute.CacheType">
            <summary>
            初始化依赖类型
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Excel.Provider">
            <summary>
            Excel接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Provider.Unknown">
            <summary>
            未知接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Provider.Jet4">
            <summary>
            只能操作Excel2007之前的.xls文件
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Excel.Provider.Ace12">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArrayWhere`4">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArrayWhere`4.isValue">
            <summary>
            缓存值判定
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArrayWhere`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.Sql.Cache.LazyOrderArray{`0}}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}},System.Func{`0,System.Boolean})">
            <summary>
            分组列表 延时排序缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="sorter">排序器</param>
            <param name="isValue">缓存值判定</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArrayWhere`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArrayWhere`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberLazyOrderArrayWhere`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Threading.SearchTreeDictionaryPageTask`2">
            <summary>
            获取分页记录集合
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="sortType">排序关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Threading.SearchTreeDictionaryPageTask`2.tree">
            <summary>
            搜索树
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.SearchTreeDictionaryPageTask`2.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.SearchTreeDictionaryPageTask`2.#ctor(System.Int32,System.Int32,System.Boolean,AutoCSer.SearchTree.Dictionary{`1,`0})">
            <summary>
            获取分页记录集合
            </summary>
            <param name="pageSize"></param>
            <param name="currentPage"></param>
            <param name="isDesc"></param>
            <param name="tree"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.SearchTreeDictionaryPageTask`2.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.SearchTreeDictionaryPageTask`2.Wait(System.Int32@)">
            <summary>
            获取分页记录集合
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.MsSql.DbType">
            <summary>
            SQL数据类型相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.DbType.defaultValues">
            <summary>
            默认值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.DbType.getDefaultValue(System.Data.SqlDbType)">
            <summary>
            获取默认值
            </summary>
            <param name="type">数据类型</param>
            <returns>默认值</returns>
        </member>
        <member name="F:AutoCSer.Sql.MsSql.DbType.sqlTypeArray">
            <summary>
            SqlServer2000 syscolumns.xtype值与SqlDbType值映射关系集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MsSql.DbType.GetType(System.Int16)">
            <summary>
            根据SqlServer syscolumns.xtype值与SqlDbType值
            </summary>
            <param name="dataType">SqlServer syscolumns.xtype值</param>
            <returns>SqlDbType值</returns>
        </member>
        <member name="T:AutoCSer.Sql.DataReader">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.DataReader.dataReaderGetMethods">
            <summary>
            基本类型设置函数
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.DataReader.GetMethod(System.Type)">
            <summary>
            获取基本类型设置函数
            </summary>
            <param name="type">基本类型</param>
            <returns>设置函数</returns>
        </member>
        <member name="F:AutoCSer.Sql.DataReader.IsDBNullMethod">
            <summary>
            判断数据是否为空
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Config">
            <summary>
            SQL 数据库配置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Config.CheckConnectionNames">
            <summary>
            检测链接类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Config.TableNamePrefixs">
            <summary>
            SQL表格名称前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Config.TableNameDepth">
            <summary>
            SQL表格名称缺省前缀深度，默认为 2
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Config.ConnectionPoolSize">
            <summary>
            连接池大小，默认为 1K
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Config.CacheMaxCount">
            <summary>
            计数缓存默认最大容器大小，默认为 1K
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Config.CheckConnectionName">
            <summary>
            检测链接类型
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.MemberListWhere`4">
            <summary>
            分组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
            <typeparam name="targetType">目标数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.MemberListWhere`4.isValue">
            <summary>
            数据匹配器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberListWhere`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`1,`2},System.Func{`2,`3},System.Linq.Expressions.Expression{System.Func{`3,AutoCSer.ListArray{`0}}},System.Func{System.Collections.Generic.IEnumerable{`3}},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="getValue">获取目标对象委托</param>
            <param name="member">缓存字段表达式</param>
            <param name="getTargets"></param>
            <param name="isValue">数据匹配器</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberListWhere`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberListWhere`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.MemberListWhere`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4">
            <summary>
            分组字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="groupKeyType">分组关键字类型</typeparam>
            <typeparam name="keyType">字典关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.getGroupKey">
            <summary>
            分组关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.getKey">
            <summary>
            字典关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.groups">
            <summary>
            分组数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Func{`0,`3},System.Boolean)">
            <summary>
            分组字典缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getGroupKey">分组关键字获取器</param>
            <param name="getKey">字典关键字获取器</param>
            <param name="isReset">是否初始化数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.onInserted(`0,`2)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
            <param name="key"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.onDeleted(`0,`2)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="groupKey">分组关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryDictionary`4.GetKeys(`2)">
            <summary>
            获取关键字集合
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.QueueDictionary`5">
            <summary>
            先进先出优先队列 字典缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="counterKeyType">缓存统计关键字类型</typeparam>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="dictionaryKeyType">字典关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.getDictionaryKey">
            <summary>
            缓存字典关键字获取器
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.#ctor(AutoCSer.Sql.Cache.Counter.Event.Cache{`0,`1,`2},System.Linq.Expressions.Expression{System.Func{`1,`3}},System.Func{`3,System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}}},System.Func{`0,`4},System.Int32)">
            <summary>
            先进先出优先队列 字典缓存
            </summary>
            <param name="counter">缓存计数器</param>
            <param name="getKey">缓存关键字获取器</param>
            <param name="getWhere">条件表达式获取器</param>
            <param name="getDictionaryKey">缓存字典关键字获取器</param>
            <param name="maxCount">缓存默认最大容器大小</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.onInserted(`0)">
            <summary>
            增加数据
            </summary>
            <param name="value">新增的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue">缓存数据</param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.getDictionary(System.Data.Common.DbConnection@,`3)">
            <summary>
            获取字典缓存
            </summary>
            <param name="connection"></param>
            <param name="key">关键字</param>
            <returns>字典缓存</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.get(System.Data.Common.DbConnection@,`3,`4)">
            <summary>
            获取匹配数据
            </summary>
            <param name="connection"></param>
            <param name="key">关键字</param>
            <param name="dictionaryKey">字典关键字</param>
            <returns>匹配数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.Get(`3,`4,`0)">
            <summary>
            获取匹配数据
            </summary>
            <param name="key">关键字</param>
            <param name="dictionaryKey">字典关键字</param>
            <param name="nullValue">失败返回值</param>
            <returns>匹配数据</returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.queue">
            <summary>
            先进先出优先队列缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.dictionaryKey">
            <summary>
            字典关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.#ctor(AutoCSer.Sql.Cache.Counter.QueueDictionary{`0,`1,`2,`3,`4},`3,`4)">
            <summary>
            获取数据
            </summary>
            <param name="queue"></param>
            <param name="key">关键字</param>
            <param name="dictionaryKey">字典关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取数据
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.QueueDictionary`5.GetTask.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Whole.DictionaryList`3">
            <summary>
            分组列表缓存
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
            <typeparam name="keyType">分组字典关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryList`3.cache">
            <summary>
            整表缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryList`3.getKey">
            <summary>
            分组字典关键字获取器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryList`3.groups">
            <summary>
            分组数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Cache.Whole.DictionaryList`3.isRemoveEnd">
            <summary>
            移除数据并使用最后一个数据移动到当前位置
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.#ctor(AutoCSer.Sql.Cache.Whole.Event.Cache{`0,`1},System.Func{`0,`2},System.Boolean,System.Boolean)">
            <summary>
            分组列表缓存
            </summary>
            <param name="cache">整表缓存</param>
            <param name="getKey">分组字典关键字获取器</param>
            <param name="isRemoveEnd">移除数据并使用最后一个数据移动到当前位置</param>
            <param name="isReset">是否绑定事件并重置数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.onInserted(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.onUpdated(`0,`0,`0,AutoCSer.Metadata.MemberMap{`1})">
            <summary>
            更新数据
            </summary>
            <param name="cacheValue"></param>
            <param name="value">更新后的数据</param>
            <param name="oldValue">更新前的数据</param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.onDeleted(`0,`2)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
            <param name="key">被删除的数据关键字</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.onDeleted(`0)">
            <summary>
            删除数据
            </summary>
            <param name="value">被删除的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.Count(`2)">
            <summary>
            获取匹配数据数量
            </summary>
            <param name="key">关键字</param>
            <returns>匹配数据数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.Count(`2,System.Func{`0,System.Boolean})">
            <summary>
            获取匹配数量
            </summary>
            <param name="key">关键字</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数量</returns>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Whole.DictionaryList`3.GetArray(`2)">
            <summary>
            获取数据集合
            </summary>
            <param name="key">关键字</param>
            <returns>数据集合</returns>
        </member>
        <member name="T:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1">
            <summary>
            获取记录
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.array">
            <summary>
            延时排序缓存数组
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.sorter">
            <summary>
            排序器
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.wait">
            <summary>
            等待缓存加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.index">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.value">
            <summary>
            数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.#ctor(System.Int32,AutoCSer.Sql.Cache.LazyOrderArray{`0},System.Func{AutoCSer.LeftArray{`0},AutoCSer.LeftArray{`0}})">
            <summary>
            获取记录
            </summary>
            <param name="index"></param>
            <param name="array"></param>
            <param name="sorter"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.RunLinkQueueTask(System.Data.Common.DbConnection@)">
            <summary>
            获取记录
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Threading.LazyOrderArrayAtTask`1.Wait">
            <summary>
            获取数据记录
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.Identity64`2">
            <summary>
            自增id标识缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Identity64`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32)">
            <summary>
            自增id标识缓存计数器
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Sql.MemberCacheLinkWait">
            <summary>
            成员扩展缓存初始化依赖类型加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.wait">
            <summary>
            成员扩展缓存初始化依赖类型加载等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.cacheTypes">
            <summary>
            成员扩展缓存初始化依赖类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.waits">
            <summary>
            依赖当前缓存初始化的类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.#ctor(AutoCSer.Sql.MemberCacheLinkWait)">
            <summary>
            成员扩展缓存初始化依赖类型加载
            </summary>
            <param name="wait">依赖当前缓存初始化的类型</param>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.#ctor(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            成员扩展缓存初始化依赖类型加载
            </summary>
            <param name="cacheTypes">成员扩展缓存初始化依赖类型集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.set(System.Collections.Generic.HashSet{System.Type})">
            <summary>
            设置成员扩展缓存初始化依赖类型集合
            </summary>
            <param name="cacheTypes">成员扩展缓存初始化依赖类型集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.set(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            当前表格缓存加载完毕
            </summary>
            <param name="tableType">当前表格类型</param>
            <param name="cacheTypes">成员扩展缓存初始化依赖类型集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.removeCacheType(System.Type)">
            <summary>
            移除成员扩展缓存初始化依赖类型
            </summary>
            <param name="cacheType"></param>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.Wait">
            <summary>
            等待成员扩展缓存初始化依赖加载
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.loadTypes">
            <summary>
            数据完成类型加载集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.loadedLock">
            <summary>
            数据完成类型加载集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.emptyCacheTypes">
            <summary>
            成员扩展缓存初始化依赖类型空集合
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.MemberCacheLinkWait.removeCacheTypes">
            <summary>
            待删除成员扩展缓存初始化依赖类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.Load(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            加载成员扩展缓存初始化依赖类型
            </summary>
            <param name="tableType">表格类型</param>
            <param name="cacheTypes">表格成员扩展缓存初始化依赖类型集合</param>
        </member>
        <member name="M:AutoCSer.Sql.MemberCacheLinkWait.Wait(System.Type)">
            <summary>
            等待成员扩展缓存初始化
            </summary>
            <param name="tableType">等待成员扩展缓存初始化的类型</param>
        </member>
        <member name="P:AutoCSer.Sql.MemberCacheLinkWait.isCacheLoaded">
            <summary>
            当前表格缓存是否加载完毕
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Excel.Client">
            <summary>
            Excel 客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.#ctor(AutoCSer.Sql.Connection)">
            <summary>
            SQL客户端操作
            </summary>
            <param name="connection">SQL连接信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.createConnection(System.Data.Common.DbConnection@)">
            <summary>
            创建 SQL 连接
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.getCommand(System.Data.Common.DbConnection,System.String)">
            <summary>
            获取SQL命令
            </summary>
            <param name="connection"></param>
            <param name="sql">SQL语句</param>
            <returns>SQL命令</returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.getAdapter(System.Data.Common.DbCommand)">
            <summary>
            获取数据适配器
            </summary>
            <param name="command">SQL命令</param>
            <returns>数据适配器</returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.GetColumn(System.Type,AutoCSer.Sql.MemberAttribute)">
            <summary>
            成员信息转换为数据列
            </summary>
            <param name="type">成员类型</param>
            <param name="memberAttribute">SQL成员信息</param>
            <returns>数据列</returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.GetValue(System.Data.Common.DbConnection,System.String)">
            <summary>
            查询单值数据
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.GetTable(System.Data.Common.DbConnection,System.String)">
            <summary>
            根据表格名称获取表格信息
            </summary>
            <param name="connection">SQL连接</param>
            <param name="tableName">表格名称</param>
            <returns>表格信息</returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.CreateTable(System.Data.Common.DbConnection,AutoCSer.Sql.TableColumnCollection)">
            <summary>
            创建表格
            </summary>
            <param name="connection">SQL连接</param>
            <param name="table">表格信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.CreateIndex(System.Data.Common.DbConnection,System.String,AutoCSer.Sql.ColumnCollection)">
            <summary>
            创建索引
            </summary>
            <param name="connection"></param>
            <param name="tableName">表格名称</param>
            <param name="columnCollection">索引列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.DeleteFields(System.Data.Common.DbConnection,AutoCSer.Sql.ColumnCollection)">
            <summary>
            删除列集合
            </summary>
            <param name="connection">SQL连接</param>
            <param name="columnCollection">删除列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.AddFields(System.Data.Common.DbConnection,AutoCSer.Sql.ColumnCollection)">
            <summary>
            新增列集合
            </summary>
            <param name="connection">SQL连接</param>
            <param name="columnCollection">新增列集合</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.GetSql``1(System.Linq.Expressions.LambdaExpression,AutoCSer.CharStream,AutoCSer.Sql.SelectQuery{``0}@)">
            <summary>
            委托关联表达式转SQL表达式
            </summary>
            <param name="expression">委托关联表达式</param>
            <param name="sqlStream">SQL表达式流</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.Select``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,AutoCSer.Sql.SelectQuery{``1}@)">
            <summary>
            获取查询信息
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection"></param>
            <param name="query">查询信息</param>
            <returns>对象集合</returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.GetByIdentity``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            查询对象
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.GetByPrimaryKey``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.GetQuery{``1}@)">
            <summary>
            查询对象
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.Update``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.Update``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.UpdateQuery{``1}@)">
            <summary>
            更新数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">匹配成员值</param>
            <param name="memberMap">成员位图</param>
            <param name="query">查询信息</param>
            <returns>更新是否成功</returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.insert``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Metadata.MemberMap{``1},AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取添加数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">添加数据</param>
            <param name="memberMap">成员位图</param>
            <param name="query">添加数据查询信息</param>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.Insert``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            添加数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.Delete``2(AutoCSer.Sql.Table{``0,``1},``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            获取删除数据 SQL 语句
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="value">删除数据</param>
            <param name="query">删除数据查询信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Sql.Excel.Client.Delete``2(AutoCSer.Sql.Table{``0,``1},System.Data.Common.DbConnection@,``0,AutoCSer.Sql.InsertQuery@)">
            <summary>
            删除数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="modelType">模型类型</typeparam>
            <param name="sqlTool">SQL操作工具</param>
            <param name="connection">SQL连接</param>
            <param name="value">添加数据</param>
            <param name="query">添加数据查询信息</param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Sql.Excel.Client.IsIndex">
            <summary>
            是否支持索引
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.Excel.Client.IsAddField">
            <summary>
            是否支持新增列
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.WaitSetValue`1">
            <summary>
            等待设置数据
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.WaitSetValue`1.wait">
            <summary>
            同步等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Sql.WaitSetValue`1.value">
            <summary>
            等待设置的数据
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.WaitSetValue`1.#ctor(`0)">
            <summary>
            等待设置数据
            </summary>
            <param name="value">设置的数据</param>
        </member>
        <member name="M:AutoCSer.Sql.WaitSetValue`1.Set(`0)">
            <summary>
            设置数据
            </summary>
            <param name="value">设置的数据</param>
            <returns>设置的数据</returns>
        </member>
        <member name="M:AutoCSer.Sql.WaitSetValue`1.Wait">
            <summary>
            等待设置数据
            </summary>
            <returns>设置的数据</returns>
        </member>
        <member name="T:AutoCSer.Sql.MemberExpression`2">
            <summary>
            成员表达式
            </summary>
            <typeparam name="targetType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Sql.MemberExpression`2.Field">
            <summary>
            字段成员
            </summary>
        </member>
        <member name="M:AutoCSer.Sql.MemberExpression`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            成员表达式
            </summary>
            <param name="member">成员表达式</param>
        </member>
        <member name="P:AutoCSer.Sql.MemberExpression`2.GetMember">
            <summary>
            获取成员
            </summary>
        </member>
        <member name="P:AutoCSer.Sql.MemberExpression`2.SetMember">
            <summary>
            设置成员
            </summary>
        </member>
        <member name="T:AutoCSer.Sql.Cache.Counter.Event.Identity`2">
            <summary>
            自增id标识缓存计数器
            </summary>
            <typeparam name="valueType">表格绑定类型</typeparam>
            <typeparam name="modelType">表格模型类型</typeparam>
        </member>
        <member name="M:AutoCSer.Sql.Cache.Counter.Event.Identity`2.#ctor(AutoCSer.Sql.Table{`0,`1},System.Int32)">
            <summary>
            自增id标识缓存计数器
            </summary>
            <param name="sqlTool">SQL操作工具</param>
            <param name="group">数据分组</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValue`1">
            <summary>
            成员位图对象绑定
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`1.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`1.Value">
            <summary>
            目标数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.ToJson(AutoCSer.Json.Serializer)">
            <summary>
            对象转换成JSON字符串
            </summary>
            <param name="serializer">对象转换成JSON字符串</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.parseJson(AutoCSer.Json.Parser)">
            <summary>
            对象转换成JSON字符串
            </summary>
            <param name="parser">Json解析器</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.Serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`1.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMapValue`2">
            <summary>
            成员位图对象绑定
            </summary>
            <typeparam name="memberMapType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`2.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMapValue`2.Value">
            <summary>
            目标数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.toJson(AutoCSer.Json.Serializer)">
            <summary>
            对象转换成JSON字符串
            </summary>
            <param name="toJsoner">对象转换成JSON字符串</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.parseJson(AutoCSer.Json.Parser)">
            <summary>
            对象转换成JSON字符串
            </summary>
            <param name="parser">Json解析器</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMapValue`2.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            反序列化
            </summary>
            <param name="deSerializer"></param>
        </member>
    </members>
</doc>
