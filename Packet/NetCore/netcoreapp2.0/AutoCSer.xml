<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoCSer</name>
    </assembly>
    <members>
        <member name="T:AutoCSer.Algorithm.QuickSort">
            <summary>
            快速排序
            </summary>
        </member>
        <member name="T:AutoCSer.Algorithm.QuickSort.Sorter`1">
            <summary>
            排序器
            </summary>
            <typeparam name="valueType">排序数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort.Sorter`1.Array">
            <summary>
            待排序数组
            </summary>
        </member>
        <member name="F:AutoCSer.Algorithm.QuickSort.Sorter`1.Comparer">
            <summary>
            排序比较器
            </summary>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sorter`1.Sort(System.Int32,System.Int32)">
            <summary>
            范围排序
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置-1</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            数组排序
            </summary>
            <typeparam name="valueType">排序数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="comparer">排序比较器</param>
        </member>
        <member name="M:AutoCSer.Algorithm.QuickSort.Sort``1(``0[],System.Func{``0,``0,System.Int32},System.Int32,System.Int32)">
            <summary>
            数组范围排序
            </summary>
            <typeparam name="valueType">排序数据类型</typeparam>
            <param name="values">待排序数组</param>
            <param name="comparer">排序比较器</param>
            <param name="startIndex">起始位置</param>
            <param name="count">排序数据数量</param>
        </member>
        <member name="T:AutoCSer.ArrayHeap`2">
            <summary>
            数组模拟最小堆
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.defaultArrayLength">
            <summary>
            默认数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.Array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.Heap">
            <summary>
            最小堆索引
            </summary>
        </member>
        <member name="F:AutoCSer.ArrayHeap`2.isStaticUnmanaged">
            <summary>
            是否固定内存申请
            </summary>
        </member>
        <member name="P:AutoCSer.ArrayHeap`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.#ctor(System.Boolean)">
            <summary>
            数组模拟最小堆
            </summary>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.Push(`0,`1@)">
            <summary>
            添加数据
            </summary>
            <param name="key">关键字</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.create">
            <summary>
            重建数据
            </summary>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.getPushIndex(`0,System.Int32)">
            <summary>
            获取添加数据位置
            </summary>
            <param name="key"></param>
            <param name="heapIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ArrayHeap`2.RemoveTop">
            <summary>
            删除堆顶数据
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeArrayMap.Read">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.#ctor(System.Byte*)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.#ctor(System.Byte*,System.UInt32)">
            <summary>
            数组位图
            </summary>
            <param name="read">当前读取位置</param>
            <param name="bit">当前位</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.Next">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeArrayMap.NextBool">
            <summary>
            获取位图数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeConfig">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeConfig.IsFullData">
            <summary>
            数据是否完整
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeConfig.IsDisposeMemberMap">
            <summary>
            是否自动释放成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMemberMapMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializer">
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
            <summary>
            二进制反数据序列化
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Boolean[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Boolean}[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Byte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Byte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Byte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.SByte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.SByte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.SByte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Int64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Int64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.UInt64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.UInt64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Single}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Single[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Single}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Double}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Double[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Double}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Decimal}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Decimal[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Decimal}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Char@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Char[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Char}@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Char}[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.DateTime}@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.DateTime[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.DateTime}[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Guid}@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Guid[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Nullable{System.Guid}[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.String[]@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberDeSerialize(System.Type@)">
            <summary>
            类型信息反序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.memberDeSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetMemberDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.memberMapDeSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetMemberMapDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Boolean[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Boolean}[]@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Byte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Byte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Byte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.SByte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.SByte[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.SByte}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt16[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt16}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int32@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt32@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt32[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt32}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int64@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Int64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Int64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt64@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.UInt64[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.UInt64}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Single@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Single[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Single}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Single}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Double@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Double[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Double}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Double}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Decimal@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Decimal[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Decimal}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Decimal}[]@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Char@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Char[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Char}@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Char}[]@)">
            <summary>
            字符反序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.DateTime@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.DateTime[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.DateTime}@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.DateTime}[]@)">
            <summary>
            时间反序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Guid@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Guid[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Guid}@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Nullable{System.Guid}[]@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.String@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.String[]@)">
            <summary>
            字符串反序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(AutoCSer.SubString@)">
            <summary>
            反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(System.Type@)">
            <summary>
            类型信息反序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.deSerializeMethods">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型反序列化函数
            </summary>
            <param name="type">基本类型</param>
            <returns>反序列化函数</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.bufferIndex">
            <summary>
            缓冲区起始位置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeSerializer.NextSize">
            <summary>
            未处理数据字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetBuffer(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取数据缓冲区
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.subArrayDeSerialize``1(AutoCSer.SubArray{``0}@)">
            <summary>
            数组对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.SubArray{System.Byte},AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.SubArray{System.Byte}@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.SubArray{System.Byte},``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.SubArray{System.Byte}@,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.SetTcpServer">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerializeTcpServer``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerializeTcpServer(AutoCSer.SubArray{System.Byte}@,System.Byte*,System.Int32)">
            <summary>
            缓冲区反序列化
            </summary>
            <param name="data"></param>
            <param name="read"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetData(System.Byte*,System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="read"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CopyTo(System.Byte*,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            复制数据
            </summary>
            <param name="read"></param>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CopyTo(System.Byte*,AutoCSer.SubArray{System.Byte}@,System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="read"></param>
            <param name="data"></param>
            <param name="dataStart"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.SetBuffer(AutoCSer.SubArray{System.Byte}@,System.Byte*)">
            <summary>
            设置数据字节数组
            </summary>
            <param name="data"></param>
            <param name="start"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerializeString(System.String@)">
            <summary>
            反序列化字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerializeString(System.Byte*@,System.Byte*)">
            <summary>
            反序列化字符串
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.Compile(System.Type[])">
            <summary>
            预编译类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.Config">
            <summary>
            反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.Buffer">
            <summary>
            数据字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.DataLength">
            <summary>
            数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.start">
            <summary>
            序列化数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.end">
            <summary>
            序列化数据结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.Read">
            <summary>
            当前读取数据位置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.DeSerializer.CustomRead">
            <summary>
            自定义序列化获取当前读取数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.State">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.points">
            <summary>
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.isReferenceMember">
            <summary>
            是否检测相同的引用成员
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.IsObjectRealType">
            <summary>
            是否检测引用类型对象的真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.isReferenceArray">
            <summary>
            是否检测数组引用
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerialize``1(System.Byte[],System.Byte*,System.Byte*,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="data"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.TypeDeSerialize``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.TypeDeSerialize``1">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">设置的自定义序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckPoint``1(``0@)">
            <summary>
            获取历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.IsRealType">
            <summary>
            是否真实类型处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.AddPoint``1(``0@)">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckMemberCount(System.Int32)">
            <summary>
            检测成员数量
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.GetMemberMap``1">
            <summary>
            检测成员位图
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.ParseJson``1(``0@)">
            <summary>
            JSON反序列化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckNull">
            <summary>
            不支持对象null解析检测
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.CheckNullValue">
            <summary>
            对象null值检测
            </summary>
            <returns>返回 0 表示 null</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.VerifyRead(System.Int32)">
            <summary>
            自定义序列化重置当前读取数据位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.MoveRead(System.Int32)">
            <summary>
            移动当前读取数据位置，负数表示自定义序列化失败
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.ReadInt">
            <summary>
            读取一个整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.createArray``1(``0[]@,System.Int32)">
            <summary>
            创建数组
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="array"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.deSerializeArray``1(``0[]@)">
            <summary>
            数组反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns>数组长度</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Boolean[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Boolean}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Byte[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Byte}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.SByte[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.SByte*,System.Nullable{System.SByte}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Int16[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Int16}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.UInt16[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.UInt16}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Int32[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Int32}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.UInt32[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.UInt32}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Int64[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Int64}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.UInt64[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.UInt64}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Single[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Single}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Double[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Double}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Decimal[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Decimal}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Char}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.DateTime[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.DateTime}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Guid[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Nullable{System.Guid}[])">
            <summary>
            反序列化数据
            </summary>
            <param name="data">起始位置</param>
            <param name="value">目标数据</param>
            <returns>结束位置</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize(System.Byte*,System.Byte*,System.Char*,System.Int32,System.Int32)">
            <summary>
            字符串反序列化
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="write">写入位置</param>
            <param name="length">写入长度</param>
            <param name="lengthSize">写入长度字节大小</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.baseSerialize``2(AutoCSer.BinarySerialize.DeSerializer,``1@)">
            <summary>
            基类反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.realTypeObject``1(AutoCSer.BinarySerialize.DeSerializer,System.Object)">
            <summary>
            真实类型反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="objectValue"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumByte``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumSByte``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumShort``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumUShort``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumInt``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumUInt``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumLong``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.EnumULong``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.leftArrayDeSerialize``1(AutoCSer.LeftArray{``0}@)">
            <summary>
            数组对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryDeSerialize``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryArrayDeSerialize``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableDeSerialize``1(System.Nullable{``0}@)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.keyValuePairDeSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedDictionaryDeSerialize``2(System.Collections.Generic.SortedDictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedListDeSerialize``2(System.Collections.Generic.SortedList{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.collection``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structCollection``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.classCollection``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryConstructorDeSerialize``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structDictionaryDeSerialize``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.classDictionaryDeSerialize``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structDeSerialize``1(``0@)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.memberClassDeSerialize``1(``0@)">
            <summary>
            引用类型成员反序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumByteMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumSByteMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumShortMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUShortMember``1(``0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.dictionaryMember``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableMemberDeSerialize``1(System.Nullable{``0}@)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedDictionaryMember``2(System.Collections.Generic.SortedDictionary{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.sortedListMember``2(System.Collections.Generic.SortedList{``0,``1}@)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumByteArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumSByteArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumShortArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUShortArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumIntArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUIntArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumLongArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumULongArray``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableArray``1(System.Nullable{``0}[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structArray``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.array``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.nullableArrayMember``1(System.Nullable{``0}[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.structArrayMember``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.arrayMember``1(``0[]@)">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumByteArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumSByteArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumShortArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUShortArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumIntArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumUIntArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumLongArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.enumULongArrayMember``1(``0[]@)">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte[],``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte[],AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte},``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte}@,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte},AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.LeftArray{System.Byte}@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.UnmanagedStream,``0@,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="startIndex">数据起始位置</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(AutoCSer.UnmanagedStream,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="startIndex">数据起始位置</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="size">数据字节长度</param>
            <param name="value">目标对象</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte*,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="size">数据字节长度</param>
            <param name="config">配置参数</param>
            <returns>目标对象</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializer.DeSerialize``1(System.Byte[],System.Byte*,System.Int32,``0@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="buffer"></param>
            <param name="data"></param>
            <param name="size"></param>
            <param name="value"></param>
            <param name="config"></param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeMethodCache">
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.SubArrayDeSerializeMethod">
            <summary>
            数组对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.structDeSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.memberClassDeSerializeMethod">
            <summary>
            序列化接口函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumByteMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumSByteMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumShortMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUShortMemberMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumIntMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUIntMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumLongMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumULongMethod">
            <summary>
            枚举反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.dictionaryMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.nullableMemberDeSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.sortedDictionaryMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.sortedListMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.nullableArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.structArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.arrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumByteArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumSByteArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumShortArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUShortArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumIntArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumUIntArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumLongArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.enumULongArrayMemberMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.memberMethods">
            <summary>
            未知类型反序列化调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMethodCache.GetMember(System.Type)">
            <summary>
            未知类型枚举反序列化委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型反序列化委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.BaseSerializeMethod">
            <summary>
            基类反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.LeftArrayDeSerializeMethod">
            <summary>
            数组对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.DictionaryDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.NullableDeSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.KeyValuePairDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.SortedDictionaryDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.SortedListDeSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.StructCollectionMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.ClassCollectionMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.StructDictionaryDeSerializeMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.ClassDictionaryDeSerializeMethod">
            <summary>
            集合反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumByteArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumSByteArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumShortArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumUShortArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumIntArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumUIntArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumLongArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.EnumULongArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.NullableArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.StructArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.ArrayMethod">
            <summary>
            数组反序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.realDeSerializers">
            <summary>
            真实类型序列化函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeMethodCache.realTypeObjectMethod">
            <summary>
            基类反序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMethodCache.GetRealDeSerializer(System.Type)">
            <summary>
            获取真实类型序列化函数
            </summary>
            <param name="type">数组类型</param>
            <returns>真实类型序列化函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeResult">
            <summary>
            反序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeResult.DataLength">
            <summary>
            数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeResult.State">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.DeSerializeResult.op_Implicit(AutoCSer.BinarySerialize.DeSerializeResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.DeSerializeState">
            <summary>
            反序列化状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.UnknownData">
            <summary>
            数据不可识别
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberMap">
            <summary>
            成员位图检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberMapType">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberMapVerify">
            <summary>
            成员位图数量验证失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.HeaderError">
            <summary>
            头部数据不匹配
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.EndVerify">
            <summary>
            结束验证错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.FullDataError">
            <summary>
            数据完整检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.NoPoint">
            <summary>
            没有命中历史对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.IndexOutOfRange">
            <summary>
            数据长度不足
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.NotNull">
            <summary>
            不支持对象 null 解析检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.MemberIndex">
            <summary>
            成员索引检测失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.JsonError">
            <summary>
            JSON反序列化失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.RemoteTypeError">
            <summary>
            远程类型加载失败
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.DeSerializeState.Custom">
            <summary>
            自定义序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.Fields`1">
            <summary>
            字段集合信息
            </summary>
            <typeparam name="fieldType"></typeparam>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.FixedFields">
            <summary>
            固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.FieldArray">
            <summary>
            非固定序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.JsonFields">
            <summary>
            JSON混合序列化字段
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Fields`1.FixedSize">
            <summary>
            固定序列化字段字节数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.FieldSize">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.Field">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.FixedSize">
            <summary>
            固定分组排序字节数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.#ctor(AutoCSer.Metadata.FieldIndex)">
            <summary>
            字段信息
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.FieldSize.FixedSizeSort(AutoCSer.BinarySerialize.FieldSize,AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.FieldSize.fixedSizes">
            <summary>
            固定类型字节数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.IgnoreMemberAttribute">
            <summary>
            二进制数据序列化成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.JsonMemberAttribute">
            <summary>
            二进制数据序列化成员 JSON 扩展配置
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.JsonMemberAttribute.GetIsJson">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeArrayMap">
            <summary>
            数组位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Bit">
            <summary>
            当前位
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Map">
            <summary>
            当前位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeArrayMap.Write">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.UnmanagedStream,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.#ctor(AutoCSer.UnmanagedStream,System.Int32,System.Int32)">
            <summary>
            数组位图
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="arrayLength">数组长度</param>
            <param name="prepLength">附加长度</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Boolean)">
            <summary>
            添加数据
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.Next(System.Nullable{System.Boolean})">
            <summary>
            添加数据
            </summary>
            <param name="value">是否写位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeArrayMap.End(AutoCSer.UnmanagedStream)">
            <summary>
            位图写入结束
            </summary>
            <param name="stream">序列化数据流</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeAttribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsBaseType">
            <summary>
            是否作用于未知派生类型，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsJson">
            <summary>
            当没有 JSON 序列化成员时是否预留 JSON 序列化标记，默认为 false
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsReferenceMember">
            <summary>
            是否检测相同的引用成员(作为根节点时有效)，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsMemberMap">
            <summary>
            是否序列化成员位图，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeAttribute.IsAnonymousFields">
            <summary>
            是否选择匿名字段，默认为 false
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeAttribute.#ctor">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeAttribute.#ctor(System.Boolean)">
            <summary>
            二进制数据序列化类型配置
            </summary>
            <param name="isReferenceMember">是否检测相同的引用成员</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeConfig">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.HeaderMapValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.HeaderMapAndValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.MemberMapValue">
            <summary>
            是否序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.ObjectRealTypeValue">
            <summary>
            是否检测引用类型对象的真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.IsRealType">
            <summary>
            是否检测引用类型对象的真实类型
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.SerializeConfig.HeaderValue">
            <summary>
            序列化头部数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeConfig.HeaderValueCache">
            <summary>
            序列化头部数据缓存
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeCustomAttribute">
            <summary>
            自定义类型成员标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberAttribute">
            <summary>
            二进制数据序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberAttribute.IsJson">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="P:AutoCSer.BinarySerialize.SerializeMemberAttribute.GetIsJson">
            <summary>
            是否采用 JSON 混合序列化
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMap">
            <summary>
            自定义序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMap.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMap.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMap.JsonMemberMap">
            <summary>
            JSON序列化成员位图
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMemberMapMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.Serializer">
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Boolean)">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Boolean[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Boolean}[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Byte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Byte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Byte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.SByte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.SByte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.SByte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Int64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Int64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.UInt64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.UInt64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Single)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Single[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Single})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Single}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Double)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Double[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Double})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Double}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Decimal)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Decimal[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Decimal})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Decimal}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Char)">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Char[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Char}[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.DateTime)">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.DateTime[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.DateTime})">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.DateTime}[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Guid[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Guid})">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Nullable{System.Guid}[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.String[])">
            <summary>
            字符串序列化
            </summary>
            <param name="array">字符串数组</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.memberSerialize(System.Type)">
            <summary>
            类型信息序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.memberSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetMemberSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.memberMapSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetMemberMapSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Boolean)">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Boolean[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Boolean}[])">
            <summary>
            逻辑值序列化
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Byte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Byte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.LeftArray{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Byte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.SByte)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.SByte[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.SByte}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt16)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt16[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt16}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt32)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt32[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt32})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt32}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Int64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Int64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt64)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.UInt64[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt64})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.UInt64}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Single)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Single[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Single})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Single}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Double)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Double[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Double})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Double}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Decimal)">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Decimal[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Decimal}[])">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Char)">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Char[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Char}[])">
            <summary>
            字符序列化
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.DateTime)">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.DateTime[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.DateTime})">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.DateTime}[])">
            <summary>
            时间序列化
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Guid[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Guid})">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Nullable{System.Guid}[])">
            <summary>
            Guid序列化
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.String[])">
            <summary>
            字符串序列化
            </summary>
            <param name="array">字符串数组</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.SubString)">
            <summary>
            字符串序列化
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Type)">
            <summary>
            类型信息序列化
            </summary>
            <param name="value">类型信息</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.SubArray{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            预增数据流长度并序列化数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.subArraySerialize``1(AutoCSer.SubArray{``0})">
            <summary>
            数组序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SerializeNotNull``1(``0,System.Byte*,System.Int32,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="data">数据</param>
            <param name="length">数据字节长度</param>
            <param name="config">序列化配置参数</param>
            <returns>警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SetTcpServer">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SerializeTcpServer``1(``0@)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SerializeTcpServerNext``1(``0@)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SerializeTcpServer``1(``0,AutoCSer.UnmanagedStream)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Compile(System.Type[])">
            <summary>
            预编译类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.NullValue">
            <summary>
            空对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.NullableHasValue">
            <summary>
            可空类型存在数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.RealTypeValue">
            <summary>
            真实类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.DefaultAttribute">
            <summary>
            默认二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.Stream">
            <summary>
            序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.Config">
            <summary>
            序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.CurrentMemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.jsonStream">
            <summary>
            JSON序列化输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.JsonMemberMap">
            <summary>
            JSON序列化成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.jsonConfig">
            <summary>
            JSON序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.points">
            <summary>
            历史对象指针位置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.isReferenceMember">
            <summary>
            是否支持循环引用处理
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.isReferenceArray">
            <summary>
            是否检测数组引用
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.Serializer.streamStartIndex">
            <summary>
            数据流起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.serialize``1(``0,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.serialize``1(``0)">
            <summary>
            对象序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.TypeSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.CheckPoint``1(``0)">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.checkPoint``1(``0[])">
            <summary>
            添加历史对象
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SerializeMemberMap``1">
            <summary>
            序列化成员位图
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.ResetJsonStream(System.Void*,System.Int32)">
            <summary>
            获取JSON序列化输出缓冲区
            </summary>
            <param name="data"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetJsonConfig(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取JSON序列化配置参数
            </summary>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetJsonMemberMap``1(AutoCSer.Metadata.MemberMap,System.Int32[])">
            <summary>
            获取JSON成员位图
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="memberMap"></param>
            <param name="memberIndexs"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.GetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">设置的自定义序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.SetCustomMemberMap(AutoCSer.BinarySerialize.SerializeMemberMap@)">
            <summary>
            恢复自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Boolean[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Boolean}[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Void*,System.Int32,System.Int32)">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">数据流</param>
            <param name="data">数据,不能为null</param>
            <param name="arrayLength">数据数量</param>
            <param name="size">单个数据字节数</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Byte[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,AutoCSer.LeftArray{System.Byte}@)">
            <summary>
            预增数据流长度并序列化数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Byte}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.SByte[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.SByte}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Int16[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int16}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.UInt16[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt16}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Int32[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int32}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.UInt32[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt32}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Int64[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int64}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.UInt64[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt64}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Single[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Single}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Double[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Double}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Decimal[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Decimal}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Char}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.DateTime[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.DateTime}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Guid[])">
            <summary>
            预增数据流长度并写入长度与数据(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="data">数据,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Guid}[])">
            <summary>
            序列化可空数组
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="array">数组数据</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(System.Char*,AutoCSer.UnmanagedStream,System.Int32)">
            <summary>
            字符串序列化
            </summary>
            <param name="valueFixed"></param>
            <param name="stream"></param>
            <param name="stringLength"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize(AutoCSer.UnmanagedStream,AutoCSer.SubString@)">
            <summary>
            预增数据流长度并序列化字符串(4字节对齐)
            </summary>
            <param name="stream">序列化数据流</param>
            <param name="value">字符串,不能为null</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.realTypeObject``1(AutoCSer.BinarySerialize.Serializer,System.Object)">
            <summary>
            真实类型序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.baseSerialize``2(AutoCSer.BinarySerialize.Serializer,``1)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumByteArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumSByteArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumShortArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUShortArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumIntArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUIntArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumLongArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumULongArray``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableArray``1(System.Nullable{``0}[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structArray``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.leftArraySerialize``1(AutoCSer.LeftArray{``0})">
            <summary>
            数组序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.dictionarySerialize``3(``0)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableSerialize``1(AutoCSer.BinarySerialize.Serializer,System.Nullable{``0})">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.keyValuePairSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structDictionary``3(``0)">
            <summary>
            集合转换
            </summary>
            <param name="dictionary">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classDictionary``3(``0)">
            <summary>
            集合转换
            </summary>
            <param name="dictionary">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumSByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumSByteCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumUShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumUShortCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumUIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumUIntCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumLongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumLongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structEnumULongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classEnumULongCollection``2(``1)">
            <summary>
            枚举集合序列化
            </summary>
            <param name="collection">枚举集合序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structCollection``2(``1)">
            <summary>
            集合转换
            </summary>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.classCollection``2(``1)">
            <summary>
            集合转换
            </summary>
            <param name="collection">对象集合</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structSerialize``1(``0)">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.MemberClassSerialize``1(``0)">
            <summary>
            引用类型成员序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumByteMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumSByteMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumShortMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUShortMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumIntMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUIntMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumLongMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumULongMember``1(``0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.dictionaryMember``3(``0)">
            <summary>
            字典序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableMemberSerialize``1(System.Nullable{``0})">
            <summary>
            对象序列化
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumByteArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumSByteArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumShortArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUShortArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumIntArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumUIntArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumLongArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.enumULongArrayMember``1(``0[])">
            <summary>
            枚举数组序列化
            </summary>
            <param name="array">枚举数组序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.nullableArrayMember``1(System.Nullable{``0}[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.structArrayMember``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.arrayMember``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.Serializer.Serialize``1(``0,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeMethodCache">
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.SubArraySerializeMethod">
            <summary>
            数组序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.memberMethods">
            <summary>
            未知类型序列化调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumByteArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumSByteArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumShortArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUShortArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumIntArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUIntArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumLongArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumULongArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.nullableArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.structArrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.arrayMemberMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumByteMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumSByteMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumShortMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUShortMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumIntMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumUIntMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumLongMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.enumULongMemberMethod">
            <summary>
            枚举转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.dictionaryMemberMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.nullableMemberSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.structSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.memberClassSerializeMethod">
            <summary>
            引用类型成员序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetMember(System.Type)">
            <summary>
            未知类型枚举序列化委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型序列化委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],System.Boolean,System.Int32@)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fieldIndexs"></param>
            <param name="isJson"></param>
            <param name="memberCountVerify"></param>
            <returns>字段成员集合</returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.BaseSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumByteArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumSByteArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumShortArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumUShortArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumIntArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumUIntArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumLongArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.EnumULongArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.NullableArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ArrayMethod">
            <summary>
            数组转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.LeftArraySerializeMethod">
            <summary>
            数组序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.DictionarySerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.NullableSerializeMethod">
            <summary>
            对象序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.KeyValuePairSerializeMethod">
            <summary>
            字典序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructDictionaryMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassDictionaryMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumSByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumSByteCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumUShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumUShortCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumUIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumUIntCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumLongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumLongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructEnumULongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassEnumULongCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.StructCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.ClassCollectionMethod">
            <summary>
            集合序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.realSerializers">
            <summary>
            真实类型序列化函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.realTypeObjectMethod">
            <summary>
            真实类型序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetRealSerializer(System.Type)">
            <summary>
            获取真实类型序列化函数
            </summary>
            <param name="type">数组类型</param>
            <returns>真实类型序列化函数</returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.GetCustom(System.Type,System.Boolean)">
            <summary>
            获取自定义序列化函数信息
            </summary>
            <param name="type"></param>
            <param name="isSerializer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.isReferenceMember``1">
            <summary>
            是否支持循环引用处理
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.isReferenceMemberMethod">
            <summary>
            是否支持循环引用处理函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeMethodCache.isReferenceMembers">
            <summary>
            是否支持循环引用处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.IsReferenceMember(System.Type)">
            <summary>
            是否支持循环引用处理
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeResult">
            <summary>
            序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeResult.Data">
            <summary>
            序列化数据
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeResult.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.SerializeResult.op_Implicit(AutoCSer.BinarySerialize.SerializeResult)~System.Byte[]">
            <summary>
            序列化数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.BinarySerialize.SerializeWarning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarning.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.SerializeWarning.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeSerializer`1">
            <summary>
            二进制数据反序列化
            </summary>
            <summary>
            二进制数据反序列化
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.DeSerializeTcpServer(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeSerializer`1.deSerialize">
            <summary>
            二进制数据反序列化委托
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberMapDeSerialize">
            <summary>
            二进制数据反序列化委托
            </summary>
            <param name="memberMap">成员位图</param>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.attribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.DefaultDeSerializer">
            <summary>
            反序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fixedMemberDeSerializer">
            <summary>
            固定分组成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fixedMemberMapDeSerializer">
            <summary>
            固定分组成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberDeSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberMapDeSerializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.fixedFillSize">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeDeSerializer`1.IsReferenceMember">
            <summary>
            是否支持循环引用处理
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.DeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.StructDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.ClassDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.classDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.MemberDeSerialize(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.BaseDeSerialize``1(AutoCSer.BinarySerialize.DeSerializer,``0@)">
            <summary>
            对象反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.RealType(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            真实类型反序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.realType(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            真实类型
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.fromNull(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            不支持对象转换null
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.noConstructor(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            找不到构造函数
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumByte(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumSByte(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumShort(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumUShort(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumInt(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumUInt(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumLong(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeDeSerializer`1.enumULong(AutoCSer.BinarySerialize.DeSerializer,`0@)">
            <summary>
            枚举值序列化
            </summary>
            <param name="deSerializer">二进制数据反序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.TypeSerializer`1">
            <summary>
            二进制数据序列化
            </summary>
            <summary>
            二进制数据序列化
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.SerializeTcpServer(AutoCSer.BinarySerialize.Serializer,`0@)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.attribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.DefaultSerializer">
            <summary>
            序列化委托
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedMemberSerializer">
            <summary>
            固定分组成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedMemberMapSerializer">
            <summary>
            固定分组成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberSerializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员位图序列化
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberMap">
            <summary>
            JSON混合序列化位图
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.jsonMemberIndexs">
            <summary>
            JSON混合序列化成员索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.memberCountVerify">
            <summary>
            序列化成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedSize">
            <summary>
            固定分组字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.fixedFillSize">
            <summary>
            固定分组填充字节数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.TypeSerializer`1.IsReferenceMember">
            <summary>
            是否支持循环引用处理
            </summary>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.Serialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.StructSerialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.ClassSerialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.MemberSerialize(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.RealTypeObject(AutoCSer.BinarySerialize.Serializer,System.Object)">
            <summary>
            真实类型序列化
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.BaseSerialize``1(AutoCSer.BinarySerialize.Serializer,``0)">
            <summary>
            对象序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumByte(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumSByte(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumShort(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumUShort(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumInt(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumUInt(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumLong(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.enumULong(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            枚举值序列化
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">枚举值序列化</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.toNull(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            不支持对象转换null
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.BinarySerialize.TypeSerializer`1.noConstructor(AutoCSer.BinarySerialize.Serializer,`0)">
            <summary>
            找不到构造函数
            </summary>
            <param name="serializer">二进制数据序列化</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.BinarySerialize.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.DeSerializeConfig">
            <summary>
            二进制反序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.SerializeConfig">
            <summary>
            二进制序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.BinarySerialize.UnionType.SerializeAttribute">
            <summary>
            二进制数据序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.CharStream">
            <summary>
            内存字符流
            </summary>
            <summary>
            内存字符流
            </summary>
            <summary>
            内存字符流
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Decimal)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.CopyJsonNotNull(System.String)">
            <summary>
            输出 JSON 字符串，不处理转义符
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.String)">
            <summary>
            写入 JSON 字符串
            </summary>
            <param name="value">不能为 null</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(AutoCSer.SubString)">
            <summary>
            写入 JSON 字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.JavascriptUnescape(AutoCSer.SubArray{System.Byte})">
            <summary>
            模拟javascript解码函数unescape
            </summary>
            <param name="value">原字符串,长度必须大于 0</param>
        </member>
        <member name="M:AutoCSer.CharStream.javascriptUnescape(System.Byte*,System.Byte*)">
            <summary>
            模拟javascript解码函数unescape
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:AutoCSer.CharStream.Char">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:AutoCSer.CharStream.CurrentChar">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="P:AutoCSer.CharStream.Length">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.#ctor(System.Int32)">
            <summary>
            内存数据流
            </summary>
            <param name="length">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.CharStream.#ctor(System.Char*,System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data">无需释放的数据</param>
            <param name="length">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.CharStream.GetPrepSizeCurrent(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="size">增加长度</param>
        </member>
        <member name="M:AutoCSer.CharStream.PrepLength(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="length">增加长度</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeWrite(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteNotNull(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeWrite(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.SimpleWriteNotNull(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeSimpleWrite(System.String)">
            <summary>
            写字符串(无需预增数据流)
            </summary>
            <param name="value">字符串,长度必须>0</param>
        </member>
        <member name="M:AutoCSer.CharStream.SimpleWriteNotNull(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.CharStream.UnsafeSimpleWriteNotNull(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置,不能为null</param>
            <param name="count">写入字符数，必须>0</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonInfinity(System.Single)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonInfinity(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonNaN">
            <summary>
            输出非数字值
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WritePositiveInfinity">
            <summary>
            输出正无穷
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteNegativeInfinity">
            <summary>
            输出负无穷
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.writeDoubleMaxValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.writeDoubleMinValue(System.Double)">
            <summary>
            输出 double 最大值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonNull">
            <summary>
            输出 null 值
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonObject">
            <summary>
            输出空对象
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonObjectString">
            <summary>
            输出对象字符串 [object Object]
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonArray">
            <summary>
            输出空数组
            </summary>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonBool(System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Byte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.SByte)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Int16)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.UInt16)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Int32)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.UInt32)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Int64,System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
            <param name="isMaxToString">超出最大有效精度是否转换成字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.writeJson(System.Int64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.UInt64,System.Boolean)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
            <param name="isMaxToString">超出最大有效精度是否转换成字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.writeJson(System.UInt64)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Single)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Double)">
            <summary>
            输出 double 值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Char,System.Char)">
            <summary>
            数字转换成字符串
            </summary>
            <param name="value">数字值</param>
            <param name="nullChar">空字符替换</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Char*,System.Int32,System.Char)">
            <summary>
            写入 JSON 字符串
            </summary>
            <param name="stringStart">起始位置</param>
            <param name="stringLength">字符串长度</param>
            <param name="nullChar">空字符替换</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonDictionaryKey(System.String)">
            <summary>
            字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonOther(System.DateTime)">
            <summary>
            时间转字符串 第三方格式 /Date(xxx)/
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJsonString(System.DateTime)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.DateTime)">
            <summary>
            时间转字符串
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:AutoCSer.CharStream.WriteJson(System.Guid@)">
            <summary>
            Guid转换成字符串
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="T:AutoCSer.CodeGenerator.CombinationTemplateConfig">
            <summary>
            自定义简单组合模板参数
            </summary>
        </member>
        <member name="F:AutoCSer.CodeGenerator.CombinationTemplateConfig.TemplatePath">
            <summary>
            自定义模板相对项目路径
            </summary>
        </member>
        <member name="T:AutoCSer.Config.Loader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.configNamespace">
            <summary>
            配置加载程序集名称
            </summary>
        </member>
        <member name="T:AutoCSer.Config.Loader.key">
            <summary>
            配置关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.key.type">
            <summary>
            配置类型
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.key.name">
            <summary>
            配置名称
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.key.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.#ctor(System.Type,System.String)">
            <summary>
            配置关键字
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.Equals(AutoCSer.Config.Loader.key)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.key.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Config.Loader.configs">
            <summary>
            配置集合
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Loader.configLock">
            <summary>
            配置访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Config.Loader.GetObject(System.Type,System.String)">
            <summary>
            获取配置项数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.Get``1(System.String)">
            <summary>
            获取配置项数据
            </summary>
            <typeparam name="valueType">配置数据类型</typeparam>
            <param name="name">配置名称</param>
            <returns>配置项数据</returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.check(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            检测程序集名称
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:AutoCSer.Config.Loader.checkName(System.Reflection.Assembly)">
            <summary>
            检测程序集名称
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.getConfigs(System.Reflection.Assembly)">
            <summary>
            获取配置数据
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Config.Loader.load(System.Reflection.Assembly)">
            <summary>
            配置加载检测
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:AutoCSer.Config.Loader.set(AutoCSer.KeyValue{AutoCSer.Config.Loader.key,System.Object})">
            <summary>
            设置配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="T:AutoCSer.Config.MemberAttribute">
            <summary>
            配置项
            </summary>
        </member>
        <member name="F:AutoCSer.Config.MemberAttribute.Name">
            <summary>
            配置名称，默认为空字符串表示默认名称，null 表示使用定义名称
            </summary>
        </member>
        <member name="T:AutoCSer.Config.Pub">
            <summary>
            公用全局配置
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.IsDebug">
            <summary>
            是否调试模式
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.Encoding">
            <summary>
            全局编码
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.encodingCache">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:AutoCSer.Config.Pub.EncodingCache">
            <summary>
            编码
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.CachePath">
            <summary>
            缓存文件主目录
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.IsService">
            <summary>
            是否 window 服务模式
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.DefaultPoolCount">
            <summary>
            缓存池默认缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Config.Pub.YieldPoolCount">
            <summary>
            链表缓存池默认缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Config.Pub.GetYieldPoolCount(System.Type)">
            <summary>
            获取链表缓存池默认缓存数量
            </summary>
            <param name="type">缓存数据类型</param>
            <returns>链表缓存池默认缓存数量</returns>
        </member>
        <member name="F:AutoCSer.Config.Pub.Default">
            <summary>
            默认全局配置
            </summary>
        </member>
        <member name="T:AutoCSer.Config.TypeAttribute">
            <summary>
            配置容器类型
            </summary>
        </member>
        <member name="T:AutoCSer.Config.UnionLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Config.UnionLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Config.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Config.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Config.UnionType.Pub">
            <summary>
            公用全局配置
            </summary>
        </member>
        <member name="T:AutoCSer.Data.MemberAttribute">
            <summary>
            数据成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Data.MemberAttribute.PrimaryKeyIndex">
            <summary>
            主键索引,0标识非主键
            </summary>
        </member>
        <member name="F:AutoCSer.Data.MemberAttribute.MaxStringLength">
            <summary>
            字符串最大长度验证
            </summary>
        </member>
        <member name="F:AutoCSer.Data.MemberAttribute.Group">
            <summary>
            分组标识
            </summary>
        </member>
        <member name="F:AutoCSer.Data.MemberAttribute.IsFixedLength">
            <summary>
            是否固定长度
            </summary>
        </member>
        <member name="F:AutoCSer.Data.MemberAttribute.IsIdentity">
            <summary>
            是否自增
            </summary>
        </member>
        <member name="F:AutoCSer.Data.MemberAttribute.IsNull">
            <summary>
            是否允许空值
            </summary>
        </member>
        <member name="T:AutoCSer.Data.Model`1">
            <summary>
            数据模型
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="M:AutoCSer.Data.Model`1.GetPrimaryKeyGetter``1(System.String,System.Reflection.FieldInfo[])">
            <summary>
            获取关键字获取器
            </summary>
            <param name="name"></param>
            <param name="primaryKeys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Data.Model`1.GetPrimaryKeySetter``1(System.String,System.Reflection.FieldInfo[])">
            <summary>
            获取关键字设置器
            </summary>
            <param name="name"></param>
            <param name="primaryKeys"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Data.Model`1.getIdentityGetter32(System.String,System.Reflection.FieldInfo)">
            <summary>
            获取自增字段获取器
            </summary>
            <param name="name"></param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Data.PrimaryKey`2">
            <summary>
            组合关键字
            </summary>
            <typeparam name="keyType1">关键字类型1</typeparam>
            <typeparam name="keyType2">关键字类型2</typeparam>
        </member>
        <member name="F:AutoCSer.Data.PrimaryKey`2.Key1">
            <summary>
            关键字1
            </summary>
        </member>
        <member name="F:AutoCSer.Data.PrimaryKey`2.Key2">
            <summary>
            关键字2
            </summary>
        </member>
        <member name="M:AutoCSer.Data.PrimaryKey`2.GetHashCode">
            <summary>
            哈希编码
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Data.PrimaryKey`2.Equals(System.Object)">
            <summary>
            关键字比较
            </summary>
            <param name="obj">关键字</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Data.PrimaryKey`2.Equals(AutoCSer.Data.PrimaryKey{`0,`1})">
            <summary>
            关键字比较
            </summary>
            <param name="other">关键字</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Data.PrimaryKey`2.CompareTo(AutoCSer.Data.PrimaryKey{`0,`1})">
            <summary>
            关键字大小
            </summary>
            <param name="other">关键字</param>
            <returns>比较结果</returns>
        </member>
        <member name="T:AutoCSer.Data.PrimaryKeyAttribute">
            <summary>
            数据关键字 代码生成配置
            </summary>
        </member>
        <member name="F:AutoCSer.Data.PrimaryKeyAttribute.Default">
            <summary>
            默认代码生成配置
            </summary>
        </member>
        <member name="F:AutoCSer.Data.PrimaryKeyAttribute.IsComparable">
            <summary>
            是否有序比较
            </summary>
        </member>
        <member name="T:AutoCSer.Date">
            <summary>
            日期相关操作
            </summary>
            <summary>
            日期相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Date.weekData">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:AutoCSer.Date.monthData">
            <summary>
            月份
            </summary>
        </member>
        <member name="F:AutoCSer.Date.ToByteLength">
            <summary>
            时间转字节流长度
            </summary>
        </member>
        <member name="M:AutoCSer.Date.toUniversalTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.ToBytes(System.DateTime,System.Byte*)">
            <summary>
            时间转字节流
            </summary>
            <param name="date">时间</param>
            <param name="data">写入数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Date.UniversalToBytes(System.DateTime,System.Byte*)">
            <summary>
            时间转字节流
            </summary>
            <param name="date">时间</param>
            <param name="data">写入数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Date.ToBytes(System.DateTime)">
            <summary>
            时间转字节流
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.UniversalNewBytes(System.DateTime)">
            <summary>
            时间转字节流
            </summary>
            <param name="date">时间</param>
            <returns>字节流</returns>
        </member>
        <member name="M:AutoCSer.Date.UniversalByteEquals(System.DateTime,AutoCSer.SubArray{System.Byte})">
            <summary>
            判断时间是否相等
            </summary>
            <param name="date"></param>
            <param name="dataArray"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.toDateString(System.DateTime,System.Char)">
            <summary>
            时间转换成日期字符串(yyyy/MM/dd)
            </summary>
            <param name="time">时间</param>
            <param name="split">分隔符</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Date.MillisecondTicks">
            <summary>
            每毫秒计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.SecondTicks">
            <summary>
            每秒计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.MinutesTicks">
            <summary>
            每分钟计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.DayTiks">
            <summary>
            一天的计时周期数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.LocalTimeTicks">
            <summary>
            本地时钟周期
            </summary>
        </member>
        <member name="T:AutoCSer.Date.NowTime">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.Now">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.UtcNow">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="M:AutoCSer.Date.NowTime.Set">
            <summary>
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Date.NowTime.SetUtc">
            <summary>
            重置时间
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Date.NowTime.timer">
            <summary>
            刷新时间的定时器
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.TimerInterval">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.NextSecondTicks">
            <summary>
            下一秒时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.CurrentSeconds">
            <summary>
            当前时钟秒数计数
            </summary>
        </member>
        <member name="T:AutoCSer.Date.NowTime.OnTimeFlag">
            <summary>
            定时触发类型
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.LogFile">
            <summary>
            文件日志输出
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.TcpServerSocketTimerLink">
            <summary>
            TCP 服务端套接字超时处理
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.TcpClientCheckTimer">
            <summary>
            TCP 客户端心跳检测处理
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.TcpSimpleClientCheckTimer">
            <summary>
            TCP 客户端心跳检测处理
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.TcpRegister">
            <summary>
            TCP 注册服务保存信息
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.HttpSession">
            <summary>
            HTTP 会话刷新
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.CreateFlieTimeoutWatcher">
            <summary>
            新建文件监视处理
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.SqlCountMember">
            <summary>
            Sql 成员计数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.CacheFile">
            <summary>
            缓存文件刷新
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.OnTimeFlag.CacheTimeout">
            <summary>
            缓存数据超时处理
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.Flag">
            <summary>
            定时触发类型
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.TcpSimpleServerOnTime">
            <summary>
            定时触发 TCP 应答服务扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.WebViewOnTime">
            <summary>
            定时触发 WEB 扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.SqlOnTime">
            <summary>
            定时触发 Sql 扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.CacheOnTime">
            <summary>
            定时触发 缓存 扩展
            </summary>
        </member>
        <member name="F:AutoCSer.Date.NowTime.KeyValueStreamOnTime">
            <summary>
            定时触发 K-V 缓存数据库 扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Date.NowTime.refreshTime(System.Object)">
            <summary>
            刷新时间
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:AutoCSer.Date.NowTimerInterval">
            <summary>
            时间更新间隔
            </summary>
        </member>
        <member name="P:AutoCSer.Date.Now">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="P:AutoCSer.Date.UtcNow">
            <summary>
            精确到秒的时间
            </summary>
        </member>
        <member name="F:AutoCSer.Date.SqlMillisecondSize">
            <summary>
            时间转换字符串字节长度
            </summary>
        </member>
        <member name="M:AutoCSer.Date.ToSqlMillisecond(System.DateTime,AutoCSer.CharStream)">
            <summary>
            时间转换成字符串(精确到毫秒)
            </summary>
            <param name="time">时间</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Date.toSqlMillisecond(System.DateTime,System.Char*)">
            <summary>
            时间转换成字符串(精确到毫秒)
            </summary>
            <param name="time">时间</param>
            <param name="chars">时间字符串</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,System.Char*,System.Char)">
            <summary>
            时间转换成日期字符串(yyyy/MM/dd)
            </summary>
            <param name="time">时间</param>
            <param name="chars">时间字符串</param>
            <param name="split">分隔符</param>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Mul">
            <summary>
            32位除以60转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_32Shift">
            <summary>
            32位除以60转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Mul">
            <summary>
            16位除以60转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Date.Div60_16Shift">
            <summary>
            16位除以60转乘法的位移
            </summary>
        </member>
        <member name="M:AutoCSer.Date.toString(System.Int32,System.Char*)">
            <summary>
            时间转换成字符串(HH:mm:ss)
            </summary>
            <param name="second">当天的计时秒数</param>
            <param name="chars">时间字符串</param>
        </member>
        <member name="M:AutoCSer.Date.toString(System.DateTime,System.Char)">
            <summary>
            时间转换成字符串(yyyy/MM/dd HH:mm:ss)
            </summary>
            <param name="time">时间</param>
            <param name="dateSplit">日期分隔符</param>
            <returns>时间字符串</returns>
        </member>
        <member name="M:AutoCSer.Date.ToString(System.DateTime,AutoCSer.CharStream,System.Char)">
            <summary>
            时间转换成字符串
            </summary>
            <param name="time">时间</param>
            <param name="charStream">字符流</param>
            <param name="dateSplit">日期分隔符</param>
        </member>
        <member name="M:AutoCSer.Date.localToUniversalTime(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Diagnostics.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessCopyClient">
            <summary>
            进程复制重启服务客户端
            </summary>
            <summary>
            进程复制重启服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.GuardAsync">
            <summary>
            守护进程客户端调用
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.RemoveAsync">
            <summary>
            守护进程删除客户端调用
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.CopyAsync">
            <summary>
            进程复制重启客户端调用
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.Guard">
            <summary>
            守护进程客户端调用
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.callGuard">
            <summary>
            守护进程客户端调用
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.Remove">
            <summary>
            守护进程删除客户端调用
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyClient.Copy">
            <summary>
            进程复制重启客户端调用
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessCopyConfig">
            <summary>
            进程复制配置
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyConfig.CheckTimeoutSeconds">
            <summary>
            文件更新重启检测时间(单位:秒)
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyConfig.CopyTimeoutMinutes">
            <summary>
            文件更新重启复制超时时间(单位:分)
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyConfig.WatcherPath">
            <summary>
            文件监视路径
            </summary>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessCopyer">
            <summary>
            进程文件复制
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.ProcessId">
            <summary>
            进程标识
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.ProcessName">
            <summary>
            进程名称
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.Path">
            <summary>
            目标路径
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.CopyPath">
            <summary>
            复制文件源路径
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.Process">
            <summary>
            进程文件名
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.Arguments">
            <summary>
            进程启动参数
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.process">
            <summary>
            进程信息
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.server">
            <summary>
            进程复制重启服务
            </summary>
        </member>
        <member name="P:AutoCSer.Diagnostics.ProcessCopyer.log">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.Guard(AutoCSer.Diagnostics.ProcessCopyServer)">
            <summary>
            守护进程
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.guard(System.Object,System.EventArgs)">
            <summary>
            进程退出事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.start">
            <summary>
            启动进程
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.RemoveGuard">
            <summary>
            删除进程退出事件
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.CheckName">
            <summary>
            验证进程名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.copy">
            <summary>
            进程文件复制
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyer.Copy">
            <summary>
            开始复制文件
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.Config">
            <summary>
            进程复制配置
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyer.defaultCopyer">
            <summary>
            默认文件复制器
            </summary>
        </member>
        <member name="P:AutoCSer.Diagnostics.ProcessCopyer.Default">
            <summary>
            默认文件复制器
            </summary>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessCopyServer">
            <summary>
            进程复制重启服务
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyServer.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyServer.cacheFile">
            <summary>
            进程守护缓存文件名
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyServer.guards">
            <summary>
            守护进程集合
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.ProcessCopyServer.guardLock">
            <summary>
            守护进程集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.SetTcpServer(AutoCSer.Net.TcpInternalServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.saveCache">
            <summary>
            保存进程守护信息集合到缓存文件
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.Remove(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            删除守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.guard(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.remove(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            删除守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.copy(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            复制重启进程
            </summary>
            <param name="copyer">文件复制器</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.FileWatcherFilter(System.IO.FileSystemEventArgs)">
            <summary>
            文件监视器过滤
            </summary>
            <param name="e"></param>
            <returns>是否继续检测</returns>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer._identityCommandNames_">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalServer">
            <summary>
            ProcessCopy TCP服务
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalServer.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.Diagnostics.ProcessCopyServer,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            ProcessCopy TCP调用服务端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verify">套接字验证委托</param>
            <param name="value">TCP 服务目标对象</param>
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalServer.DoCommand(System.Int32,AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient,AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP调用客户端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verifyMethod">TCP 验证方法</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.copy(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            复制重启进程
            </summary>
            <param name="copyer">文件复制器</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.copyAwaiter(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            复制重启进程
            </summary>
            <param name="copyer">文件复制器</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.guard(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.guardAwaiter(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.remove(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            删除守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="M:AutoCSer.Diagnostics.ProcessCopyServer.TcpInternalClient.removeAwaiter(AutoCSer.Diagnostics.ProcessCopyer)">
            <summary>
            删除守护进程
            </summary>
            <param name="copyer">文件信息</param>
        </member>
        <member name="T:AutoCSer.Diagnostics.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.UnionType.ProcessCopyer">
            <summary>
            进程文件复制
            </summary>
        </member>
        <member name="F:AutoCSer.Diagnostics.UnionType.ProcessCopyConfig">
            <summary>
            进程复制配置
            </summary>
        </member>
        <member name="T:AutoCSer.DictionaryCreator">
            <summary>
            创建字典
            </summary>
            <summary>
            创建字典
            </summary>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateShort``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateChar``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashString``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashBytes``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashBytes``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateSubString``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHostPort``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateOnly``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateAny``2">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateAny``2(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateInt``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator.CreateHashString``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.DictionaryCreator`1">
            <summary>
            创建字典
            </summary>
            <typeparam name="keyType">关键字类型</typeparam>
        </member>
        <member name="F:AutoCSer.DictionaryCreator`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>字典</returns>
        </member>
        <member name="M:AutoCSer.DictionaryCreator`1.Create``1(System.Int32)">
            <summary>
            创建字典
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="capacity">初始化容器尺寸</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.DomainUnload.State">
            <summary>
            卸载状态
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.State.Run">
            <summary>
            正常运行状态
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.State.WaitTransaction">
            <summary>
            卸载中，等待事务结束
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.State.Event">
            <summary>
            卸载事件处理
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.State.Unloaded">
            <summary>
            已经卸载
            </summary>
        </member>
        <member name="T:AutoCSer.DomainUnload.Type">
            <summary>
            卸载处理类型
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Type.Action">
            <summary>
            委托
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Type.LogFileDispose">
            <summary>
            释放文件日志
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Type.TcpCommandBaseDispose">
            <summary>
            释放 TCP 组件基类
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Type.TcpRegisterClientClose">
            <summary>
            关闭 TCP 内部注册服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Type.ThreadPoolDispose">
            <summary>
            释放线程池
            </summary>
        </member>
        <member name="T:AutoCSer.DomainUnload.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.UnionType.UnloadObject">
            <summary>
            应用程序卸载处理委托回调
            </summary>
        </member>
        <member name="T:AutoCSer.DomainUnload.Unloader">
            <summary>
            应用程序卸载处理
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Unloader.unloaders">
            <summary>
            卸载处理函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Unloader.lastUnloaders">
            <summary>
            卸载处理函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Unloader.unloaderLock">
            <summary>
            卸载处理函数访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Unloader.State">
            <summary>
            卸载状态
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.Unloader.transactionCount">
            <summary>
            事务数量
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.Add(System.Object,AutoCSer.DomainUnload.Type)">
            <summary>
            添加应用程序卸载处理
            </summary>
            <param name="unload">卸载处理函数</param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.Add(AutoCSer.DomainUnload.UnloadInfo@)">
            <summary>
            添加应用程序卸载处理
            </summary>
            <param name="unloadInfo">卸载处理函数</param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.Remove(System.Object,AutoCSer.DomainUnload.Type,System.Boolean)">
            <summary>
            删除卸载处理函数
            </summary>
            <param name="unload">卸载处理函数</param>
            <param name="type"></param>
            <param name="isRun">是否执行删除的函数</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.Remove(AutoCSer.DomainUnload.UnloadInfo@)">
            <summary>
            删除卸载处理函数
            </summary>
            <param name="unloadInfo">卸载处理函数</param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.AddLast(System.Object,AutoCSer.DomainUnload.Type)">
            <summary>
            添加应用程序卸载处理
            </summary>
            <param name="unload">卸载处理函数</param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.RemoveLast(System.Object,AutoCSer.DomainUnload.Type,System.Boolean)">
            <summary>
            删除卸载处理函数
            </summary>
            <param name="unload">卸载处理函数</param>
            <param name="type"></param>
            <param name="isRun">是否执行删除的函数</param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.RemoveLast(AutoCSer.DomainUnload.UnloadInfo)">
            <summary>
            删除卸载处理函数
            </summary>
            <param name="onUnload"></param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.RemoveLastRun(AutoCSer.DomainUnload.UnloadInfo)">
            <summary>
            删除卸载处理函数
            </summary>
            <param name="onUnload"></param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.TransactionStart(System.Boolean)">
            <summary>
            新事务开始,请保证唯一调用TransactionEnd,否则将导致卸载事件不被执行
            </summary>
            <param name="ignoreWait">忽略卸载中的等待事务，用于事务派生的事务</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.TransactionEnd">
            <summary>
            请保证TransactionStart与TransactionEnd一一对应，否则将导致卸载事件不被执行
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.unloadEvent">
            <summary>
            应用程序卸载事件
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.unloadEvent(System.Object,System.EventArgs)">
            <summary>
            应用程序卸载事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:AutoCSer.DomainUnload.Unloader.onError(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            线程错误事件
            </summary>
            <param name="sender"></param>
            <param name="error"></param>
        </member>
        <member name="T:AutoCSer.DomainUnload.UnloadInfo">
            <summary>
            委托回调
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.UnloadInfo.Unload">
            <summary>
            卸载处理对象
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.UnloadInfo.Type">
            <summary>
            卸载处理类型
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadInfo.Set(System.Object,AutoCSer.DomainUnload.Type)">
            <summary>
            委托回调
            </summary>
            <param name="unload"></param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadInfo.Call">
            <summary>
            卸载处理
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadInfo.Equals(AutoCSer.DomainUnload.UnloadInfo)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadInfo.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.DomainUnload.UnloadObject">
            <summary>
            委托回调
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.UnloadObject.Unload">
            <summary>
            卸载处理对象
            </summary>
        </member>
        <member name="F:AutoCSer.DomainUnload.UnloadObject.Type">
            <summary>
            卸载处理类型
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadObject.RemoveLast">
            <summary>
            删除卸载处理函数
            </summary>
        </member>
        <member name="M:AutoCSer.DomainUnload.UnloadObject.RemoveLastRun">
            <summary>
            删除卸载处理函数
            </summary>
        </member>
        <member name="T:AutoCSer.DynamicArray">
            <summary>
            动态数组信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayCache">
            <summary>
            是否需要清除数组缓存信息
            </summary>
        </member>
        <member name="F:AutoCSer.DynamicArray.isClearArrayLock">
            <summary>
            是否需要清除数组缓存 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray.IsClearArray(System.Type)">
            <summary>
            是否需要清除数组
            </summary>
            <param name="type">类型</param>
            <returns>需要清除数组</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.isClearArray(System.Type)">
            <summary>
            是否需要清除数组
            </summary>
            <param name="type">类型</param>
            <returns>需要清除数组</returns>
        </member>
        <member name="M:AutoCSer.DynamicArray.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.DynamicArray`1">
            <summary>
            动态数组基类
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.DynamicArray`1.IsClearArray">
            <summary>
            是否需要清除数组
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.GetNewArray(System.Int32)">
            <summary>
            创建新数组
            </summary>
            <param name="length">数组长度</param>
            <returns>数组</returns>
        </member>
        <member name="F:AutoCSer.DynamicArray`1.Array">
            <summary>
            数据数组
            </summary>
        </member>
        <member name="P:AutoCSer.DynamicArray`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.Add(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.DynamicArray`1.Add(`0[],System.Int32,System.Int32)">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="T:AutoCSer.Emit.ArrayConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.ArrayConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.Builder.Module">
            <summary>
            动态程序集模块
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.Builder.Module.assemblyBuilder">
            <summary>
            动态程序集
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.Builder.Module.Builder">
            <summary>
            动态程序集模块
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.CollectionConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.CollectionConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.ConstructorAttribute">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.Constructor`1">
            <summary>
            默认构造函数
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.Constructor`1.uninitializedObject">
            <summary>
            未初始化对象，用于Clone
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.Constructor`1.New">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Constructor`1.Default">
            <summary>
            默认空值
            </summary>
            <returns>默认空值</returns>
        </member>
        <member name="T:AutoCSer.Emit.DictionaryConstructor`3">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="dictionaryType">集合类型</typeparam>
            <typeparam name="keyType">枚举值类型</typeparam>
            <typeparam name="valueType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.DictionaryConstructor`3.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.EnumCast`2">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="valueType">枚举类型</typeparam>
            <typeparam name="intType">枚举值数字类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.EnumCast`2.ToInt">
            <summary>
            枚举转数字委托
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.EnumCast`2.FromInt">
            <summary>
            数字转枚举委托
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.EnumerableConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.EnumerableConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.EnumParser`1">
            <summary>
            枚举值解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.EnumParser`1.enumValues">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.EnumParser`1.enumSearchData">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.Field">
            <summary>
            字段操作
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Field.UnsafeSetField``2(System.String)">
            <summary>
            创建设置字段委托
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="fieldType"></typeparam>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.Field.UnsafeSetField``2(System.Reflection.FieldInfo)">
            <summary>
            创建设置字段委托
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="fieldType"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.Field.UnsafeGetField``2(System.Reflection.FieldInfo)">
            <summary>
            创建获取字段委托
            </summary>
            <typeparam name="valueType"></typeparam>
            <typeparam name="fieldType"></typeparam>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Emit.ListConstructor`2">
            <summary>
            集合构造函数
            </summary>
            <typeparam name="valueType">集合类型</typeparam>
            <typeparam name="argumentType">枚举值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Emit.ListConstructor`2.Constructor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:AutoCSer.Emit.NamePool">
            <summary>
            名称申请池
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.start">
            <summary>
            申请池起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.end">
            <summary>
            申请池结束未知
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.createLock">
            <summary>
            申请池创建访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.getLock">
            <summary>
            申请池获取访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.NamePool.poolSize">
            <summary>
            申请池大小
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.NamePool.GetChar(System.Int32)">
            <summary>
            获取名称空间
            </summary>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Emit.NamePool.Get(System.String,System.Int32,System.Int32)">
            <summary>
            获取名称空间
            </summary>
            <param name="name"></param>
            <param name="seek">前缀字符长度</param>
            <param name="endSize">后缀字符长度</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Emit.Pub">
            <summary>
            公共类型
            </summary>
            <summary>
            公共类型
            </summary>
        </member>
        <member name="F:AutoCSer.Emit.Pub.nameAssignmentPools">
            <summary>
            名称赋值数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Pub.GetNameAssignmentPool(System.String)">
            <summary>
            获取名称赋值数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Emit.Pub.nullableHasValues">
            <summary>
            可空类型是否为空判断函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Pub.GetNullableHasValue(System.Type)">
            <summary>
            获取可空类型是否为空判断函数信息
            </summary>
            <param name="type"></param>
            <returns>可空类型是否为空判断函数信息</returns>
        </member>
        <member name="F:AutoCSer.Emit.Pub.nullableValues">
            <summary>
            可空类型获取数据函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Pub.GetNullableValue(System.Type)">
            <summary>
            获取可空类型获取数据函数信息
            </summary>
            <param name="type"></param>
            <returns>可空类型获取数据函数信息</returns>
        </member>
        <member name="M:AutoCSer.Emit.Pub.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="F:AutoCSer.Emit.Pub.PointerSizeRefType">
            <summary>
            带长度的指针的引用类型
            </summary>
        </member>
        <member name="M:AutoCSer.Emit.Pub.CreateConstructor(System.Type,System.Type)">
            <summary>
            创建构造函数委托
            </summary>
            <param name="type"></param>
            <param name="parameterType">参数类型</param>
            <returns>构造函数委托</returns>
        </member>
        <member name="T:AutoCSer.EncodingCache">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCache.Encoding">
            <summary>
            字符编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCache.Type">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="P:AutoCSer.EncodingCache.IsAscii">
            <summary>
            是否 ASCII
            </summary>
        </member>
        <member name="P:AutoCSer.EncodingCache.IsAsciiOther">
            <summary>
            是否兼容 ASCII
            </summary>
        </member>
        <member name="P:AutoCSer.EncodingCache.IsUnicode">
            <summary>
            是否 Unicode
            </summary>
        </member>
        <member name="M:AutoCSer.EncodingCache.#ctor(System.Text.Encoding)">
            <summary>
            编码类型
            </summary>
            <param name="encoding"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            获取字符串
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.GetBytesNotEmpty(System.String)">
            <summary>
            获取字节数据
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.GetBytesNotNull(System.String)">
            <summary>
            获取字节数据
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytesNotEmpty(System.String,System.Byte[],System.Int32)">
            <summary>
            写字节数据
            </summary>
            <param name="text"></param>
            <param name="buffer"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytesNotEmpty(System.String,System.Byte[])">
            <summary>
            写字节数据
            </summary>
            <param name="text"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytes(System.String,AutoCSer.UnmanagedStream)">
            <summary>
            写字节数据
            </summary>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytesNotEmpty(System.String,AutoCSer.UnmanagedStream)">
            <summary>
            写字节数据
            </summary>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytes(AutoCSer.SubString@,AutoCSer.UnmanagedStream)">
            <summary>
            写字节数据
            </summary>
            <param name="value"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytes(System.Char*,System.Int32,AutoCSer.UnmanagedStream)">
            <summary>
            写字节数据
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytes(AutoCSer.CharStream,System.Byte[])">
            <summary>
            写字节数据
            </summary>
            <param name="charStream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteBytes(AutoCSer.CharStream,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            写字节数据
            </summary>
            <param name="charStream"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.GetByteCountNotNull(System.String)">
            <summary>
            获取字节数量
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.GetByteCountNotNull(AutoCSer.CharStream)">
            <summary>
            获取字节数量
            </summary>
            <param name="charStream"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.GetByteCountNotNull(System.Char*,System.Int32)">
            <summary>
            获取字节数量
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.writeNumberNotUnicode(System.Char*,System.Int32)">
            <summary>
            写字节数据
            </summary>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.Byte,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.SByte,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.UInt16,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.Int16,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.UInt32,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.Int32,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.UInt64,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.Write(System.Int64,AutoCSer.UnmanagedStream)">
            <summary>
            写数值
            </summary>
            <param name="value">数值</param>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.EncodingCache.WriteUrlHash(AutoCSer.UnmanagedStream)">
            <summary>
            URL 哈希字符
            </summary>
            <param name="stream"></param>
        </member>
        <member name="F:AutoCSer.EncodingCache.Utf8">
            <summary>
            UTF8 编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCache.Ascii">
            <summary>
            ASCII 编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCache.Unicode">
            <summary>
            Unicode 编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCache.urlHashUnicode">
            <summary>
            URL 哈希字符
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCache.urlHashAscii">
            <summary>
            URL 哈希字符
            </summary>
        </member>
        <member name="T:AutoCSer.EncodingCacheOther">
            <summary>
            编码类型
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCacheOther.Gb2312">
            <summary>
            gb2312 编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCacheOther.Gb18030">
            <summary>
            gb18030 编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCacheOther.Gbk">
            <summary>
            gbk 编码
            </summary>
        </member>
        <member name="F:AutoCSer.EncodingCacheOther.Big5">
            <summary>
            big5 编码
            </summary>
        </member>
        <member name="M:AutoCSer.EncodingCacheOther.GetEncoding(System.String)">
            <summary>
            获取字符编码
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.EnumAttribute`1">
            <summary>
            枚举属性获取器
            </summary>
            <typeparam name="enumType">枚举类型</typeparam>
        </member>
        <member name="M:AutoCSer.EnumAttribute`1.GetMaxValue(System.Int32)">
            <summary>
            获取最大枚举值
            </summary>
            <param name="nullValue">默认空值</param>
            <returns>最大枚举值,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.EnumAttribute`1.Array">
            <summary>
            获取枚举数组
            </summary>
            <returns>枚举数组</returns>
        </member>
        <member name="T:AutoCSer.EnumAttribute`2">
            <summary>
            枚举属性获取器
            </summary>
            <typeparam name="enumType">枚举类型</typeparam>
            <typeparam name="attributeType">属性类型</typeparam>
        </member>
        <member name="F:AutoCSer.EnumAttribute`2.attributeArray">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="P:AutoCSer.EnumAttribute`2.AttributeArray">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:AutoCSer.EnumAttribute`2.GetAttributes">
            <summary>
            获取枚举属性集合
            </summary>
            <returns>枚举属性集合</returns>
        </member>
        <member name="M:AutoCSer.EnumAttribute`2.Array(System.Int32)">
            <summary>
            根据索引获取属性
            </summary>
            <param name="index">索引</param>
            <returns>属性</returns>
        </member>
        <member name="T:AutoCSer.Enumerator`1">
            <summary>
            枚举器
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="T:AutoCSer.Enumerator`1.EmptyEnumerator">
            <summary>
            空枚举器
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#Generic#IEnumerator{valueType}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.EmptyEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.EmptyEnumerator.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Empty">
            <summary>
            空枚举实例
            </summary>
        </member>
        <member name="T:AutoCSer.Enumerator`1.Array">
            <summary>
            数组枚举器
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.array">
            <summary>
            被枚举数组
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.currentIndex">
            <summary>
            当前位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.endIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Enumerator`1.Array.startIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            数组枚举器
            </summary>
            <param name="value">数组子串</param>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            数组枚举器
            </summary>
            <param name="array">数组</param>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#Generic#IEnumerator{valueType}#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="P:AutoCSer.Enumerator`1.Array.System#Collections#IEnumerator#Current">
            <summary>
            当前数据元素
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.MoveNext">
            <summary>
            转到下一个数据元素
            </summary>
            <returns>是否存在下一个数据元素</returns>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Reset">
            <summary>
            重置枚举器状态
            </summary>
        </member>
        <member name="M:AutoCSer.Enumerator`1.Array.Dispose">
            <summary>
            释放枚举器
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.ArrayExtension">
            <summary>
            数组扩展操作
            </summary>
            <summary>
            数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.copyNew``1(``0[],System.Int32,System.Int32)">
            <summary>
            复制数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待复制数组</param>
            <param name="newLength">新数组长度</param>
            <param name="copySize">复制数据数量</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.firstOrDefault``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            获取第一个匹配值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>第一个匹配值,失败为default(valueType)</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.toArray``1(System.Array)">
            <summary>
            数组转换
            </summary>
            <typeparam name="valueType">目标数组类型</typeparam>
            <param name="array">数组数据</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.get``1(``0[],System.Int32,``0)">
            <summary>
            根据索引位置获取数组元素值
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="array">值集合</param>
            <param name="index">索引位置</param>
            <param name="nullValue">默认空值</param>
            <returns>数组元素值</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getAdd``1(``0[],``0)">
            <summary>
            添加数据
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="value">添加的数据</param>
            <returns>添加数据的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getFindArray``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getFindArray``1(``0[],System.Func{``0,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getFindArray``2(``0[],System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="arrayType">目标数组类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="getValue">数据获取器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getFindArray``2(``0[],System.Func{``0,System.Boolean},System.Func{``0,``1},AutoCSer.MemoryMap)">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="arrayType">目标数组类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <param name="getValue">数据获取器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getSub``1(``0[],System.Int32,System.Int32)">
            <summary>
            取子集合
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
            <returns>子集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.any``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            判断是否存在匹配值
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>是否存在匹配值</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getFind``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            获取匹配集合
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getHash``2(``0[],System.Func{``0,``1})">
            <summary>
            转换HASH
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="hashType">目标数据类型</typeparam>
            <param name="array">数组数据</param>
            <param name="getValue">数据获取器</param>
            <returns>HASH</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.groupCount``2(``0[],System.Func{``0,``1})">
            <summary>
            分组计数
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="keyType">分组键类型</typeparam>
            <param name="array">数组数据</param>
            <param name="getKey">键值获取器</param>
            <returns>分组计数</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.joinString``1(``0[],System.String,System.Func{``0,System.String})">
            <summary>
            连接字符串
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据集合</param>
            <param name="toString">字符串转换器</param>
            <param name="join">连接串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.isEmpty``1(``0[])">
            <summary>
            数组是否为空或者长度为0
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>数组是否为空或者长度为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.length``1(``0[])">
            <summary>
            获取数组长度
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.notNull``1(``0[])">
            <summary>
            空值转0长度数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组数据</param>
            <returns>非空数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.MoveNotNull``1(``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            移动数据块
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待处理数组</param>
            <param name="index">原始数据位置</param>
            <param name="writeIndex">目标数据位置</param>
            <param name="count">移动数据数量</param>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.copy``1(``0[])">
            <summary>
            复制数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待复制数组</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.copyNew``1(``0[],System.Int32)">
            <summary>
            复制数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待复制数组</param>
            <param name="newLength">新数组长度</param>
            <returns>复制后的新数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getArray``2(``0[],System.Func{``0,``1})">
            <summary>
            数据转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="arrayType">目标数组类型</typeparam>
            <param name="array">数组数据</param>
            <param name="getValue">数据获取器</param>
            <returns>目标数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.concat``1(``0[],``0[])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <param name="addValues">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.getConcatArray``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.concat``1(``0[][])">
            <summary>
            连接数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数组集合</param>
            <returns>连接后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.sort``1(``0[],System.Func{``0,``0,System.Int32})">
            <summary>
            排序
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">待排序数组</param>
            <param name="comparer">比较器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.joinString``1(``0[],System.Char,System.Func{``0,System.String})">
            <summary>
            连接字符串
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="array">数据集合</param>
            <param name="toString">字符串转换器</param>
            <param name="join">连接字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.ArrayExtension.JoinString(System.String[],System.Char)">
            <summary>
            连接字符串集合
            </summary>
            <param name="array">字符串集合</param>
            <param name="join">字符连接</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="T:AutoCSer.Extension.BinarySerialize">
            <summary>
            二进制序列化扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.serialize``1(``0,AutoCSer.BinarySerialize.SerializeConfig)">
            <summary>
            二进制序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,System.Byte[],AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,AutoCSer.LeftArray{System.Byte},AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,AutoCSer.LeftArray{System.Byte}@,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,AutoCSer.UnmanagedStream,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="startIndex">数据起始位置</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.BinarySerialize.deSerialize``1(``0,System.Byte*,System.Int32,AutoCSer.BinarySerialize.DeSerializeConfig)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标对象</param>
            <param name="data">数据</param>
            <param name="size">数据字节长度</param>
            <param name="config">配置参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Extension.Collection">
            <summary>
            集合相关扩展
            </summary>
            <summary>
            集合相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFind``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            查找符合条件的记录集合
            </summary>
            <typeparam name="valueType">值类型</typeparam>
            <param name="values">值集合</param>
            <param name="isValue">判断记录是否符合条件的委托</param>
            <returns>符合条件的记录集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.joinString(System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            连接字符串集合
            </summary>
            <param name="values">字符串集合</param>
            <param name="join">字符连接</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.toGeneric``1(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="value">数据集合</param>
            <returns>泛型数据集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.count``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            获取数据数量
            </summary>
            <param name="value">数据集合</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">数据集合</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <typeparam name="arrayType">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection.getFindArray``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            获取匹配数组
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <typeparam name="arrayType">返回数组类型</typeparam>
            <param name="values">值集合</param>
            <param name="getValue">获取数组值的委托</param>
            <param name="isValue">数据匹配器</param>
            <returns>匹配数组</returns>
        </member>
        <member name="T:AutoCSer.Extension.Collection`1">
            <summary>
            ICollection 泛型转换
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Extension.Collection`1.collection">
            <summary>
            ICollection数据集合
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.#ctor(System.Collections.ICollection)">
            <summary>
            ICollection泛型转换
            </summary>
            <param name="collection">ICollection数据集合</param>
        </member>
        <member name="P:AutoCSer.Extension.Collection`1.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="P:AutoCSer.Extension.Collection`1.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.System#Collections#Generic#IEnumerable{valueType}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Remove(`0)">
            <summary>
            移除数据(不可用)
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="values">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.Extension.Collection`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="T:AutoCSer.Extension.DirectoryExtension">
            <summary>
            目录相关操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.DirectoryExtension.Separator">
            <summary>
            目录分隔符
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.DirectoryExtension.fullName(System.IO.DirectoryInfo)">
            <summary>
            取以\结尾的路径全名
            </summary>
            <param name="path">目录</param>
            <returns>\结尾的路径全名</returns>
        </member>
        <member name="M:AutoCSer.Extension.DirectoryExtension.pathSeparator(System.String)">
            <summary>
            目录分隔符\替换
            </summary>
            <param name="path">路径</param>
            <returns>替换\后的路径</returns>
        </member>
        <member name="M:AutoCSer.Extension.DirectoryExtension.pathSuffix(System.String)">
            <summary>
            路径补全结尾的\
            </summary>
            <param name="path">路径</param>
            <returns>路径</returns>
        </member>
        <member name="T:AutoCSer.Extension.EmitGenerator">
            <summary>
            MSIL生成
            </summary>
            <summary>
            MSIL生成
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.ldarg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载参数
            </summary>
            <param name="generator"></param>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.parameterToStructField(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo,System.Int32,System.Reflection.Emit.LocalBuilder,System.Reflection.FieldInfo)">
            <summary>
            参数保存到值类型局部变量字段
            </summary>
            <param name="generator"></param>
            <param name="parameter"></param>
            <param name="index"></param>
            <param name="valueLocalBuilder"></param>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.outParameterFromValueField(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo,System.Int32,System.Reflection.Emit.LocalBuilder,System.Reflection.FieldInfo)">
            <summary>
            输出参数从返回值类型局部变量读取字段
            </summary>
            <param name="generator"></param>
            <param name="parameter"></param>
            <param name="index"></param>
            <param name="returnValueBuilder"></param>
            <param name="field"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.outParameterDefault(System.Reflection.Emit.ILGenerator,System.Reflection.ParameterInfo,System.Int32,System.Boolean)">
            <summary>
            输出参数设置默认值
            </summary>
            <param name="generator"></param>
            <param name="parameter"></param>
            <param name="index"></param>
            <param name="isInitobj"></param>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.StringExceptionConstructor">
            <summary>
            字符串异常构造函数
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.throwString(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            抛出异常
            </summary>
            <param name="generator"></param>
            <param name="message"></param>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.UnmanagedStreamPrepLengthMethod">
            <summary>
            非托管内存数据流预增数据流长度函数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.UnmanagedStreamBaseByteSizeField">
            <summary>
            非托管内存数据流当前数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.CharStreamWriteCharMethod">
            <summary>
            内存字符流写入字符方法信息
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.EmitGenerator.MemberMap">
            <summary>
            成员位图函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.MemberMap.IsMemberMethod">
            <summary>
            判断成员位图是否匹配成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.MemberMap.SetMemberMethod">
            <summary>
            设置成员索引
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.int32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            加载Int32数据
            </summary>
            <param name="generator"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.memberMapIsMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            判断成员位图是否匹配成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.memberMapSetMember(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Int32)">
            <summary>
            设置成员索引
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            函数调用
            </summary>
            <param name="generator"></param>
            <param name="method"></param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.toPointer(System.Int64)">
            <summary>
            整数转换成指针
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.toPointerMethod">
            <summary>
            整数转换成指针
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.EmitGenerator.charStreamSimpleWriteNotNullCharsMethod">
            <summary>
            内存字符流写入字符串方法信息
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.charStreamSimpleWriteNotNull(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.OpCode,System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="generator"></param>
            <param name="target"></param>
            <param name="value">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.Extension.EmitGenerator.initobj(System.Reflection.Emit.ILGenerator,System.Type,System.Reflection.Emit.LocalBuilder)">
            <summary>
            对象初始化
            </summary>
            <param name="generator"></param>
            <param name="type"></param>
            <param name="local"></param>
        </member>
        <member name="T:AutoCSer.Extension.Enumerable">
            <summary>
            可枚举相关扩展
            </summary>
            <summary>
            可枚举相关扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.getLeftArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="values">数据集合</param>
            <param name="size">数据容器初始化大小</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.getLeftArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32)">
            <summary>
            根据集合内容返回数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <typeparam name="arrayType">目标数据类型</typeparam>
            <param name="values">数据集合</param>
            <param name="getValue">获取数据数组</param>
            <param name="size">数据容器初始化大小</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.Extension.Enumerable.getDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            转换成字典
            </summary>
            <typeparam name="valueType">枚举值类型</typeparam>
            <typeparam name="keyType">哈希键值类型</typeparam>
            <param name="values">值集合</param>
            <param name="getKey">键值获取器</param>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.Extension.FileInfoExtension">
            <summary>
            文件相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.FileInfoExtension.StartProcessDirectory(System.IO.FileInfo,System.String)">
            <summary>
            在文件当前目录启动进程
            </summary>
            <param name="file">文件信息</param>
            <param name="arguments">执行参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Extension.JsonSerialize">
            <summary>
            JSON 序列化扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJson``1(``0,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJson``1(``0,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.fromJson``1(``0,AutoCSer.SubString,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.fromJson``1(``0,AutoCSer.SubString@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.fromJson``1(``0,System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJsonNode``1(AutoCSer.SubString,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 节点解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>JSON 节点 + 解析状态结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.JsonSerialize.toJsonNode``1(System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>JSON 节点 + 解析状态结果</returns>
        </member>
        <member name="T:AutoCSer.Extension.ListArray">
            <summary>
            单向动态数组扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.ListArray.ToLeftArray``1(AutoCSer.ListArray{``0})">
            <summary>
            转换数组子串
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="array">单向动态数组</param>
            <returns>数组子串</returns>
        </member>
        <member name="T:AutoCSer.Extension.Log">
            <summary>
            日志扩展
            </summary>
            <summary>
            日志扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Log.IsAnyType(AutoCSer.Log.ILog,AutoCSer.Log.LogType)">
            <summary>
            判断是否支持任意类型
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Log.IsAllType(AutoCSer.Log.ILog,AutoCSer.Log.LogType)">
            <summary>
            判断是否支持所有类型
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Log.Add(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Add(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Add(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.Exception,System.String,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Wait(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            同步添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Wait(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            同步添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Wait(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.Exception,System.String,System.Boolean)">
            <summary>
            同步添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Throw(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Throw(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Throw(AutoCSer.Log.ILog,AutoCSer.Log.ErrorType,System.String,System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            抛出一般错误异常
            </summary>
            <param name="log">日志处理</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Throw(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.Exception,System.String,System.Boolean)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.WaitThrow(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Boolean)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.WaitThrow(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Diagnostics.StackTrace,System.Boolean)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.WaitThrow(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.Exception,System.String,System.Boolean)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="isCache">是否缓存</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Add(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="isCache">是否缓存</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Extension.Log.Wait(AutoCSer.Log.ILog,AutoCSer.Log.LogType,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            同步添加日志
            </summary>
            <param name="log">日志处理</param>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="isCache">是否缓存</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="T:AutoCSer.Extension.MemberCopy">
            <summary>
            成员复制扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copy``2(``1,AutoCSer.Metadata.MemberMap{``1})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="baseType">复制成员对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copy``2(``0,AutoCSer.Metadata.MemberMap{``1})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <typeparam name="baseType">复制成员对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copy``1(``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="memberMap">成员位图</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyForm``1(``0,``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyForm``1(``0,``0@,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyTo``1(``0,``0,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="writeValue">目标对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.copyTo``1(``0,``0@,AutoCSer.Metadata.MemberMap{``0})">
            <summary>
            对象成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">被复制对象</param>
            <param name="writeValue">目标对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Extension.MemberCopy.memberwiseClone``1(``0)">
            <summary>
            对象浅复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.MemoryStreamExtension">
            <summary>
            MemoryStream 扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.MemoryStreamExtension.memoryStreamExpandable">
            <summary>
            内存流扩展设置
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.MemoryStreamExtension.New(System.Byte[],System.Int32,System.Int32)">
            <summary>
            内存流转换
            </summary>
            <param name="data">数据</param>
            <param name="index"></param>
            <param name="count"></param>
            <returns>内存流</returns>
        </member>
        <member name="T:AutoCSer.Extension.Number">
            <summary>
            数值相关扩展操作
            </summary>
            <summary>
            数值相关扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Number.uIntToBytes(System.UInt32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToBytes(System.UInt32,System.Byte*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToBytes(System.Int32,System.Byte*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toBytes_99999999(System.UInt32,System.Byte*)">
            <summary>
            绝对值小于100000000的负整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToBytes(System.UInt64,System.Byte*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toBytes99999999(System.UInt32,System.Byte*)">
            <summary>
            小于100000000的正整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toHex(System.UInt32)">
            <summary>
            转换8位十六进制字符串
            </summary>
            <param name="value">数字值</param>
            <returns>8位十六进制字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toHex(System.UInt32,System.Char*)">
            <summary>
            数字值转换为十六进制字符串
            </summary>
            <param name="value">数字值</param>
            <param name="hexs">十六进制字符串</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.toHex(System.UInt64,System.Char*)">
            <summary>
            转换16位十六进制字符串
            </summary>
            <param name="value">数字值</param>
            <param name="hexs">16位十六进制字符串</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.toHex(System.UInt64)">
            <summary>
            转换16位十六进制字符串
            </summary>
            <param name="value">数字值</param>
            <returns>16位十六进制字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toHex(System.UInt32,System.Byte*)">
            <summary>
            数字值转换为十六进制字符串
            </summary>
            <param name="value">数字值</param>
            <param name="hexs">十六进制字符串</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToHex(System.UInt64,System.Byte*)">
            <summary>
            转换16位十六进制字符串
            </summary>
            <param name="value">数字值</param>
            <param name="hexs">16位十六进制字符串</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.sqrt(System.UInt32,System.UInt32@)">
            <summary>
            求平方根
            </summary>
            <param name="value">值</param>
            <param name="mod">余数</param>
            <returns>平方根</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.endBits(System.UInt32)">
            <summary>
            获取最后二进制0位的长度
            </summary>
            <param name="value">数据</param>
            <returns>最后二进制0位的长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.endBits(System.UInt64)">
            <summary>
            获取最后二进制0位的长度
            </summary>
            <param name="value">数据</param>
            <returns>最后二进制0位的长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.bits(System.UInt64)">
            <summary>
            获取有效位长度
            </summary>
            <param name="value">数据</param>
            <returns>有效位长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ParseHex(System.UInt32)">
            <summary>
            十六进制字符转字节
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ParseHex32(System.Byte*)">
            <summary>
            16进制字符串转换成整数
            </summary>
            <param name="start">起始位置</param>
            <returns>整数</returns>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10_16Mul">
            <summary>
            16位除以10转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10_16Shift">
            <summary>
            16位除以10转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10000Mul">
            <summary>
            32位除以10000转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div10000Shift">
            <summary>
            32位除以10000转乘法的位移
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div100000000Mul">
            <summary>
            32位除以100000000转乘法的乘数
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.Div100000000Shift">
            <summary>
            32位除以100000000转乘法的位移
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Byte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Byte,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Byte,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.SByte)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.SByte,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.SByte,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.UInt16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt16,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt16,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Int16)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int16,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int16,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.UInt32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt32,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString99999999(System.UInt32,System.Char*)">
            <summary>
            小于100000000的正整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Int32)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int32,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString_99999999(System.UInt32,System.Char*)">
            <summary>
            绝对值小于100000000的负整数转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.uIntToString(System.UInt32,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.UInt64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.UnsafeToString(System.UInt64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.UInt64,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.toString(System.Int64)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.UnsafeToString(System.Int64,AutoCSer.CharStream)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="charStream">字符流</param>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToString(System.Int64,System.Char*)">
            <summary>
            数值转字符串
            </summary>
            <param name="value">数值</param>
            <param name="chars">字符串</param>
            <returns>起始位置+字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToHex16(System.UInt32,System.Char*)">
            <summary>
            数字转换成16进制字符串
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
        </member>
        <member name="M:AutoCSer.Extension.Number.GetToHex(System.UInt32,System.Char*)">
            <summary>
            数字转换成16进制字符串
            </summary>
            <param name="value"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.ToHex(System.UInt32)">
            <summary>
            半字节转十六进制字符
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.bitCount(System.UInt64)">
            <summary>
            获取二进制1位的个数
            </summary>
            <param name="value">数据</param>
            <returns>二进制1位的个数</returns>
        </member>
        <member name="F:AutoCSer.Extension.Number.deBruijn32">
            <summary>
            2^n相关32位deBruijn序列集合
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.Number.DeBruijn32Number">
            <summary>
            2^n相关32位deBruijn序列
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.Number.bits(System.UInt32)">
            <summary>
            获取有效位长度
            </summary>
            <param name="value">数据</param>
            <returns>有效位长度</returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.FullBit(System.UInt32)">
            <summary>
            填充第一个有效二进制位后面的空位
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.UpToPower2(System.UInt32)">
            <summary>
            向上去 2 的幂次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.Number.DeBruijnLog2(System.UInt32)">
            <summary>
            求 2 的 x 次方
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.ParameterInfoExtension">
            <summary>
            参数相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.ParameterInfoExtension.elementType(System.Reflection.ParameterInfo)">
            <summary>
            在文件当前目录启动进程
            </summary>
            <param name="parameter">参数信息</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Extension.StringExtension">
            <summary>
            字符串相关操作
            </summary>
            <summary>
            字符串相关操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.length(System.String)">
            <summary>
            获取字符串长度
            </summary>
            <param name="value">字符串</param>
            <returns>null为0</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.getBytes(System.String)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="value">字符串</param>
            <returns>字节流</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.GetBytes(System.Char*,System.Int32)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="length">字符串长度</param>
            <returns>字节流</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.WriteBytes(System.Char*,System.Int32,System.Byte*)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="length">字符串长度</param>
            <param name="write">写入位置,不能为null</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.toLower(System.String)">
            <summary>
            大写转小写
            </summary>
            <param name="value">大写字符串</param>
            <returns>小写字符串(原引用)</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.toLowerNotEmpty(System.String)">
            <summary>
            大写转小写
            </summary>
            <param name="value">大写字符串</param>
            <returns>小写字符串(原引用)</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.FindNotNull(System.Char*,System.Char*,System.Char)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null,长度必须大于0</param>
            <param name="value">查找值</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.split(System.String,System.Char)">
            <summary>
            分割字符串
            </summary>
            <param name="value">原字符串</param>
            <param name="split">分割符</param>
            <returns>字符子串集合</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.replaceNotNull(System.String,System.Char,System.Char)">
            <summary>
            字符替换
            </summary>
            <param name="value">字符串</param>
            <param name="oldChar">原字符</param>
            <param name="newChar">目标字符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.equalCase(System.String,System.String)">
            <summary>
            比较字符串(忽略大小写)
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.equalCaseNotNull(System.String,System.String)">
            <summary>
            比较字符串(忽略大小写)
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.equalCase(System.String,System.String,System.Int32)">
            <summary>
            比较字符串(忽略大小写)
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="count">比较字符数量</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.equalCaseNotNull(System.String,System.String,System.Int32)">
            <summary>
            比较字符串(忽略大小写)
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字符数量</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.equalCaseNotNull(System.Char*,System.Char*,System.Int32)">
            <summary>
            比较字符串(忽略大小写)
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">字符数量,大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.trimStartNotEmpty(System.Char*,System.Char*)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.trimEndNotEmpty(System.Char*,System.Char*)">
            <summary>
            字符查找
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <returns>字符位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.CopyNotNull(System.String,System.Void*)">
            <summary>
            复制字符串
            </summary>
            <param name="source">原字符串,不能为null</param>
            <param name="destination">目标字符串地址,不能为null</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.SimpleCopyNotNull(System.String,System.Void*)">
            <summary>
            复制字符串
            </summary>
            <param name="source">原字符串,不能为null</param>
            <param name="destination">目标字符串地址,不能为null</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.SimpleCopyNotNull(System.Char*,System.Char*,System.Int32)">
            <summary>
            复制字符数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="count">字符数量,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.SimpleCopyNotNull64(System.Char*,System.Char*,System.Int32)">
            <summary>
            复制字符数组(不足8字节按8字节算)
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="count">字符数量,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Extension.StringExtension.WriteBytesNotNull(System.Char*,System.Int32,System.Byte*)">
            <summary>
            获取Ascii字符串原始字节流
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="length">字符串长度</param>
            <param name="write">写入位置,不能为null</param>
        </member>
        <member name="F:AutoCSer.Extension.StringExtension.FastAllocateString">
            <summary>
            申请字符串空间
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.TypeExtension">
            <summary>
            类型扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.GenericSplit">
            <summary>
            类型名称泛型分隔符
            </summary>
        </member>
        <member name="T:AutoCSer.Extension.TypeExtension.NameBuilder">
            <summary>
            类型名称生成器
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.NameBuilder.NameStream">
            <summary>
            名称缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.NameBuilder.IsXml">
            <summary>
            是否XML注释文档名称
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.GetFullName(System.Type)">
            <summary>
            获取类型名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.Array(System.Type,System.Boolean)">
            <summary>
            数组处理
            </summary>
            <param name="type">类型</param>
            <param name="isFullName">是否全称</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.getFullName(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.getNameNoArray(System.Type)">
            <summary>
            任意类型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.GenericName(System.Type)">
            <summary>
            泛型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.GenericFullName(System.Type)">
            <summary>
            泛型处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.genericParameter(System.Type)">
            <summary>
            泛型参数处理
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.genericParameter(System.Type[],System.Int32,System.Int32)">
            <summary>
            泛型参数处理
            </summary>
            <param name="parameterTypes">参数类型集合</param>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.NameBuilder.ReflectedType(System.Type,System.Type)">
            <summary>
            嵌套类型处理
            </summary>
            <param name="type">类型</param>
            <param name="reflectedType">上层类型</param>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.NameBuilder.TypeNames">
            <summary>
            类型名称集合
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.fullName(System.Type)">
            <summary>
            根据类型获取可用名称
            </summary>
            <param name="type">类型</param>
            <returns>类型名称</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.nullableType(System.Type)">
            <summary>
            获取可空类型的值类型
            </summary>
            <param name="type">可空类型</param>
            <returns>值类型,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.Extension.TypeExtension.noInitobjTypes">
            <summary>
            不需要需要初始化的类型集合
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.isInitobj(System.Type)">
            <summary>
            是否需要初始化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.customAttribute``1(System.Type,System.Type@)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="declaringType">自定义属性申明类型</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.customAttribute``1(System.Type)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Extension.TypeExtension.isNull(System.Type)">
            <summary>
            判断类型是否可空类型
            </summary>
            <param name="type">类型</param>
            <returns>是否可空类型</returns>
        </member>
        <member name="T:AutoCSer.Extension.TypeBuilderExtension">
            <summary>
            Emit 类型创建器扩展
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.TypeBuilderExtension.CreateType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            创建类型
            </summary>
            <param name="typeBuilder"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Extension.XmlSerialize">
            <summary>
            XML 序列化扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.toXml``1(``0,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.toXml``1(``0,AutoCSer.CharStream,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="xmlStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
            <returns>警告提示状态</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.fromXml``1(``0,AutoCSer.SubString,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.fromXml``1(``0,AutoCSer.SubString@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Extension.XmlSerialize.fromXml``1(``0,System.String,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="T:AutoCSer.FifoPriorityQueue`2">
            <summary>
            先进先出优先队列
            </summary>
            <typeparam name="keyType">键值类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="T:AutoCSer.FifoPriorityQueue`2.Node">
            <summary>
            数据节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Previous">
            <summary>
            前一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Next">
            <summary>
            后一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Key">
            <summary>
            键值
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.Node.Value">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.dictionary">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Count">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.header">
            <summary>
            头节点
            </summary>
        </member>
        <member name="F:AutoCSer.FifoPriorityQueue`2.end">
            <summary>
            尾节点
            </summary>
        </member>
        <member name="P:AutoCSer.FifoPriorityQueue`2.Item(`0)">
            <summary>
            数据对象
            </summary>
            <param name="key">查询键值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.#ctor(System.Int32)">
            <summary>
            先进先出优先队列
            </summary>
            <param name="dictionaryCapacity">字典初始化容器尺寸</param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Get(`0@,`1)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <param name="nullValue">失败空值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetValue(`0@,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <param name="value">目标数据对象</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.getNode(`0@)">
            <summary>
            获取数据
            </summary>
            <param name="key">键值</param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.TryGetOnly(`0,`1@)">
            <summary>
            获取数据(不调整位置)
            </summary>
            <param name="key">键值</param>
            <param name="value"></param>
            <returns>数据对象</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Set(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key">键值</param>
            <param name="value">数据对象</param>
            <returns>被替换的数据对象,没有返回default(valueType)</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.SetOnly(`0,`1)">
            <summary>
            设置数据(不调整位置)
            </summary>
            <param name="key">键值</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafeAdd(`0@,`1)">
            <summary>
            添加数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafePopNode">
            <summary>
            弹出一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Pop">
            <summary>
            弹出一个值
            </summary>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.UnsafePopValue">
            <summary>
            弹出一个值
            </summary>
            <returns>值</returns>
        </member>
        <member name="M:AutoCSer.FifoPriorityQueue`2.Remove(`0@,`1@)">
            <summary>
            删除一个数据
            </summary>
            <param name="key">键值</param>
            <param name="value">被删除数据对象</param>
            <returns>是否删除了数据对象</returns>
        </member>
        <member name="T:AutoCSer.FormatRange">
            <summary>
            数据记录范围
            </summary>
        </member>
        <member name="F:AutoCSer.FormatRange.startIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="P:AutoCSer.FormatRange.SkipCount">
            <summary>
            跳过记录数
            </summary>
        </member>
        <member name="F:AutoCSer.FormatRange.endIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.FormatRange.EndIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.FormatRange.GetCount">
            <summary>
            获取记录数
            </summary>
        </member>
        <member name="M:AutoCSer.FormatRange.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            数据记录范围
            </summary>
            <param name="count">数据总量</param>
            <param name="skipCount">跳过记录数</param>
            <param name="getCount">获取记录数</param>
        </member>
        <member name="T:AutoCSer.GuidCreator">
            <summary>
            Guid 联合体
            </summary>
            <summary>
            Guid 联合体
            </summary>
        </member>
        <member name="P:AutoCSer.GuidCreator.HashCode">
            <summary>
            获取哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.GuidCreator.Equals(System.Guid*)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.GuidCreator.Equals(AutoCSer.GuidCreator)">
            <summary>
            判断是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.GuidCreator.Value">
            <summary>
            Guid
            </summary>
        </member>
        <member name="M:AutoCSer.GuidCreator.ToString(System.Char*)">
            <summary>
            转换成字符串
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.HashBytes">
            <summary>
            用于 HASH 的字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.HashBytes.SubArray">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="F:AutoCSer.HashBytes.HashCode">
            <summary>
            HASH 值
            </summary>
        </member>
        <member name="M:AutoCSer.HashBytes.#ctor(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            字节数组 HASH
            </summary>
            <param name="data">字节数组</param>
        </member>
        <member name="M:AutoCSer.HashBytes.op_Implicit(AutoCSer.SubArray{System.Byte})~AutoCSer.HashBytes">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">字节数组</param>
            <returns>HASH字节数组</returns>
        </member>
        <member name="M:AutoCSer.HashBytes.op_Implicit(System.Byte[])~AutoCSer.HashBytes">
            <summary>
            HASH字节数组隐式转换
            </summary>
            <param name="data">字节数组</param>
            <returns>HASH字节数组</returns>
        </member>
        <member name="M:AutoCSer.HashBytes.Equals(AutoCSer.HashBytes)">
            <summary>
            比较字节数组是否相等
            </summary>
            <param name="other">用于HASH的字节数组</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.HashBytes.GetHashCode">
            <summary>
            获取 HASH 值
            </summary>
            <returns>HASH 值</returns>
        </member>
        <member name="M:AutoCSer.HashBytes.Equals(System.Object)">
            <summary>
            比较字节数组是否相等
            </summary>
            <param name="other">字节数组HASH</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.HashBytes.CopyData">
            <summary>
            复制 HASH 的字节数组
            </summary>
        </member>
        <member name="T:AutoCSer.HashSetCreator">
            <summary>
            创建 HashSet
            </summary>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateOnly``1">
            <summary>
            创建HASH表
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateAny``1">
            <summary>
            创建HASH表
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateInt">
            <summary>
            创建HASH表
            </summary>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateSubString">
            <summary>
            创建HASH表
            </summary>
            <returns>HASH表</returns>
        </member>
        <member name="M:AutoCSer.HashSetCreator.CreateHashString">
            <summary>
            创建HASH表
            </summary>
            <returns>HASH表</returns>
        </member>
        <member name="T:AutoCSer.HashSetCreator`1">
            <summary>
            创建 HashSet
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.HashSetCreator`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.HashSetCreator`1.Create">
            <summary>
            创建字典
            </summary>
            <returns>字典</returns>
        </member>
        <member name="T:AutoCSer.HashString">
            <summary>
            字符串 HASH
            </summary>
            <summary>
            字符串 HASH
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(AutoCSer.HashString)~System.String">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(AutoCSer.HashString)~AutoCSer.SubString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="F:AutoCSer.HashString.String">
            <summary>
            字符子串
            </summary>
        </member>
        <member name="F:AutoCSer.HashString.hashCode">
            <summary>
            哈希值
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.#ctor(AutoCSer.SubString)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashString.#ctor(AutoCSer.SubString@)">
            <summary>
            字符串 HASH
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(System.String)~AutoCSer.HashString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashString.op_Implicit(AutoCSer.SubString)~AutoCSer.HashString">
            <summary>
            隐式转换
            </summary>
            <param name="value">字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.HashString.Null">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.HashString.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.HashString)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.HashString@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.SubString)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(AutoCSer.SubString@)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.Equals(System.String)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.HashString.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.IOS.Preserve">
            <summary>
            编译连接
            </summary>
        </member>
        <member name="F:AutoCSer.IOS.Preserve.AllMembers">
            <summary>
            是否编译连接所有成员，作用于类型
            </summary>
        </member>
        <member name="F:AutoCSer.IOS.Preserve.Conditional">
            <summary>
            当类型被引用时才编译连接，作用于成员
            </summary>
        </member>
        <member name="T:AutoCSer.IO.Compression.DeflateCompressor">
            <summary>
            deflate 压缩处理
            </summary>
        </member>
        <member name="M:AutoCSer.IO.Compression.DeflateCompressor.Get(System.Byte[],System.Int32,System.Int32,AutoCSer.SubBuffer.PoolBufferFull@,AutoCSer.SubArray{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            数据压缩
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="buffer">输出缓冲区</param>
            <param name="compressData">压缩数据</param>
            <param name="seek">起始位置</param>
            <param name="compressHeadSize">压缩多余头部</param>
            <returns>是否压缩成功</returns>
        </member>
        <member name="T:AutoCSer.IO.Compression.DeflateDeCompressor">
            <summary>
            deflate 解压缩处理
            </summary>
        </member>
        <member name="M:AutoCSer.IO.Compression.DeflateDeCompressor.Get(System.Byte[],System.Int32,System.Int32,AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            数据解压缩
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="buffer">输出缓冲区</param>
        </member>
        <member name="T:AutoCSer.IO.File">
            <summary>
            文件扩展操作
            </summary>
        </member>
        <member name="F:AutoCSer.IO.File.MaxFullNameLength">
            <summary>
            完全限定文件名必须少于 260 个字符
            </summary>
        </member>
        <member name="F:AutoCSer.IO.File.BakPrefix">
            <summary>
            临时文件前缀
            </summary>
        </member>
        <member name="M:AutoCSer.IO.File.MoveBak(System.String)">
            <summary>
            修改文件名成为默认备份文件 %yyyyMMdd-HHmmss_HEX_fileName
            </summary>
            <param name="fileName">源文件名</param>
            <returns>备份文件名称,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.IO.File.MoveBakFileName(System.String)">
            <summary>
            获取备份文件名称 %yyyyMMdd-HHmmss_HEX_fileName
            </summary>
            <param name="fileName">源文件名</param>
            <returns>备份文件名称</returns>
        </member>
        <member name="M:AutoCSer.IO.File.FileNameToLower(System.String)">
            <summary>
            文件名转小写
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.IO.FileBom">
            <summary>
            文件编码BOM
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileBom.Bom">
            <summary>
            BOM
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileBom.Length">
            <summary>
            BOM长度
            </summary>
        </member>
        <member name="T:AutoCSer.IO.FileBom.EncodingBom">
            <summary>
            文件编码BOM唯一哈希
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileBom.EncodingBom.Encoding">
            <summary>
            文件编码
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileBom.EncodingBom.op_Implicit(System.Text.Encoding)~AutoCSer.IO.FileBom.EncodingBom">
            <summary>
            隐式转换
            </summary>
            <param name="encoding">文件编码</param>
            <returns>文件编码BOM唯一哈希</returns>
        </member>
        <member name="M:AutoCSer.IO.FileBom.EncodingBom.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:AutoCSer.IO.FileBom.EncodingBom.Equals(AutoCSer.IO.FileBom.EncodingBom)">
            <summary>
            判断是否相等
            </summary>
            <param name="other">待匹配数据</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.IO.FileBom.EncodingBom.Equals(System.Object)">
            <summary>
            判断是否相等
            </summary>
            <param name="obj">待匹配数据</param>
            <returns>是否相等</returns>
        </member>
        <member name="F:AutoCSer.IO.FileBom.boms">
            <summary>
            文件编码BOM集合
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileBom.Get(System.Text.Encoding,AutoCSer.IO.FileBom@)">
            <summary>
            根据文件编码获取BOM
            </summary>
            <param name="encoding">文件编码</param>
            <param name="bom">文件编码 BOM</param>
        </member>
        <member name="M:AutoCSer.IO.FileBom.Get(System.Text.Encoding)">
            <summary>
            根据文件编码获取BOM
            </summary>
            <param name="encoding">文件编码</param>
            <returns>文件编码 BOM</returns>
        </member>
        <member name="T:AutoCSer.IO.FileHead">
            <summary>
            AutoCSer 文件头
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileHead.DiskBlockFile">
            <summary>
            文件块
            </summary>
        </member>
        <member name="T:AutoCSer.IO.FileStreamWriter">
            <summary>
            文件流写入器
            </summary>
        </member>
        <member name="T:AutoCSer.IO.FileStreamWriter.WaitBuffer">
            <summary>
            等待缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.WaitBuffer.Buffer">
            <summary>
            缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.WaitBuffer.WriteIndex">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.WaitBuffer.IsWait">
            <summary>
            是否等待
            </summary>
        </member>
        <member name="P:AutoCSer.IO.FileStreamWriter.WaitBuffer.IsBuffer">
            <summary>
            是否需要处理写入数据
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.Free">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.WriteBom(AutoCSer.IO.FileStreamWriter,System.Text.Encoding)">
            <summary>
            写入文件编码BOM
            </summary>
            <param name="writer">文件流写入器</param>
            <param name="encoding"></param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.Get(AutoCSer.SubBuffer.Pool)">
            <summary>
            获取缓冲区
            </summary>
            <param name="bufferPool"></param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.Write(System.String,AutoCSer.EncodingCache@)">
            <summary>
            写入字符串
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.WriteNotPool(System.String,System.Byte[],AutoCSer.EncodingCache@)">
            <summary>
            写入字符串
            </summary>
            <param name="value"></param>
            <param name="buffer"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.CanWrite(System.Int32)">
            <summary>
            判断是否存在写入空间
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.WriteFile(AutoCSer.IO.FileStreamWriter)">
            <summary>
            写入文件
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WaitBuffer.Error(AutoCSer.IO.FileStreamWriter)">
            <summary>
            释放缓冲区
            </summary>
            <param name="writer"></param>
            <returns>是否等待</returns>
        </member>
        <member name="P:AutoCSer.IO.FileStreamWriter.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.bufferPool">
            <summary>
            缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.log">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.bufferLock">
            <summary>
            缓存操作锁
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.waitLock">
            <summary>
            等待缓存写入操作锁
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.fileShare">
            <summary>
            文件共享方式
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.fileOption">
            <summary>
            附加选项
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.buffer">
            <summary>
            缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.buffers">
            <summary>
            待写入文件缓存集合
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.currentBuffers">
            <summary>
            正在写入文件缓存集合
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.openLength">
            <summary>
            文件打开时字节长度（包含未写入的 BOM）
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.fileLength">
            <summary>
            文件有效长度(已经写入)
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.fileBufferLength">
            <summary>
            当前写入缓存后的文件长度
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.waitFileLength">
            <summary>
            等待文件长度
            </summary>
        </member>
        <member name="P:AutoCSer.IO.FileStreamWriter.NewLength">
            <summary>
            新写入文件长度
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.encoding">
            <summary>
            文件编码
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.isWritting">
            <summary>
            是否正在写文件
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.isError">
            <summary>
            是否出现异常错误
            </summary>
        </member>
        <member name="F:AutoCSer.IO.FileStreamWriter.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.#ctor(System.String,System.IO.FileMode,System.IO.FileShare,System.IO.FileOptions,AutoCSer.SubBuffer.Size,AutoCSer.Log.ILog,System.Text.Encoding)">
            <summary>
            文件流写入器
            </summary>
            <param name="fileName">文件全名</param>
            <param name="mode">打开方式</param>
            <param name="fileShare">共享访问方式</param>
            <param name="fileOption">附加选项</param>
            <param name="bufferSize">缓冲区字节大小</param>
            <param name="log">日志处理</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.#ctor(System.String,System.IO.FileMode,System.IO.FileShare,System.IO.FileOptions,AutoCSer.SubBuffer.Size,AutoCSer.Log.ILog,AutoCSer.EncodingCache)">
            <summary>
            文件流写入器
            </summary>
            <param name="fileName">文件全名</param>
            <param name="mode">打开方式</param>
            <param name="fileShare">共享访问方式</param>
            <param name="fileOption">附加选项</param>
            <param name="bufferSize">缓冲区字节大小</param>
            <param name="log">日志处理</param>
            <param name="encoding">文件编码</param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.open(System.IO.FileMode)">
            <summary>
            打开文件
            </summary>
            <param name="mode">打开方式</param>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.Flush">
            <summary>
            等待缓存写入
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.wait">
            <summary>
            等待缓存写入
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WriteNotEmpty(System.String)">
            <summary>
            写入字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.WriteFile">
            <summary>
            写文件
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.pulseWait">
            <summary>
            唤醒等待
            </summary>
        </member>
        <member name="M:AutoCSer.IO.FileStreamWriter.setErrorWaitFileLength">
            <summary>
            设置等待文件长度
            </summary>
        </member>
        <member name="T:AutoCSer.IO.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.IO.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.IO.UnionType.FileStreamWriter">
            <summary>
            文件流写入器
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.IgnoreMemberAttribute">
            <summary>
            JSON 序列化成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.Json.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="M:AutoCSer.Json.IgnoreMemberAttribute.#ctor">
            <summary>
            JSON 序列化成员忽略配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.Node">
            <summary>
            JSON 节点
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Node.Int64">
            <summary>
            64位整数值
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.String">
            <summary>
            JSON 节点隐式转换为字符串
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.Json.Node.checkQuoteString">
            <summary>
            检测未解析字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.toString(AutoCSer.CharStream,AutoCSer.Json.Parser@)">
            <summary>
            输出字符串
            </summary>
            <param name="charStream"></param>
            <param name="parser"></param>
        </member>
        <member name="P:AutoCSer.Json.Node.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.Boolean">
            <summary>
            JSON 节点隐式转换为逻辑值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>逻辑值</returns>
        </member>
        <member name="P:AutoCSer.Json.Node.Number">
            <summary>
            数值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.Double">
            <summary>
            JSON 节点隐式转换为数值
            </summary>
            <param name="value">JSON 节点</param>
            <returns>数值</returns>
        </member>
        <member name="P:AutoCSer.Json.Node.DateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Node.op_Implicit(AutoCSer.Json.Node)~System.DateTime">
            <summary>
            JSON 节点隐式转换为时间
            </summary>
            <param name="value">JSON 节点</param>
            <returns>字符串</returns>
        </member>
        <member name="F:AutoCSer.Json.Node.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Values">
            <summary>
            字典数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Node.list">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.LeftArray">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Node.SubString">
            <summary>
            字符串
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.IsNull">
            <summary>
            是否空节点
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Count">
            <summary>
            字典 / 列表节点数量
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Node.Item(System.Int32)">
            <summary>
            获取列表节点数据
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Json.Node.Item(System.String)">
            <summary>
            获取字典数据
            </summary>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Node.SetNumberString(System.Char)">
            <summary>
            设置数字字符串
            </summary>
            <param name="quote"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.SetQuoteString(System.Int32,System.Char,System.Boolean)">
            <summary>
            未解析字符串
            </summary>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.SetList(AutoCSer.LeftArray{AutoCSer.Json.Node}@)">
            <summary>
            设置列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.SetDictionary(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.Json.Node,AutoCSer.Json.Node}}@)">
            <summary>
            设置字典
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:AutoCSer.Json.Node.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.QuoteString">
            <summary>
            未解析字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.ErrorQuoteString">
            <summary>
            解析错误的字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.NumberString">
            <summary>
            数字字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.NaN">
            <summary>
            非数值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.DateTimeTick">
            <summary>
            时间周期值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Bool">
            <summary>
            逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Array">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NodeType.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="T:AutoCSer.Json.NumberType">
            <summary>
            数字类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.Number">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.NaN">
            <summary>
            NaN
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.PositiveInfinity">
            <summary>
            正无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.NegativeInfinity">
            <summary>
            负无穷
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.Null">
            <summary>
            null 值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.NumberType.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseAttribute">
            <summary>
            JSON 解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseConfig">
            <summary>
            JSON 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.Constructor">
            <summary>
            自定义构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.IsEndSpace">
            <summary>
            对象解析结束后是否检测最后的空格符，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.IsTempString">
            <summary>
            是否临时字符串(可修改)
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseConfig.IsMatchEnum">
            <summary>
            是否强制匹配枚举值
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseConfig.Null">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseCustomAttribute">
            <summary>
            自定义类型解析函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseDynamicMethod">
            <summary>
            反序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.indexLocalBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.returnIndexLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.returnErrorLabel">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.index">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.isMemberMap">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.#ctor(System.Type,System.Boolean)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="isMemberMap"></param>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.isName">
            <summary>
            是否匹配默认顺序名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.nextIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.ParseDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.ParseMemberAttribute">
            <summary>
            JSON 解析成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMemberAttribute.IsDefault">
            <summary>
            是否默认解析成员
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseMethod">
            <summary>
            基本类型解析函数配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.Parser">
            <summary>
            JSON 解析
            </summary>
            <summary>
            JSON 解析
            </summary>
            <summary>
            JSON 解析
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Byte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.SByte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.UInt16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Int16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Int32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.UInt64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Int64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Single}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Double}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Decimal}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Char}@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.DateTime@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.DateTime}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Nullable{System.Guid}@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(System.Type@)">
            <summary>
            类型解析
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse(AutoCSer.Json.Node@)">
            <summary>
            JSON节点解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="F:AutoCSer.Json.Parser.parseMethods">
            <summary>
            基本类型解析函数
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.GetParseMethod(System.Type)">
            <summary>
            获取基本类型解析函数
            </summary>
            <param name="type">基本类型</param>
            <returns>解析函数</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseNotEmpty``1(System.String,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SetTcpServer">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseTcpServer``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseTcpServer``1(``0@)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SetEnum">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseEnum``1(System.String,``0@)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseWebViewNotEmpty``1(``0@,System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">目标数据</param>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Compile(System.Type[])">
            <summary>
            预编译类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="F:AutoCSer.Json.Parser.JavascriptLocalMinTime">
            <summary>
            JSON 转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.JavascriptLocalMinTimeTicks">
            <summary>
             Json转换时间差
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.AllMemberAttribute">
            <summary>
            默认解析所有成员
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.escapeChars">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Parser.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.anonymousTypes">
            <summary>
            匿名类型数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.jsonFixed">
            <summary>
            Json字符串起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.Current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Parser.CustomRead">
            <summary>
            自定义序列化获取当前读取数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.end">
            <summary>
            解析结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.endChar">
            <summary>
            最后一个字符
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.Quote">
            <summary>
            当前字符串引号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseState">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Parser.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndSpace">
            <summary>
            是否以空格字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndDigital">
            <summary>
            是否以10进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndHex">
            <summary>
            是否以16进制数字字符结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.isEndNumber">
            <summary>
            是否以数字字符结束
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.#ctor">
            <summary>
            JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(AutoCSer.SubString@,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(System.String,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(System.Char*,System.Int32,``0@)">
            <summary>
            Json解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="length">Json长度</param>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse``1(``0@)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="value">目标数据</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.TypeParse``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.TypeParse``1">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.VerifyRead(System.Int32)">
            <summary>
            自定义序列化重置当前读取数据位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.MoveRead(System.Int32)">
            <summary>
            移动当前读取数据位置，负数表示自定义序列化失败
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Free">
            <summary>
            释放 JSON 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.space">
            <summary>
            扫描空格字符
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.isNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.isNaNPositiveInfinity">
            <summary>
            是否非数字 NaN / Infinity
            </summary>
            <returns>是否非数字NaN</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns>是否 -Infinity</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex32(System.UInt32@)">
            <summary>
            解析16进制数字
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex64">
            <summary>
            解析16进制数字
            </summary>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchNumber(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchNumberNull(System.Char*@)">
            <summary>
            查找数字结束位置
            </summary>
            <param name="numberEnd">数字结束位置</param>
            <returns>数字类型</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.getNumberString(System.Char*)">
            <summary>
            获取数字字符串
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseTime(System.String,System.DateTime@)">
            <summary>
            时间解析 /Date(xxx)/
            </summary>
            <param name="timeString"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parse(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchEscape">
            <summary>
            查找字符串中的转义符
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscape">
            <summary>
            字符串转义解析
            </summary>
            <returns>写入结束位置</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscapeSize">
            <summary>
            获取转义后的字符串长度
            </summary>
            <returns>字符串长度</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscapeUnsafe(System.Char*)">
            <summary>
            字符串转义解析
            </summary>
            <param name="write">当前写入位置</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseEscape(System.Char*)">
            <summary>
            字符串解析
            </summary>
            <param name="start"></param>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseString">
            <summary>
            字符串解析
            </summary>
            <returns>字符串,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchEscapeEnd">
            <summary>
            查找转义字符串结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseStringNode(AutoCSer.Json.Node@)">
            <summary>
            解析字符串节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseListNode(AutoCSer.LeftArray{AutoCSer.Json.Node}@)">
            <summary>
            解析列表节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseDictionaryNode(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.Json.Node,AutoCSer.Json.Node}}@)">
            <summary>
            解析字典节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.Ignore">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreString">
            <summary>
            忽略字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreNumber">
            <summary>
            忽略数字
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreArray">
            <summary>
            忽略数组
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsFirstArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsNextArrayValue">
            <summary>
            是否存在下一个数组数据
            </summary>
            <returns>是否存在下一个数组数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreObject">
            <summary>
            忽略对象
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsFirstObject">
            <summary>
            判断是否存在第一个成员
            </summary>
            <returns>是否存在第一个成员</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsNextObject">
            <summary>
            判断是否存在下一个成员
            </summary>
            <returns>是否存在下一个成员</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsName(System.Byte*,System.Int32@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ignoreName">
            <summary>
            忽略成员名称
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchNameEnd">
            <summary>
            查找名称直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchColon">
            <summary>
            查找冒号
            </summary>
            <returns>是否找到</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchObject">
            <summary>
            查找对象起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.GetFirstName">
            <summary>
            获取成员名称第一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.GetNextName">
            <summary>
            获取成员名称下一个字符
            </summary>
            <returns>第一个字符,0表示失败</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.NextStringChar">
            <summary>
            读取下一个字符
            </summary>
            <returns>字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchStringEnd">
            <summary>
            查找字符串直到结束
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Parser.SetAnonymousType``1(``0)">
            <summary>
            设置匿名类型数据
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.CheckNoConstructor``1(``0@,System.Boolean)">
            <summary>
            找不到构造函数
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value">目标数据</param>
            <param name="isAnonymousType"></param>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchArray``1(``0[]@)">
            <summary>
            查找数组起始位置
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="value">目标数组</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchQuote">
            <summary>
            查找字符串引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchEnumQuote">
            <summary>
            查找枚举引号并返回第一个字符
            </summary>
            <returns>第一个字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.NextEnumChar">
            <summary>
            获取下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.SearchNextEnum">
            <summary>
            查找下一个枚举字符
            </summary>
            <returns>下一个枚举字符,0表示null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsEnumNumber">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.IsEnumNumberFlag">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.searchDictionary">
            <summary>
            查找字典起始位置
            </summary>
            <returns>是否查找到</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.isDictionaryObjectEnd">
            <summary>
            对象是否结束
            </summary>
            <returns>对象是否结束</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.tryNull">
            <summary>
            是否null
            </summary>
            <returns>是否null</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumSByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumLong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumULong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumSByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumUIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumLongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumULongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.structParse``1(``0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.typeParse``1(``0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.array``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.dictionary``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            字典解析
            </summary>
            <param name="dictionary">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.nullableEnumParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.nullableParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.keyValuePairParse``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.listConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.collectionConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.enumerableConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.arrayConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.dictionaryConstructor``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.baseParse``2(``1@)">
            <summary>
            基类转换
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.Parser.parseQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseQuoteString(AutoCSer.SubString@,System.Int32,System.Char,System.Int32)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <param name="isTempString"></param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.ParseQuoteString(AutoCSer.SubString@,AutoCSer.CharStream,System.Int32,System.Char)">
            <summary>
            字符串转义解析
            </summary>
            <param name="value"></param>
            <param name="charStream"></param>
            <param name="escapeIndex">未解析字符串起始位置</param>
            <param name="quote">字符串引号</param>
            <returns>解析是否成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString@,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(AutoCSer.SubString@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(System.String,``0@,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.Parse``1(System.String,AutoCSer.Json.ParseConfig)">
            <summary>
            JSON 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">JSON 字符串</param>
            <param name="config">配置参数</param>
            <returns>目标数据</returns>
        </member>
        <member name="M:AutoCSer.Json.Parser.UnsafeParse``1(System.Char*,System.Int32,``0@)">
            <summary>
            Json解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="json">Json 字符串</param>
            <param name="length">Json 长度</param>
            <param name="value">目标数据</param>
            <returns>是否解析成功</returns>
        </member>
        <member name="F:AutoCSer.Json.Parser.escapeCharSize">
            <summary>
            转义字符集合尺寸
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.escapeCharData">
            <summary>
            转义字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseNumberBit">
            <summary>
            JSON 解析数字
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseNameBit">
            <summary>
            JSON 解析键值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseNameStartBit">
            <summary>
            JSON 解析键值开始
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseSpaceBit">
            <summary>
            JSON 解析空格[ ,\t,\r,\n,160]
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseEscapeSearchBit">
            <summary>
            JSON 解析转义查找
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.EscapeBit">
            <summary>
            Javascript 转义位[\r,\n,\\,"]
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Parser.ParseBits">
            <summary>
            JSON 解析字符状态位
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseMethodCache">
            <summary>
            JSON 解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.BaseParseMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],AutoCSer.Json.ParseAttribute,AutoCSer.Metadata.FieldIndex@)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <param name="defaultMember">默认解析字段</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Json.ParseAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom"></param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.ParserIsNameMethod">
            <summary>
            是否匹配默认顺序名称 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.ParseStateField">
            <summary>
            解析状态 字段信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumMethods">
            <summary>
            枚举解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumSByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumLongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumULongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumSByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumUIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumLongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumULongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举解析调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.valueTypeMethods">
            <summary>
            值类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.structParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetValueType(System.Type)">
            <summary>
            获取值类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>值类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.typeMethods">
            <summary>
            引用类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.typeParseMethod">
            <summary>
            引用类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetType(System.Type)">
            <summary>
            获取引用类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>引用类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.arrayMethods">
            <summary>
            数组解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.arrayMethod">
            <summary>
            数组解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetArray(System.Type)">
            <summary>
            获取数组解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.dictionaryMethods">
            <summary>
            字典解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.dictionaryMethod">
            <summary>
            字典解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetDictionary(System.Type)">
            <summary>
            获取字典解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>字典解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.nullableMethods">
            <summary>
            可空类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.nullableEnumParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.nullableParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetNullable(System.Type)">
            <summary>
            获取可空类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>可空类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.keyValuePairMethods">
            <summary>
            键值对解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.keyValuePairParseMethod">
            <summary>
            值类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetKeyValuePair(System.Type)">
            <summary>
            获取键值对解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>键值对解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.customMethods">
            <summary>
            自定义解析调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetCustom(System.Type)">
            <summary>
            自定义解析委托调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>自定义解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumerableConstructorMethods">
            <summary>
            获取枚举构造调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.listConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.collectionConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.enumerableConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.arrayConstructorMethod">
            <summary>
            数组构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseMethodCache.dictionaryConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.GetIEnumerableConstructor(System.Type)">
            <summary>
            获取枚举构造调用函数信息
            </summary>
            <param name="type">集合类型</param>
            <returns>枚举构造调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Json.ParseMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Json.ParseResult">
            <summary>
            JSON 解析状态结果
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.Json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="M:AutoCSer.Json.ParseResult.op_Implicit(AutoCSer.Json.ParseResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.ParseState">
            <summary>
            JSON 解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NullJson">
            <summary>
            JSON 字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NullValue">
            <summary>
            解析目标对象参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.UnknownNote">
            <summary>
            未能识别的注释
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NoteNotRound">
            <summary>
            /**/ 注释缺少回合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotNull">
            <summary>
            null 值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotHex">
            <summary>
            16 进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.StringEnter">
            <summary>
            字符串被换行截断
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.ArrayManyRank">
            <summary>
            不支持多维数组
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotArray">
            <summary>
            数组解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotArrayValue">
            <summary>
            数组数据解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotObject">
            <summary>
            对象解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotFoundName">
            <summary>
            没有找到成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotFoundColon">
            <summary>
            没有找到冒号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.UnknownValue">
            <summary>
            忽略值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.NotDictionary">
            <summary>
            字典解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.ErrorType">
            <summary>
            类型解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Json.ParseState.Custom">
            <summary>
            自定义序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Json.ParseUnknownNameAttriubte">
            <summary>
            未知名称解析函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeAttribute">
            <summary>
            JSON 序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeAttribute.AnonymousTypeMember">
            <summary>
            匿名类型序列化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeConfig">
            <summary>
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.DefaultCheckLoopDepth">
            <summary>
            循环引用检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.SetLoopObject">
            <summary>
            循环引用设置函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.GetLoopObject">
            <summary>
            循环引用获取函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.CheckLoopDepth">
            <summary>
            循环引用检测深度，0 表示实时检测，默认为 20
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.NullChar">
            <summary>
            字符 0
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDateTimeMinNull">
            <summary>
            最小时间是否输出为 null，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDateTimeToString">
            <summary>
            时间是否转换成字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDateTimeOther">
            <summary>
            第三方格式 /Date(xxx)/
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsObject">
            <summary>
            是否将 object 转换成真实类型输出
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsStringDictionaryToObject">
            <summary>
            Dictionary[string,] 是否转换成对象输出，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsDictionaryToObject">
            <summary>
            Dictionary 是否转换成对象模式输出
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsViewClientType">
            <summary>
            是否输出客户端视图绑定类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsMaxNumberToString">
            <summary>
            超出最大有效精度的 long / ulong 是否转换成字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsMemberMapErrorToDefault">
            <summary>
            成员位图类型不匹配时是否使用默认输出，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeConfig.IsInfinityToNaN">
            <summary>
            默认为 true 表示将 Infinity / -Infinity 转换为 NaN 输出
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeConfig.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeCustomAttribute">
            <summary>
            自定义类型函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberAttribute">
            <summary>
            JSON 序列化成员配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberDynamicMethod">
            <summary>
            序列化动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.charStreamField">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isFirstMember">
            <summary>
            是否第一个字段
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.push(System.String)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.push(System.String,System.Int32,System.Reflection.Emit.Label)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
            <param name="memberIndex"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Json.SerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeMethod">
            <summary>
            基本类型序列化函数配置
            </summary>
        </member>
        <member name="T:AutoCSer.Json.Serializer">
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
            <summary>
            JSON 序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Byte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.SByte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Int16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.UInt16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.UInt32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.UInt64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Single})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Double})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Char})">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.DateTime})">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Guid)">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Nullable{System.Guid})">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Object)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(System.Type)">
            <summary>
            类型转换
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize(AutoCSer.Json.Node)">
            <summary>
            字符串转换
            </summary>
            <param name="value">JSON节点</param>
        </member>
        <member name="F:AutoCSer.Json.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CreateDefault(AutoCSer.CharStream@)">
            <summary>
            创建默认配置 JSON 序列化
            </summary>
            <param name="jsonStream"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.SetTcpServer">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.SerializeTcpServer``1(``0@,AutoCSer.UnmanagedStream)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.SerializeTcpServer``1(``0,AutoCSer.UnmanagedStream)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="stream"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Compile(System.Type[])">
            <summary>
            预编译类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="F:AutoCSer.Json.Serializer.MaxInt">
            <summary>
            最大整数值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.OtherDateStart">
            <summary>
            第三方ajax时间前缀
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.DateEnd">
            <summary>
            ajax时间后缀
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.DateStart">
            <summary>
            ajax时间前缀
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.AllMemberAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.CharStream">
            <summary>
            字符串输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.objectIndexs">
            <summary>
            对象编号
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.forefather">
            <summary>
            祖先节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.forefatherCount">
            <summary>
            祖先节点数量
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.checkLoopDepth">
            <summary>
            循环检测深度
            </summary>
        </member>
        <member name="P:AutoCSer.Json.Serializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.Serializer.isLoopObject">
            <summary>
            是否调用循环引用处理函数
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">Json输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@,AutoCSer.UnmanagedStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="stream">二进制缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serialize``1(``0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.TypeSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.TypeSerialize``1(``0@)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.pushArray``1(``0)">
            <summary>
            进入对象节点
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">数据对象</param>
            <returns>是否继续处理对象</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Push``1(``0)">
            <summary>
            进入对象节点
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">数据对象</param>
            <returns>是否继续处理对象</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Pop">
            <summary>
            退出对象节点
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomSerialize``1(``0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomWriteFirstName(System.String)">
            <summary>
            写入对象名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomWriteNextName(System.String)">
            <summary>
            写入对象名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomObjectEnd">
            <summary>
            写入对象结束括号
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomArrayStart">
            <summary>
            写入数组开始括号
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.CustomArrayEnd">
            <summary>
            写入数组结束括号
            </summary>
        </member>
        <member name="M:AutoCSer.Json.Serializer.classSerialize``1(``0)">
            <summary>
            引用类型对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.structSerialize``1(``0)">
            <summary>
            值类型对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.baseSerialize``2(AutoCSer.Json.Serializer,``1)">
            <summary>
            基类转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.serializeObject``1(AutoCSer.Json.Serializer,System.Object)">
            <summary>
            object转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.EnumToString``1(``0)">
            <summary>
            字符串转换
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.dictionary``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            字典转换
            </summary>
            <param name="dictionary">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.stringDictionary``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            字典转换
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.nullableSerialize``1(System.Nullable{``0})">
            <summary>
            值类型对象转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.keyValuePairSerialize``2(System.Collections.Generic.KeyValuePair{``0,``1})">
            <summary>
            字典转换JSON字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.structEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.enumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>JSON 字符串</returns>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0@,AutoCSer.CharStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            对象转换 JSON 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="jsonStream">JSON 输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Json.Serializer.Serialize``1(``0,AutoCSer.UnmanagedStream,AutoCSer.Json.SerializeConfig)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <param name="stream"></param>
            <param name="config"></param>
        </member>
        <member name="T:AutoCSer.Json.SerializeMethodCache">
            <summary>
            JSON 序列化函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.BaseSerializeMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],AutoCSer.Json.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Json.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom">成员类型</param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.namePools">
            <summary>
            名称数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetNamePool(System.String)">
            <summary>
            获取名称数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumMethods">
            <summary>
            枚举转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumToStringMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>枚举转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.typeMethods">
            <summary>
            未知类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.classSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.structSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetType(System.Type)">
            <summary>
            未知类型枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.objectMethods">
            <summary>
            object转换调用委托信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.serializeObjectMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetObject(System.Type)">
            <summary>
            获取object转换调用委托信息
            </summary>
            <param name="type">真实类型</param>
            <returns>object转换调用委托信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.arrayMethods">
            <summary>
            数组转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.arrayMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetArray(System.Type)">
            <summary>
            获取数组转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.dictionaryMethods">
            <summary>
            字典转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.dictionaryMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.stringDictionaryMethod">
            <summary>
            字符串字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetDictionary(System.Type)">
            <summary>
            获取字典转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>字典转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.nullableMethods">
            <summary>
            可空类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.nullableSerializeMethod">
            <summary>
            值类型对象转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetNullable(System.Type)">
            <summary>
            获取可空类型转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>可空类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.keyValuePairMethods">
            <summary>
            键值对转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.keyValuePairSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetKeyValuePair(System.Type)">
            <summary>
            获取键值对转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>键值对转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumerableMethods">
            <summary>
            枚举集合转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.structEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.enumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetIEnumerable(System.Type)">
            <summary>
            获取枚举集合转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举集合转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Json.SerializeMethodCache.customMethods">
            <summary>
            自定义转换调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.GetCustom(System.Type)">
            <summary>
            自定义枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>自定义转换委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Json.SerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Json.SerializeResult">
            <summary>
            序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeResult.Json">
            <summary>
            JSON 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeResult.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="M:AutoCSer.Json.SerializeResult.op_Implicit(AutoCSer.Json.SerializeResult)~System.String">
            <summary>
            JSON 字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.SerializeWarning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.LessSetLoop">
            <summary>
            缺少循环引用设置函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.LessGetLoop">
            <summary>
            缺少循环引用获取函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.SerializeWarning.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Json.StateSearcher">
            <summary>
            名称状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchName(AutoCSer.Json.Parser,System.Boolean@)">
            <summary>
            获取名称索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <param name="isQuote">名称是否带引号</param>
            <returns>名称索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.searchString(AutoCSer.Json.Parser,System.Char)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <param name="value">第一个字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchString(AutoCSer.Json.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.SearchFlagEnum(AutoCSer.Json.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.flagEnum(AutoCSer.Json.Parser,System.Char)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <param name="value">当前字符</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.NextFlagEnum(AutoCSer.Json.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">JSON 解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.memberSearchers">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.StateSearcher.memberSearcherLock">
            <summary>
            成员名称查找数据创建锁
            </summary>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.GetMemberSearcher(System.Type,System.String[])">
            <summary>
            获取成员名称查找数据
            </summary>
            <param name="type">定义类型</param>
            <param name="names">成员名称集合</param>
            <returns>成员名称查找数据</returns>
        </member>
        <member name="M:AutoCSer.Json.StateSearcher.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1">
            <summary>
            类型解析器
            </summary>
            <summary>
            类型解析器
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseTcpServer(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumParser">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumParser.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumParser.parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumParser.getIndex(AutoCSer.Json.Parser,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumByte.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumByte.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumSByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumSByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumSByte.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumSByte.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumShort.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumShort.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumUShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumUShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUShort.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUShort.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumInt.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumInt.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumUInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumUInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUInt.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumUInt.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumLong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumLong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumLong.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumLong.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.EnumULong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.EnumULong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumULong.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.EnumULong.ParseFlags(AutoCSer.Json.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.TryParseFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.TryParseFilter.TryParse">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.TryParseFilter.MemberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.TryParseFilter.Call(AutoCSer.Json.Parser,AutoCSer.Metadata.MemberMap,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="parser">Json解析器</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.TryParse">
            <summary>
            解析委托
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.UnknownParse">
            <summary>
            未知名称处理委托
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value"></param>
            <param name="name"></param>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.ParseMember">
            <summary>
            默认名称解析
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Json.TypeParser`1.ParseMemberMap">
            <summary>
            默认名称解析
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
            <param name="names"></param>
            <param name="memberMap"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.parseMember">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.parseMemberMap">
            <summary>
            默认名称解析
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.attribute">
            <summary>
            JSON 解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.DefaultParser">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.onUnknownName">
            <summary>
            未知名称处理委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.isAnonymousType">
            <summary>
            是否匿名类型
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.memberParsers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.unboxParser">
            <summary>
            包装处理
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeParser`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.Parse(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseValue(AutoCSer.Json.Parser,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.parseClass(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseMembers(AutoCSer.Json.Parser,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseClass(AutoCSer.Json.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ParseStruct(AutoCSer.Json.Parser,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.Array(AutoCSer.Json.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ArrayIndex(AutoCSer.Json.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">Json解析器</param>
            <param name="values">目标数据</param>
            <returns>数据数量,-1表示失败</returns>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.arrayManyRank(AutoCSer.Json.Parser,`0@)">
            <summary>
            不支持多维数组
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.ignore(AutoCSer.Json.Parser,`0@)">
            <summary>
            忽略数据
            </summary>
            <param name="parser">Json解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Json.TypeParser`1.unbox(AutoCSer.Json.Parser,`0@)">
            <summary>
            包装处理
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Json.TypeSerializer`1">
            <summary>
            类型序列化
            </summary>
            <summary>
            类型序列化
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.SerializeTcpServer(AutoCSer.Json.Serializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.defaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.attribute">
            <summary>
            JSON序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.viewClientTypeName">
            <summary>
            客户端视图类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Json.TypeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.Json.Serializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Serialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StructSerialize(AutoCSer.Json.Serializer,`0@)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StructSerialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.serialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            引用类型对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.ClassSerialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            引用类型对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.MemberSerialize(AutoCSer.Json.Serializer,`0)">
            <summary>
            值类型对象转换JSON字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Array(AutoCSer.Json.Serializer,`0[])">
            <summary>
            数组转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Enumerable(AutoCSer.Json.Serializer,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            枚举集合转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="values">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.KeyValuePair``1(AutoCSer.Json.Serializer,System.Collections.Generic.KeyValuePair{`0,``0})">
            <summary>
            字典转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.Dictionary``1(AutoCSer.Json.Serializer,System.Collections.Generic.Dictionary{`0,``0})">
            <summary>
            字典转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="dictionary">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.StringDictionary(AutoCSer.Json.Serializer,System.Collections.Generic.Dictionary{System.String,`0})">
            <summary>
            字典转换
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.arrayManyRank(AutoCSer.Json.Serializer,`0)">
            <summary>
            不支持多维数组
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.enumToString(AutoCSer.Json.Serializer,`0)">
            <summary>
            枚举转换字符串
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Json.TypeSerializer`1.toNull(AutoCSer.Json.Serializer,`0)">
            <summary>
            不支持对象转换null
            </summary>
            <param name="jsonSerializer">对象转换JSON字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.Json.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.ParseConfig">
            <summary>
            JSON 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.ParseAttribute">
            <summary>
            JSON 解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.SerializeConfig">
            <summary>
            JSON 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Json.UnionType.SerializeAttribute">
            <summary>
            JSON 序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.KeyValue`2">
            <summary>
            键值对
            </summary>
            <summary>
            键值对
            </summary>
            <typeparam name="keyType">键类型</typeparam>
            <typeparam name="valueType">值类型</typeparam>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0@,`1)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.Null">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="F:AutoCSer.KeyValue`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0,`1)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.#ctor(`0@,`1@)">
            <summary>
            键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:AutoCSer.KeyValue`2.Set(`0,`1)">
            <summary>
            重置键值对
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="T:AutoCSer.LeftArray`1">
            <summary>
            数组子串
            </summary>
            <summary>
            数组子串
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            数组子串
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            数组子串
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(AutoCSer.ListArray{`0})">
            <summary>
            数组子串
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32,`0[])">
            <summary>
            数组子串
            </summary>
            <param name="length">长度</param>
            <param name="value">数组</param>
        </member>
        <member name="P:AutoCSer.LeftArray`1.UnsafeLast">
            <summary>
            获取最后一个值
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.LastOrDefault">
            <summary>
            获取最后一个值
            </summary>
            <returns>最后一个值,失败为default(valueType)</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.UnsafeAdd(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0[])">
            <summary>
            添加数据集合
            </summary>
            <param name="array">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(AutoCSer.LeftArray{`0}@)">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(AutoCSer.ListArray{`0})">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add``1(System.Collections.Generic.ICollection{``0},System.Func{``0,`0})">
            <summary>
            添加数据集合
            </summary>
            <typeparam name="collectionValueType">集合数据类型</typeparam>
            <param name="values">数据集合</param>
            <param name="getValue">获取数据委托</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.UnsafePop">
            <summary>
            弹出最后一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.UnsafePopOnly">
            <summary>
            弹出最后一个数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Reverse">
            <summary>
            逆转列表
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray``1(System.Func{`0,``0})">
            <summary>
            转换数组
            </summary>
            <typeparam name="arrayType">数组类型</typeparam>
            <param name="getValue">数据获取委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            <summary>
            获取第一个匹配值
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>匹配值,失败为 default(valueType)</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetFindArray(System.Func{`0,System.Boolean})">
            <summary>
            获取匹配值集合
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>匹配值集合</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.getFindArray(System.Func{`0,System.Boolean},AutoCSer.MemoryMap)">
            <summary>
            获取匹配值集合
            </summary>
            <param name="isValue">数据匹配器</param>
            <param name="map">匹配结果位图</param>
            <returns>匹配值集合</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.JoinString(System.String,System.Func{`0,System.String})">
            <summary>
            连接字符串
            </summary>
            <param name="toString">字符串转换器</param>
            <param name="join">连接串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.setLengthClear(System.Int32)">
            <summary>
            设置数据长度并清除其它数据
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.removeEnd(System.Func{`0,System.Boolean})">
            <summary>
            移除所有后端匹配值
            </summary>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.indexOf(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            移除匹配值
            </summary>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.removeEndNot(System.Func{`0,System.Boolean})">
            <summary>
            移除所有后端匹配值
            </summary>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.indexOfNot(System.Func{`0,System.Boolean})">
            <summary>
            获取获取数组中的匹配位置
            </summary>
            <param name="isValue">数据匹配器</param>
            <returns>数组中的匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveNot(System.Func{`0,System.Boolean})">
            <summary>
            移除匹配值
            </summary>
            <param name="isValue">数据匹配器</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveToEnd(`0)">
            <summary>
            移除数据，然后将最后一个数据移动到被删除数据位置
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveRangeOnly(System.Int32,System.Int32)">
            <summary>
            移除数据范围
            </summary>
            <param name="index">起始位置</param>
            <param name="count">移除数量</param>
        </member>
        <member name="F:AutoCSer.LeftArray`1.defalutArraySize">
            <summary>
            默认数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Array">
            <summary>
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.LeftArray`1.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.LeftArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>数据值</returns>
        </member>
        <member name="P:AutoCSer.LeftArray`1.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(System.Int32)">
            <summary>
            数组子串
            </summary>
            <param name="size">容器大小</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.#ctor(`0[])">
            <summary>
            数组子串
            </summary>
            <param name="value">数组</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#Generic#IEnumerable{valueType}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.SetNull">
            <summary>
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetNull">
            <summary>
            置空并释放数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetNull(`0[]@,System.Int32@)">
            <summary>
            置空并释放数组
            </summary>
            <param name="array"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Exchange(AutoCSer.LeftArray{`0}@)">
            <summary>
            数组互换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(`0[])">
            <summary>
            重置数据
            </summary>
            <param name="value">数组,不能为null</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Set(`0[],System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="value">数组,不能为null</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.setLength(System.Int32)">
            <summary>
            设置数据容器长度
            </summary>
            <param name="count">数据长度</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.addToLength(System.Int32)">
            <summary>
            增加数据长度
            </summary>
            <param name="length">数据长度</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.PrepLength(System.Int32)">
            <summary>
            预增长度
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ClearOnlyLength">
            <summary>
            清除当前长度有效数据
            </summary>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Add(System.Collections.Generic.ICollection{`0})">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Insert(System.Int32,`0)">
            <summary>
            插入数据
            </summary>
            <param name="index">插入位置</param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.IndexOf(`0)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Remove(`0)">
            <summary>
            移除数据
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="values">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.LeftArray`1.ToArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.getArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.GetArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.LeftArray`1.Sort(System.Func{`0,`0,System.Int32})">
            <summary>
            排序
            </summary>
            <param name="comparer">比较器</param>
            <returns>排序后的数组</returns>
        </member>
        <member name="T:AutoCSer.ListArray`1">
            <summary>
            单向动态数组
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.ListArray`1.Length">
            <summary>
            数据数量
            </summary>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor">
            <summary>
            单向动态数据
            </summary>
        </member>
        <member name="P:AutoCSer.ListArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>数据值</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(`0[],System.Boolean)">
            <summary>
            单向动态数据
            </summary>
            <param name="values">数据数组</param>
            <param name="isUnsafe">true表示使用原数组,false表示需要复制数组</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.#ctor(AutoCSer.LeftArray{`0})">
            <summary>
            单向动态数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.ListArray`1.System#Collections#Generic#IEnumerable{valueType}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.addToLength(System.Int32)">
            <summary>
            增加数据长度
            </summary>
            <param name="length">数据长度</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.Add(`0[],System.Int32,System.Int32)">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
            <param name="index">起始位置</param>
            <param name="count">数量</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.IndexOf(`0)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.Remove(`0)">
            <summary>
            移除数据
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.removeAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.RemoveAtEnd(System.Int32)">
            <summary>
            移除数据并使用最后一个数据移动到当前位置
            </summary>
            <param name="index">数据位置</param>
        </member>
        <member name="M:AutoCSer.ListArray`1.getArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.ListArray`1.ToArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="T:AutoCSer.Log.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CacheType.None">
            <summary>
            不缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CacheType.Queue">
            <summary>
            先进先出
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CacheType.Last">
            <summary>
            最后一次
            </summary>
        </member>
        <member name="T:AutoCSer.Log.CatchCount">
            <summary>
            未处理异常计数
            </summary>
        </member>
        <member name="T:AutoCSer.Log.CatchCount.Type">
            <summary>
            未处理异常类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.Type.Log_Output">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.Type.SocketTimeoutLink_Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.Type.TcpServerSocket_Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.Type.TcpServerClientSocket_Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.Type.TcpClientSocket_Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.Type.Count">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Log.CatchCount.counts">
            <summary>
            未处理异常类型计数
            </summary>
        </member>
        <member name="M:AutoCSer.Log.CatchCount.Add(AutoCSer.Log.CatchCount.Type)">
            <summary>
            添加未处理异常
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:AutoCSer.Log.Config">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Config.FilePath">
            <summary>
            日志文件目录
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Config.MaxFileSize">
            <summary>
            日志文件默认最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Config.MaxCacheCount">
            <summary>
            最大缓存日志数量
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Config.Type">
            <summary>
            日志处理类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Config.Log">
            <summary>
            日志处理接口
            </summary>
        </member>
        <member name="T:AutoCSer.Log.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Log.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Log.DebugInfo">
            <summary>
            日志信息
            </summary>
            <summary>
            日志信息
            </summary>
            <summary>
            日志信息
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.toStringStream">
            <summary>
            字符串转换流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.toStringStreamLock">
            <summary>
            字符串转换流访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.StackTrace">
            <summary>
            调用堆栈
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.StackFrame">
            <summary>
            调用堆栈帧
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.Exception">
            <summary>
            错误异常
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.WaitId">
            <summary>
            日志同步标志
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.Type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.CacheType">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.toString">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.CallerMemberName">
            <summary>
            调用成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.CallerFilePath">
            <summary>
            调用源代码文件路径
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugInfo.CallerLineNumber">
            <summary>
            调用源代码行号
            </summary>
        </member>
        <member name="M:AutoCSer.Log.DebugInfo.ToString">
            <summary>
            字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:AutoCSer.Log.DebugString">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.DebugStream">
            <summary>
            字符串转换流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.Type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.StackTrace">
            <summary>
            调用堆栈
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.Exception">
            <summary>
            错误异常
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.stackFrameMethodTypeName">
            <summary>
            调用堆栈帧 函数类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.stackFrameMethodString">
            <summary>
            调用堆栈帧 函数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.stackFrameFile">
            <summary>
            调用堆栈帧 源代码文件路径
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.stackFrameLine">
            <summary>
            调用堆栈帧 源代码行号
            </summary>
        </member>
        <member name="F:AutoCSer.Log.DebugString.stackFrameColumn">
            <summary>
            调用堆栈帧 源代码列号
            </summary>
        </member>
        <member name="M:AutoCSer.Log.DebugString.Set(System.Diagnostics.StackFrame)">
            <summary>
            设置 调用堆栈帧
            </summary>
            <param name="StackFrame"></param>
        </member>
        <member name="M:AutoCSer.Log.DebugString.Write(System.String)">
            <summary>
            输出 提示信息
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:AutoCSer.Log.DebugString.Write">
            <summary>
            输出堆栈与异常信息
            </summary>
        </member>
        <member name="T:AutoCSer.Log.ErrorType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.ErrorType.None">
            <summary>
            没有异常(不输出)
            </summary>
        </member>
        <member name="F:AutoCSer.Log.ErrorType.Null">
            <summary>
            关键值为空
            </summary>
        </member>
        <member name="F:AutoCSer.Log.ErrorType.IndexOutOfRange">
            <summary>
            索引超出范围
            </summary>
        </member>
        <member name="F:AutoCSer.Log.ErrorType.ErrorOperation">
            <summary>
            操作不可用
            </summary>
        </member>
        <member name="F:AutoCSer.Log.ErrorType.Unknown">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:AutoCSer.Log.File">
            <summary>
            文件日志处理(默认日志)
            </summary>
            <summary>
            文件日志处理(默认日志)
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.DefaultFilePrefix">
            <summary>
            日志文件前缀
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.Files">
            <summary>
            文件日志链表
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.waitLock">
            <summary>
            日志同步访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.cache">
            <summary>
            日志缓存队列
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.maxCacheCount">
            <summary>
            最大缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileName">
            <summary>
            日志文件名
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.fileStream">
            <summary>
            日志文件流
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.newDebugs">
            <summary>
            新的日志信息队列
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.debugs">
            <summary>
            当前正在处理的日志信息队列
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.debugLock">
            <summary>
            日志信息访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.waitId">
            <summary>
            日志同步标志
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.freeWaitId">
            <summary>
            已释放日志同步标志
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.lastCache">
            <summary>
            最后一次输出缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isTimer">
            <summary>
            是否已经触发定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isPushFiles">
            <summary>
            是否添加到文件日志链表
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.MaxSize">
            <summary>
            最大字节长度(小于等于0表示不限)
            </summary>
        </member>
        <member name="P:AutoCSer.Log.File.Type">
            <summary>
            日志处理类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Log.File.isFieStream">
            <summary>
            是否文件流模式
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.#ctor(System.String,System.Int32,AutoCSer.Log.LogType)">
            <summary>
            日志处理
            </summary>
            <param name="fileName">日志文件</param>
            <param name="maxCacheCount">最大缓存数量</param>
            <param name="type">最大缓存数量</param>
        </member>
        <member name="M:AutoCSer.Log.File.tryOpen">
            <summary>
            打开日志文件
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.open(System.Boolean)">
            <summary>
            打开日志文件
            </summary>
            <param name="isTrace">是否输出调试信息</param>
            <returns>日志文件是否打开成功</returns>
        </member>
        <member name="M:AutoCSer.Log.File.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.Flush">
            <summary>
            等待写入文件
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.UnsafeMoveBak">
            <summary>
            移动日志文件
            </summary>
            <returns>新的日志文件名称</returns>
        </member>
        <member name="M:AutoCSer.Log.File.moveBak">
            <summary>
            移动日志文件
            </summary>
            <returns>新的日志文件名称</returns>
        </member>
        <member name="M:AutoCSer.Log.File.wait(AutoCSer.Log.DebugInfo)">
            <summary>
            日志输出同步等待
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Log.File.add(AutoCSer.Log.DebugInfo,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="value"></param>
            <param name="isWait"></param>
        </member>
        <member name="M:AutoCSer.Log.File.Add(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.add(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
            <param name="isWait">是否同步</param>
            <returns>日志信息</returns>
        </member>
        <member name="M:AutoCSer.Log.File.add(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
            <param name="isWait">是否同步</param>
            <returns>日志信息</returns>
        </member>
        <member name="M:AutoCSer.Log.File.Add(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.Wait(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.Wait(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.Throw(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.Throw(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.WaitThrow(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.WaitThrow(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.File.OnTimer">
            <summary>
            定时器触发日志写入
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.output">
            <summary>
            日志写入
            </summary>
        </member>
        <member name="M:AutoCSer.Log.File.pulseWait(AutoCSer.Log.DebugInfo)">
            <summary>
            唤醒等待
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Log.File.add(AutoCSer.Log.LogType,System.String,AutoCSer.Log.CacheType,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
            <param name="isWait">是否同步</param>
            <returns>日志信息</returns>
        </member>
        <member name="M:AutoCSer.Log.File.Add(AutoCSer.Log.LogType,System.String,AutoCSer.Log.CacheType,System.String,System.String,System.Int32)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Log.File.Wait(AutoCSer.Log.LogType,System.String,AutoCSer.Log.CacheType,System.String,System.String,System.Int32)">
            <summary>
            同步添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="T:AutoCSer.Log.ILog">
            <summary>
            日志处理
            </summary>
            <summary>
            日志处理
            </summary>
        </member>
        <member name="P:AutoCSer.Log.ILog.Type">
            <summary>
            日志处理类型
            </summary>
        </member>
        <member name="M:AutoCSer.Log.ILog.Add(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Add(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Wait(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Wait(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Throw(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Throw(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.WaitThrow(AutoCSer.Log.LogType,System.Exception,System.String,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="error">错误异常</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.WaitThrow(AutoCSer.Log.LogType,System.String,System.Diagnostics.StackFrame,System.Diagnostics.StackTrace,AutoCSer.Log.CacheType)">
            <summary>
            同步添加日志并抛出异常
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="stackFrame">堆栈帧函数信息</param>
            <param name="stackTrace">调用堆栈</param>
            <param name="cache">缓存类型</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Flush">
            <summary>
            等待写入文件
            </summary>
        </member>
        <member name="M:AutoCSer.Log.ILog.Add(AutoCSer.Log.LogType,System.String,AutoCSer.Log.CacheType,System.String,System.String,System.Int32)">
            <summary>
            添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="M:AutoCSer.Log.ILog.Wait(AutoCSer.Log.LogType,System.String,AutoCSer.Log.CacheType,System.String,System.String,System.Int32)">
            <summary>
            同步添加日志
            </summary>
            <param name="type">日志类型</param>
            <param name="message">提示信息</param>
            <param name="cache">缓存类型</param>
            <param name="callerMemberName">调用成员名称</param>
            <param name="callerFilePath">调用源代码文件路径</param>
            <param name="callerLineNumber">调用源代码行号</param>
        </member>
        <member name="T:AutoCSer.Log.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.AutoCSer">
            <summary>
            AutoCSer 框架底层调试信息
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Debug">
            <summary>
            调试信息
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Info">
            <summary>
            一般信息
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Error">
            <summary>
            一般错误
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.Flush">
            <summary>
            等待缓存写入文件
            </summary>
        </member>
        <member name="F:AutoCSer.Log.LogType.All">
            <summary>
            所有日志
            </summary>
        </member>
        <member name="T:AutoCSer.Log.Pub">
            <summary>
            日志公共
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Pub.Config">
            <summary>
            默认日志配置
            </summary>
        </member>
        <member name="F:AutoCSer.Log.Pub.Log">
            <summary>
            信息处理接口，一般用于辅助定位BUG
            </summary>
        </member>
        <member name="T:AutoCSer.Log.Trace">
            <summary>
            输出调试信息
            </summary>
        </member>
        <member name="M:AutoCSer.Log.Trace.Console(System.Exception)">
            <summary>
            控制台输出
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:AutoCSer.Log.Trace.Console(System.String)">
            <summary>
            控制台输出
            </summary>
            <param name="writeLine"></param>
        </member>
        <member name="T:AutoCSer.Log.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Log.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Log.UnionType.Config">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="F:AutoCSer.Log.UnionType.File">
            <summary>
            文件日志
            </summary>
        </member>
        <member name="T:AutoCSer.MemberCopy.Copyer`1">
            <summary>
            成员复制
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.Copy(`0@,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            对象成员复制
            </summary>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.Copy(`0,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            对象成员复制
            </summary>
            <param name="value">目标对象</param>
            <param name="readValue">被复制对象</param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="T:AutoCSer.MemberCopy.Copyer`1.copyer">
            <summary>
            成员复制委托
            </summary>
            <param name="value"></param>
            <param name="copyValue"></param>
        </member>
        <member name="T:AutoCSer.MemberCopy.Copyer`1.memberMapCopyer">
            <summary>
            成员复制委托
            </summary>
            <param name="value"></param>
            <param name="copyValue"></param>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.isValueCopy">
            <summary>
            是否采用值类型复制模式
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.defaultCopyer">
            <summary>
            默认成员复制委托
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.defaultMemberCopyer">
            <summary>
            默认成员复制委托
            </summary>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.copyArray(`0[]@,`0[])">
            <summary>
            数组复制
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.copyArray(`0[]@,`0[],AutoCSer.Metadata.MemberMap)">
            <summary>
            数组复制
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.customCopy(`0@,`0)">
            <summary>
            自定义复制函数
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.noCopy(`0@,`0)">
            <summary>
            没有复制字段
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.noCopy(`0@,`0,AutoCSer.Metadata.MemberMap)">
            <summary>
            没有复制字段
            </summary>
            <param name="value"></param>
            <param name="readValue"></param>
            <param name="memberMap"></param>
        </member>
        <member name="F:AutoCSer.MemberCopy.Copyer`1.memberwiseClone">
            <summary>
            对象浅复制
            </summary>
        </member>
        <member name="M:AutoCSer.MemberCopy.Copyer`1.MemberwiseClone(`0)">
            <summary>
            对象浅复制
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.MemberCopy.CustomAttribute">
            <summary>
            自定义类型成员复制函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.MemberCopy.MemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.MemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.MemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.MemberCopy.MemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.#ctor(System.Type,System.Reflection.Emit.DynamicMethod)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="dynamicMethod"></param>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.PushMemberMap(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.MemberCopy.MemberDynamicMethod.Create``1">
            <summary>
            创建成员复制委托
            </summary>
            <returns>成员复制委托</returns>
        </member>
        <member name="T:AutoCSer.Memory">
            <summary>
            内存或字节数组处理
            </summary>
            <summary>
            内存或字节数组处理
            </summary>
        </member>
        <member name="M:AutoCSer.Memory.Clear(System.UInt64*,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址</param>
            <param name="count">整数数量</param>
        </member>
        <member name="M:AutoCSer.Memory.equal(System.Byte[],System.Byte[])">
            <summary>
            字节数组比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.EqualNotNull(System.Byte[],System.Byte[])">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.EqualNotNull(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.EqualNotNull(System.Byte[],System.Void*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.equal(AutoCSer.SubArray{System.Byte},AutoCSer.SubArray{System.Byte}@)">
            <summary>
            字节数组比较
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.indexOfNotNull(System.Byte[],System.Byte)">
            <summary>
            查找字节
            </summary>
            <param name="data">字节数组</param>
            <param name="value">字节值</param>
            <returns>字节位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Memory.IndexOf(System.Byte[],System.Byte)">
            <summary>
            查找字节
            </summary>
            <param name="data">长度不为 0 的字节数组</param>
            <param name="value">字节值</param>
            <returns>字节位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.Memory.Find(System.Byte*,System.Byte*,System.Byte)">
            <summary>
            查找字节,数据长度不能为0
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null,长度不为 0</param>
            <param name="value">字节值</param>
            <returns>字节位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Memory.FindLast(System.Byte*,System.Byte*,System.Byte)">
            <summary>
            查找最后一个字节,数据长度不能为0
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
            <param name="value">字节值</param>
            <returns>字节位置,失败为null</returns>
        </member>
        <member name="M:AutoCSer.Memory.toStringNotNull(System.Byte[])">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.toStringNotNull(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ToString(System.Byte*,System.Int32)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.toLowerNotNull(System.Byte[])">
            <summary>
            大写转小写
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Memory.ToLowerNotNull(System.Byte*,System.Byte*)">
            <summary>
            大写转小写
            </summary>
            <param name="start">起始位置,不能为null</param>
            <param name="end">结束位置,不能为null</param>
        </member>
        <member name="M:AutoCSer.Memory.SimpleCopyNotNull64(System.Byte[],System.Byte*,System.Int32)">
            <summary>
            复制字节数组(不足8字节按8字节算)
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.FillBits(System.Byte*,System.Int32,System.Int32)">
            <summary>
            填充二进制位
            </summary>
            <param name="data">数据起始位置,不能为null</param>
            <param name="start">起始二进制位,不能越界</param>
            <param name="count">二进制位数量,不能越界</param>
        </member>
        <member name="M:AutoCSer.Memory.getHashCode(System.Byte[])">
            <summary>
            计算 32 位 HASH 值
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Memory.ClearUnsafe(System.UInt64*,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Clear(System.Byte*,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="count">字节数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.Fill(System.UInt64*,System.UInt64,System.Int32)">
            <summary>
            填充整数(用Buffer.BlockCopy可能比指针快)
            </summary>
            <param name="src">串起始地址,不能为null</param>
            <param name="value">填充整数</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.Memory.GetHashCode(System.Void*,System.Int32)">
            <summary>
            计算 32 位 HASH 值
            </summary>
            <param name="data">数据起始位置</param>
            <param name="length">数据长度</param>
            <returns>32 位 HASH 值</returns>
        </member>
        <member name="M:AutoCSer.Memory.GetHashCode64(System.Byte*,System.Int32)">
            <summary>
            计算 64 位 HASH 值
            </summary>
            <param name="start">数据起始位置</param>
            <param name="length">数据长度</param>
            <returns>64 位 HASH 值</returns>
        </member>
        <member name="M:AutoCSer.Memory.EqualNotNull(System.Void*,System.Void*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.equal(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.CopyNotNull(System.Void*,System.Byte[],System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原字节起始地址,不能为null</param>
            <param name="destination">目标串数组,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.CopyNotNull(System.Void*,System.Void*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.copy(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.SimpleEqualNotNull(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.SimpleEqualNotNull(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            字节数组比较
            </summary>
            <param name="left">不能为null</param>
            <param name="right">不能为null</param>
            <param name="count">比较字节数,必须大于等于0</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:AutoCSer.Memory.SimpleCopyNotNull(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于等于0</param>
        </member>
        <member name="M:AutoCSer.Memory.SimpleCopyNotNull64(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            复制字节数组(不足8字节按8字节算)
            </summary>
            <param name="source">原串起始地址,不能为null</param>
            <param name="destination">目标串起始地址,不能为null</param>
            <param name="length">字节长度,大于0</param>
        </member>
        <member name="T:AutoCSer.MemoryMap">
            <summary>
            指针位图
            </summary>
            <summary>
            指针位图
            </summary>
        </member>
        <member name="M:AutoCSer.MemoryMap.Set(System.UInt64*,System.Int32)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.SetWhenNullUnsafe(System.Int32)">
            <summary>
            当占位状态为空时设置占位
            </summary>
            <param name="bit">位值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:AutoCSer.MemoryMap.Set(System.Int32,System.Int32)">
            <summary>
            设置占位段
            </summary>
            <param name="start">位值</param>
            <param name="count">段长</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.Clear(System.Int32)">
            <summary>
            清除占位
            </summary>
            <param name="bit">位值</param>
        </member>
        <member name="F:AutoCSer.MemoryMap.Map">
            <summary>
            位图指针
            </summary>
        </member>
        <member name="M:AutoCSer.MemoryMap.#ctor(System.Void*)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.#ctor(System.UInt64*,System.Int32)">
            <summary>
            指针位图
            </summary>
            <param name="map">位图指针,不能为null</param>
            <param name="count">整数数量,大于0</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.Get(System.Int32)">
            <summary>
            获取占位状态
            </summary>
            <param name="bit">位值</param>
            <returns>是否已占位</returns>
        </member>
        <member name="M:AutoCSer.MemoryMap.Get(System.Char)">
            <summary>
            获取占位状态
            </summary>
            <param name="bit">位值</param>
            <returns>是否已占位</returns>
        </member>
        <member name="M:AutoCSer.MemoryMap.Set(System.Int32)">
            <summary>
            设置占位
            </summary>
            <param name="bit">位值</param>
        </member>
        <member name="M:AutoCSer.MemoryMap.Set(System.Char)">
            <summary>
            设置占位
            </summary>
            <param name="bit">位值</param>
        </member>
        <member name="T:AutoCSer.Metadata.AttributeMethod">
            <summary>
            自定义属性函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.Method">
            <summary>
            函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.attributes">
            <summary>
            自定义属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.staticMethods">
            <summary>
            自定义属性函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.createStaticLock">
            <summary>
            自定义属性函数信息集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.GetStatic(System.Type)">
            <summary>
            根据类型获取自定义属性函数信息集合
            </summary>
            <param name="type">对象类型</param>
            <returns>自定义属性函数信息集合</returns>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.methods">
            <summary>
            自定义属性函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.AttributeMethod.createLock">
            <summary>
            自定义属性函数信息集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.Get(System.Type)">
            <summary>
            根据类型获取自定义属性函数信息集合
            </summary>
            <param name="type">对象类型</param>
            <returns>自定义属性函数信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.Attributes``1">
            <summary>
            获取自定义属性集合
            </summary>
            <typeparam name="attributeType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.AttributeMethod.GetAttribute``1">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <returns>自定义属性</returns>
        </member>
        <member name="T:AutoCSer.Metadata.BoxSerializeAttribute">
            <summary>
            值类型序列化包装处理
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.BoxSerializeAttribute.IsJson">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.BoxSerializeAttribute.IsXml">
            <summary>
            XML序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.BoxSerializeAttribute.#ctor">
            <summary>
            值类型序列化包装处理
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.FieldIndex">
            <summary>
            字段索引
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.FieldIndex.AnonymousName">
            <summary>
            匿名字段名称
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.FieldIndex.#ctor(System.Reflection.FieldInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            字段信息
            </summary>
            <param name="field">字段信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreAttribute">
            <summary>
            禁止安装属性
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.IgnoreMemberAttribute">
            <summary>
            禁止安装属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.IgnoreMemberAttribute.IsIgnoreCurrent">
            <summary>
            是否禁止当前安装
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            是否禁止当前安装
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.IgnoreMemberAttribute.IsSetup">
            <summary>
            是否安装[AutoCSer.code]
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute">
            <summary>
            成员选择
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsAttribute">
            <summary>
            成员是否匹配自定义属性类型，默认为 false 表示选择所有成员。
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.IsBaseTypeAttribute">
            <summary>
            指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.Instance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.Instance.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.Instance.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.NonPublic">
            <summary>
            默认非公有成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.NonPublic.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance">
            <summary>
            默认公有动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstance.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField">
            <summary>
            默认公有动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceField.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.InstanceField">
            <summary>
            默认动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.InstanceField.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty">
            <summary>
            默认动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.Filter">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberFilterAttribute.PublicInstanceProperty.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Unknown">
            <summary>
            未知成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicInstanceField">
            <summary>
            公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicInstanceField">
            <summary>
            非公共动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicInstanceProperty">
            <summary>
            公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicInstanceProperty">
            <summary>
            非公共动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicStaticField">
            <summary>
            公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicStaticField">
            <summary>
            非公共静态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicStaticProperty">
            <summary>
            公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicStaticProperty">
            <summary>
            非公共静态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicInstance">
            <summary>
            公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicInstance">
            <summary>
            非公共动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.PublicStatic">
            <summary>
            公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublicStatic">
            <summary>
            非公共静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.InstanceField">
            <summary>
            动态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.InstanceProperty">
            <summary>
            动态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.StaticField">
            <summary>
            静态字段成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.StaticProperty">
            <summary>
            静态属性成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Public">
            <summary>
            公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.NonPublic">
            <summary>
            非公共成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Instance">
            <summary>
            动态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Static">
            <summary>
            静态成员
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberFilters.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup">
            <summary>
            成员索引分组
            </summary>
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.get(System.Func{AutoCSer.Metadata.MemberIndexInfo,System.Boolean})">
            <summary>
            获取成员索引集合
            </summary>
            <param name="isValue">成员匹配委托</param>
            <returns>成员索引集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Find(AutoCSer.Metadata.MemberFilters,System.Boolean)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Find``1(AutoCSer.Metadata.MemberFilterAttribute)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="filter">成员选择</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Get``1(System.Type,AutoCSer.Metadata.MemberFilters,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取匹配成员集合
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="filter">选择类型</param>
            <param name="isFilter">是否完全匹配选择类型</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。</param>
            <returns>匹配成员集合</returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup.group">
            <summary>
            动态成员分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.PublicFields">
            <summary>
            公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.NonPublicFields">
            <summary>
            非公有动态字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.PublicProperties">
            <summary>
            公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.NonPublicProperties">
            <summary>
            非公有动态属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.group.AnonymousFields">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.group.#ctor(System.Type,System.Boolean)">
            <summary>
            动态成员分组
            </summary>
            <param name="type">目标类型</param>
            <param name="isStatic">是否静态成员</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup.typeDepth">
            <summary>
            类型深度
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.Depth">
            <summary>
            类型深度
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.isField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.typeDepth.isPublic">
            <summary>
            是否共有成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.PublicField">
            <summary>
            共有字段成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.NonPublicField">
            <summary>
            非共有字段成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.PublicProperty">
            <summary>
            共有属性成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexGroup.typeDepth.NonPublicProperty">
            <summary>
            非共有属性成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.typeDepth.#ctor(System.Type,System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            类型深度
            </summary>
            <param name="type">类型</param>
            <param name="field">成员字段</param>
            <param name="isPublic">是否共有成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.typeDepth.#ctor(System.Type,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            类型深度
            </summary>
            <param name="type">类型</param>
            <param name="property">成员属性</param>
            <param name="isPublic">是否共有成员</param>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.cache">
            <summary>
            成员索引分组集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.cacheLock">
            <summary>
            成员索引分组集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicFields">
            <summary>
            公有字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicFields">
            <summary>
            非公有字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.PublicProperties">
            <summary>
            公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.NonPublicProperties">
            <summary>
            非公有属性
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.AnonymousFields">
            <summary>
            匿名字段
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.MemberCount">
            <summary>
            所有成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.fieldCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Compare(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup.propertyCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.compare(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.#ctor(System.Type,System.Boolean)">
            <summary>
            成员索引分组
            </summary>
            <param name="type">对象类型</param>
            <param name="isStatic">是否静态成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.Get(System.Type)">
            <summary>
            根据类型获取成员索引分组
            </summary>
            <param name="type">对象类型</param>
            <returns>成员索引分组</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexGroup`1">
            <summary>
            成员索引分组
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.Group">
            <summary>
            成员索引分组
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.MemberCount">
            <summary>
            所有成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexGroup`1.FieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetAllMembers">
            <summary>
            成员集合
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetFields(AutoCSer.Metadata.MemberFilters)">
            <summary>
            获取字段集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetProperties(AutoCSer.Metadata.MemberFilters)">
            <summary>
            获取属性集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexGroup`1.GetAnonymousFields(AutoCSer.Metadata.MemberFilters)">
            <summary>
            获取字段集合
            </summary>
            <param name="memberFilter">成员选择类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo">
            <summary>
            成员索引
            </summary>
            <summary>
            成员索引
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(AutoCSer.Metadata.MemberIndexInfo)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.find``2(``0[],System.Boolean,System.Boolean)">
            <summary>
            根据类型获取成员信息集合
            </summary>
            <typeparam name="memberType">成员索引类型</typeparam>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="members">待匹配的成员信息集合</param>
            <param name="isAttribute">是否匹配自定义属性类型</param>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>成员信息集合</returns>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberSystemType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.AwaiterReturnType">
            <summary>
            AutoCSer.Net.TcpServer.Awaiter[,] 返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.TemplateMemberType">
            <summary>
            模板成员类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.MemberIndex">
            <summary>
            成员编号
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.MemberFilters">
            <summary>
            选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsField">
            <summary>
            是否字段
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanSet">
            <summary>
            是否可赋值
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.CanGet">
            <summary>
            是否可读取
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.isIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberIndexInfo.IsIgnore">
            <summary>
            是否忽略该成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(System.Reflection.MemberInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.#ctor(System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="index">成员编号</param>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.attributes">
            <summary>
            自定义属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo.baseAttributes">
            <summary>
            自定义属性集合(包括基类成员属性)
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.Attributes``1(System.Boolean)">
            <summary>
            获取自定义属性集合
            </summary>
            <typeparam name="attributeType"></typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetAttribute``1(System.Boolean)">
            <summary>
            根据成员属性获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.GetSetupAttribute``1(System.Boolean)">
            <summary>
            获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.IsAttribute``1(System.Boolean)">
            <summary>
            判断是否存在自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>是否存在自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo.IsIgnoreAttribute``1(System.Boolean)">
            <summary>
            判断是否忽略自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>是否忽略自定义属性</returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberIndexInfo`1">
            <summary>
            成员索引
            </summary>
            <typeparam name="memberType">成员类型</typeparam>
        </member>
        <member name="F:AutoCSer.Metadata.MemberIndexInfo`1.Member">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberIndexInfo`1.#ctor(`0,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            成员信息
            </summary>
            <param name="member">成员信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap">
            <summary>
            成员位图
            </summary>
            <summary>
            成员位图
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.IsAnyMember">
            <summary>
            是否存在成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.copyTo(AutoCSer.Metadata.MemberMap)">
            <summary>
            复制成员位图
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.and(AutoCSer.Metadata.MemberMap)">
            <summary>
            成员交集运算
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.xor(AutoCSer.Metadata.MemberMap)">
            <summary>
            成员异或运算,忽略默认成员
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap.TypeInfo">
            <summary>
            成员位图类型信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.TypeInfo.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.TypeInfo.Pool">
            <summary>
            成员位图内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.TypeInfo.NameIndexSearcher">
            <summary>
            名称索引查找数据
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.MemberCount">
            <summary>
            成员数量
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.FieldCount">
            <summary>
            字段成员数量
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.MemberMapSize">
            <summary>
            成员位图字节数量
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.TypeInfo.BinarySerializeSize">
            <summary>
            字段成员位图序列化字节数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.#ctor(System.Type,AutoCSer.Metadata.MemberIndexInfo[],System.Int32)">
            <summary>
            成员位图类型信息
            </summary>
            <param name="type">类型</param>
            <param name="members">成员索引集合</param>
            <param name="fieldCount">字段成员数量</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.GetMemberIndex(System.String)">
            <summary>
            获取成员索引
            </summary>
            <param name="name">成员名称</param>
            <returns>成员索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.GetClear">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.GetMap">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.TypeInfo.Push(System.Byte*@)">
            <summary>
            成员位图入池
            </summary>
            <param name="map">成员位图</param>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap.Pool">
            <summary>
            成员位图内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.free">
            <summary>
            空闲内存地址
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.size">
            <summary>
            成员位图字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.freeLock">
            <summary>
            空闲内存地址访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.clearCount">
            <summary>
            填充整数数量
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.#ctor(System.Int32)">
            <summary>
            成员位图内存池
            </summary>
            <param name="size">成员位图字节数量</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.Get">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.GetClear">
            <summary>
            获取成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.Push(System.Byte*@)">
            <summary>
            成员位图入池
            </summary>
            <param name="map">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Pool.GetPool(System.Int32)">
            <summary>
            获取成员位图内存池
            </summary>
            <param name="size">成员位图字节数量</param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memorySize">
            <summary>
            成员位图内存池字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.maxMemberMapCount">
            <summary>
            成员位图内存池支持最大成员数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.pools">
            <summary>
            成员位图内存池集合
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.poolLock">
            <summary>
            成员位图内存池集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryCount">
            <summary>
            内存申请数量
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryStart">
            <summary>
            成员位图内存池起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryEnd">
            <summary>
            成员位图内存池结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.memoryLock">
            <summary>
            成员位图内存池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Pool.createLock">
            <summary>
            成员位图内存池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.map">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap.Type">
            <summary>
            成员位图类型信息
            </summary>
        </member>
        <member name="P:AutoCSer.Metadata.MemberMap.IsDefault">
            <summary>
            是否默认全部成员有效
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.#ctor(AutoCSer.Metadata.MemberMap.TypeInfo)">
            <summary>
            成员位图
            </summary>
            <param name="type">成员位图类型信息</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Empty">
            <summary>
            清空所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.Full">
            <summary>
            添加所有成员
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.IsMember(System.Int32)">
            <summary>
            判断成员索引是否有效
            </summary>
            <param name="memberIndex">成员索引</param>
            <returns>成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.ClearMember(System.Int32)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.ClearMember(System.String)">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.SetMember(System.Int32)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberIndex">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.SetMember(System.String)">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberName">成员名称</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.BinarySerialize(AutoCSer.UnmanagedStream)">
            <summary>
            序列化
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.GetFieldDeSerialize">
            <summary>
            获取字段成员反序列化位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.equals(AutoCSer.Metadata.MemberMap)">
            <summary>
            比较是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.equals(System.Byte*)">
            <summary>
            比较是否相等
            </summary>
            <param name="otherMap"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap.GetMemberName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取成员名称
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap`1">
            <summary>
            成员位图
            </summary>
            <summary>
            成员位图
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap`1.Builder">
            <summary>
            创建成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.Builder.memberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.#ctor(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            创建成员位图
            </summary>
            <param name="memberMap">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.#ctor(System.Boolean)">
            <summary>
            创建成员位图
            </summary>
            <param name="isNew">是否创建成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.op_Implicit(AutoCSer.Metadata.MemberMap{`0}.Builder)~AutoCSer.Metadata.MemberMap{`0}">
            <summary>
            成员位图
            </summary>
            <param name="value">创建成员位图</param>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.Clear(AutoCSer.Metadata.MemberMap{`0}.MemberIndex)">
            <summary>
            清除成员
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.Set(AutoCSer.Metadata.MemberMap{`0}.MemberIndex)">
            <summary>
            设置成员
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.Clear``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            清除成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Builder.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.MemberMap`1.MemberIndex">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.MemberIndex.Index">
            <summary>
            成员索引
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.MemberIndex.#ctor(System.Int32)">
            <summary>
            成员索引
            </summary>
            <param name="index">成员索引</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.MemberIndex.IsMember(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            判断成员索引是否有效
            </summary>
            <param name="memberMap"></param>
            <returns>成员索引是否有效</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.MemberIndex.ClearMember(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.MemberIndex.SetMember(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <param name="memberMap"></param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.MemberIndex.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            创建成员索引
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.Default">
            <summary>
            默认成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Copy">
            <summary>
            成员位图
            </summary>
            <returns>成员位图</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.And(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            成员交集运算
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Xor(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            成员异或运算,忽略默认成员
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Or(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            成员并集运算,忽略默认成员
            </summary>
            <param name="other">成员位图</param>
        </member>
        <member name="F:AutoCSer.Metadata.MemberMap`1.Type">
            <summary>
            成员位图类型信息
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.#ctor">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.ClearMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            清除成员索引,忽略默认成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member">成员</param>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.SetMember``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置成员索引,忽略默认成员
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.Equals(AutoCSer.Metadata.MemberMap{`0})">
            <summary>
            比较是否相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewFull">
            <summary>
            所有成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.MemberMap`1.NewEmpty">
            <summary>
            空成员位图
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Metadata.PropertyIndex">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.PropertyIndex.#ctor(System.Reflection.PropertyInfo,AutoCSer.Metadata.MemberFilters,System.Int32)">
            <summary>
            属性信息
            </summary>
            <param name="property">属性信息</param>
            <param name="filter">选择类型</param>
            <param name="index">成员编号</param>
        </member>
        <member name="T:AutoCSer.Metadata.TestMethodAttribute">
            <summary>
            测试函数
            </summary>
        </member>
        <member name="T:AutoCSer.Metadata.TypeAttribute">
            <summary>
            类型自定义属性信息
            </summary>
        </member>
        <member name="F:AutoCSer.Metadata.TypeAttribute.attributes">
            <summary>
            自定义属性信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.ClearCache">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.get(System.Type)">
            <summary>
            根据类型获取自定义属性信息集合
            </summary>
            <param name="type">对象类型</param>
            <returns>自定义属性信息集合</returns>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.GetAttributes``1(System.Type)">
            <summary>
            获取自定义属性集合
            </summary>
            <param name="type">对象类型</param>
            <typeparam name="attributeType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.GetAttribute``1(System.Type)">
            <summary>
            根据类型获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <returns>自定义属性</returns>
        </member>
        <member name="M:AutoCSer.Metadata.TypeAttribute.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            根据类型获取自定义属性
            </summary>
            <typeparam name="attributeType">自定义属性类型</typeparam>
            <param name="type">类型</param>
            <param name="isBaseType">是否搜索父类属性</param>
            <returns>自定义属性</returns>
        </member>
        <member name="T:AutoCSer.MethodImpl">
            <summary>
            内联方法定义
            </summary>
        </member>
        <member name="F:AutoCSer.MethodImpl.AggressiveInlining">
            <summary>
            内联方法定义
            </summary>
        </member>
        <member name="T:AutoCSer.Net.BufferIndex">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.BufferIndex.Value">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.BufferIndex.StartIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.BufferIndex.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.Net.BufferIndex.EndIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.BufferIndex.Set(System.Int16,System.Int16)">
            <summary>
            设置索引位置
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Net.BufferIndex.Set(System.Int64,System.Int64)">
            <summary>
            设置索引位置
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Net.BufferIndex.Next">
            <summary>
            移动到下一个位置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.HostPort">
            <summary>
            TCP 服务主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.HostPort.Host">
            <summary>
            主机名称或者 IP 地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.HostPort.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.HostPort.Set(System.String,System.Int32)">
            <summary>
            设置 TCP 服务主机与端口信息
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:AutoCSer.Net.HostPort.HostToIPAddress">
            <summary>
            主机名称转换为 IP 地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.HostPort.Equals(AutoCSer.Net.HostPort@)">
            <summary>
            判断是否TCP服务端口信息
            </summary>
            <param name="other">TCP服务端口信息</param>
            <returns>是否同一TCP服务端口信息</returns>
        </member>
        <member name="M:AutoCSer.Net.HostPort.Equals(AutoCSer.Net.HostPort)">
            <summary>
            判断是否TCP服务端口信息
            </summary>
            <param name="other">TCP服务端口信息</param>
            <returns>是否同一TCP服务端口信息</returns>
        </member>
        <member name="M:AutoCSer.Net.HostPort.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns>哈希值</returns>
        </member>
        <member name="M:AutoCSer.Net.HostPort.Equals(System.Object)">
            <summary>
            判断是否TCP服务端口信息
            </summary>
            <param name="other">TCP服务端口信息</param>
            <returns>是否同一TCP服务端口信息</returns>
        </member>
        <member name="M:AutoCSer.Net.HostPort.HostToIPAddress(System.String,AutoCSer.Log.ILog)">
            <summary>
            主机名称转换为 IP 地址
            </summary>
            <param name="host"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.Http.HeaderName">
            <summary>
            HTTP 头部名称数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Http.HeaderName.ContentEncoding">
            <summary>
            压缩编码名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.Http.HeaderName.ContentType">
            <summary>
            内容类型名称
            </summary>
        </member>
        <member name="T:AutoCSer.Net.IndexIdentity">
            <summary>
            索引标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.IndexIdentity.Index">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.IndexIdentity.Identity">
            <summary>
            索引编号
            </summary>
        </member>
        <member name="T:AutoCSer.Net.IReturnParameter`1">
            <summary>
            返回参数
            </summary>
            <typeparam name="valueType">返回参数类型</typeparam>
        </member>
        <member name="P:AutoCSer.Net.IReturnParameter`1.Return">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ClientNode">
            <summary>
            客户端远程表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ClientNode.CommandInfo">
            <summary>
            远程表达式命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ClientNode.Node">
            <summary>
            远程表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ClientNode.Checker">
            <summary>
            客户端检测服务端映射标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ClientNode.ClientNodeId">
            <summary>
            客户端映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode.SetNull">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode.GetReturnValue">
            <summary>
            服务端获取返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode.serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            服务端反序列化
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode.serialize(AutoCSer.Json.Serializer)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode.deSerialize(AutoCSer.Json.Parser)">
            <summary>
            服务端反序列化
            </summary>
            <param name="parser"></param>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ClientNode`1">
            <summary>
            客户端远程表达式参数节点
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ClientNode`1.Node">
            <summary>
            远程表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ClientNode`1.Checker">
            <summary>
            客户端检测服务端映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode`1.GetReturnValue">
            <summary>
            服务端获取返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode`1.serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode`1.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            服务端反序列化
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode`1.serialize(AutoCSer.Json.Serializer)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ClientNode`1.deSerialize(AutoCSer.Json.Parser)">
            <summary>
            服务端反序列化
            </summary>
            <param name="parser"></param>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.GenericNode">
            <summary>
            远程表达式泛型节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.GenericNode.#ctor">
            <summary>
            远程表达式泛型节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.GenericNode.#ctor(System.Int32)">
            <summary>
            远程表达式泛型节点
            </summary>
            <param name="clientNodeId">客户端映射标识</param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.GenericNode.Cast``1">
            <summary>
            类型转换
            </summary>
            <typeparam name="nodeType"></typeparam>
            <returns>远程表达式节点</returns>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.GenericNode`1">
            <summary>
            远程表达式泛型节点
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.GenericNode`1.#ctor">
            <summary>
            远程表达式泛型节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.GenericNode`1.#ctor(System.Int32)">
            <summary>
            远程表达式泛型节点
            </summary>
            <param name="clientNodeId">客户端映射标识</param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.GenericNode`1.Cast``1">
            <summary>
            类型转换
            </summary>
            <typeparam name="nodeType"></typeparam>
            <returns>远程表达式节点</returns>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.MemberAttribute">
            <summary>
            远程表达式成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.MemberAttribute.MemberIdentity">
            <summary>
            自定义成员编号，用于表达式节点名称冲突问题，默认为 0 表示不编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.MemberAttribute.IsReturn">
            <summary>
            默认为 true 表示允许返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.MemberAttribute.IsGenericTypeInstantiation">
            <summary>
            默认为 false 表示不生成远程表达式泛型实例化代码，否则表示如果该成员类型为泛型类型时实例化泛型远程表达式
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker">
            <summary>
            客户端检测服务端映射标识
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Input">
            <summary>
            请求数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Input.CommandInfo">
            <summary>
            远程表达式服务端节点标识解析命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Input.Types">
            <summary>
            表达式服务端节点类型集合
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Output">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Output.Return">
            <summary>
            表达式服务端节点标识集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Output.OutputInfo">
            <summary>
            远程表达式服务端节点标识解析输出参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Output.OutputThreadInfo">
            <summary>
            远程表达式服务端节点标识解析输出参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.ServerNodeIds">
            <summary>
            服务端映射标识集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.serverNodeIdLock">
            <summary>
            服务端映射标识集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Get(System.Type)">
            <summary>
            获取服务端映射标识
            </summary>
            <param name="nodeType">远程表达式节点类型</param>
            <returns>服务端映射标识</returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Get(AutoCSer.RemoteType[])">
            <summary>
            获取服务端映射标识集合
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Check(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            服务端映射标识检测
            </summary>
            <param name="node"></param>
            <returns>是否映射成功</returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ServerNodeIdChecker.Check(AutoCSer.Net.RemoteExpression.Node,AutoCSer.LeftArray{System.Type}@)">
            <summary>
            服务端映射标识检测
            </summary>
            <param name="node"></param>
            <param name="types"></param>
            <returns>是否映射成功</returns>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.TypeAttribute">
            <summary>
            远程表达式类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.Node">
            <summary>
            远程表达式节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.RemoteExpressionTypeName">
            <summary>
            远程表达式容器类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.Parent">
            <summary>
            父节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.ClientNodeId">
            <summary>
            客户端映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.#ctor">
            <summary>
            远程表达式节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.#ctor(System.Int32)">
            <summary>
            远程表达式节点
            </summary>
            <param name="clientNodeId">客户端映射标识</param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParameter(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.Serialize(AutoCSer.BinarySerialize.Serializer,AutoCSer.Net.RemoteExpression.ServerNodeIdChecker)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
            <param name="checker"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParent(AutoCSer.BinarySerialize.Serializer,AutoCSer.Net.RemoteExpression.ServerNodeIdChecker)">
            <summary>
            序列化父节点
            </summary>
            <param name="serializer"></param>
            <param name="checker"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParameter``1(AutoCSer.BinarySerialize.Serializer,``0)">
            <summary>
            参数序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="serializer"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParameterStruct``1(AutoCSer.BinarySerialize.Serializer,``0@)">
            <summary>
            参数序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="serializer"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParameter(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            服务端反序列化
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            服务端反序列化
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.DeSerialize(AutoCSer.BinarySerialize.DeSerializer,AutoCSer.Net.RemoteExpression.Node@)">
            <summary>
            服务端反序列化
            </summary>
            <param name="deSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParent(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            反序列化父节点
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParameter``1(AutoCSer.BinarySerialize.DeSerializer,``0@)">
            <summary>
            参数反序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="deSerializer"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParameterStruct``1(AutoCSer.BinarySerialize.DeSerializer,``0@)">
            <summary>
            参数反序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="deSerializer"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParameter(AutoCSer.Json.Serializer)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.Serialize(AutoCSer.Json.Serializer,AutoCSer.Net.RemoteExpression.ServerNodeIdChecker)">
            <summary>
            客户端序列化
            </summary>
            <param name="serializer"></param>
            <param name="checker"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeStart(AutoCSer.Json.Serializer,AutoCSer.Net.RemoteExpression.ServerNodeIdChecker)">
            <summary>
            JSON 序列化开始
            </summary>
            <param name="serializer"></param>
            <param name="checker"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParent(AutoCSer.Json.Serializer,AutoCSer.Net.RemoteExpression.ServerNodeIdChecker)">
            <summary>
            JSON 序列化父节点并结束
            </summary>
            <param name="serializer"></param>
            <param name="checker"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParameter``1(AutoCSer.Json.Serializer,``0)">
            <summary>
            参数序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="serializer"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.serializeParameterStruct``1(AutoCSer.Json.Serializer,``0@)">
            <summary>
            参数序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="serializer"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParameter(AutoCSer.Json.Parser)">
            <summary>
            服务端反序列化
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerialize(AutoCSer.Json.Parser)">
            <summary>
            服务端反序列化
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.DeSerialize(AutoCSer.Json.Parser,AutoCSer.Net.RemoteExpression.Node@)">
            <summary>
            服务端反序列化
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParent(AutoCSer.Json.Parser)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.deSerializeParameter``1(AutoCSer.Json.Parser,``0@)">
            <summary>
            参数反序列化
            </summary>
            <typeparam name="parameterType"></typeparam>
            <param name="parser"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.getReturn">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.Get(System.Int32)">
            <summary>
            获取返回值
            </summary>
            <param name="clientNodeId">客户端映射标识</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.CheckServerNodeId(AutoCSer.Net.RemoteExpression.ServerNodeIdChecker,AutoCSer.LeftArray{System.Type}@)">
            <summary>
            服务端映射标识检测
            </summary>
            <param name="checker"></param>
            <param name="checkTypes"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.checkParameterServerNodeId(AutoCSer.Net.RemoteExpression.ServerNodeIdChecker,AutoCSer.LeftArray{System.Type}@)">
            <summary>
            参数服务端映射标识检测
            </summary>
            <param name="checker"></param>
            <param name="checkTypes"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.setParameter``1(AutoCSer.Net.RemoteExpression.ClientNode{``0}@,AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            设置远程表达式节点参数
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="clientNode"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.setParameter``1(``0@,System.Object)">
            <summary>
            用于代码生成
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="clientNode"></param>
            <param name="node"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.checkServerNodeId``1(AutoCSer.Net.RemoteExpression.ServerNodeIdChecker,AutoCSer.LeftArray{System.Type}@,AutoCSer.Net.RemoteExpression.ClientNode{``0}@)">
            <summary>
            服务端映射标识检测
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="checker"></param>
            <param name="checkTypes"></param>
            <param name="clientNode"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.checkServerNodeId``1(AutoCSer.Net.RemoteExpression.ServerNodeIdChecker,AutoCSer.LeftArray{System.Type}@,``0@)">
            <summary>
            用于代码生成
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="checker"></param>
            <param name="checkTypes"></param>
            <param name="clientNode"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.Cast(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            远程表达式泛型节点类型转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.registerClient(System.Func{AutoCSer.Net.RemoteExpression.ReturnValue})">
            <summary>
            客户端表达式节点注册
            </summary>
            <param name="createReturnValue">新建一个返回值的委托</param>
            <returns>表达式节点映射编号</returns>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.types">
            <summary>
            服务端节点类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.typeLock">
            <summary>
            服务端节点类型集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.createNodes">
            <summary>
            创建服务端表达式委托集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.Get(AutoCSer.RemoteType[])">
            <summary>
            获取服务端节点标识
            </summary>
            <param name="remoteTypes"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node.createNew``1">
            <summary>
            创建节点
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node.createNodeMethod">
            <summary>
            创建节点函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.Node`1">
            <summary>
            远程表达式节点
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.Node`1.ReturnClientNodeId">
            <summary>
            客户端返回值映射标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.Node`1.ReturnClientNodeId.Id">
            <summary>
            客户端返回值映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node`1.ReturnClientNodeId.createReturnValue">
            <summary>
            创建客户端返回值类型
            </summary>
            <returns>创建客户端返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node`1.#ctor">
            <summary>
            远程表达式节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node`1.#ctor(System.Int32)">
            <summary>
            远程表达式节点
            </summary>
            <param name="clientNodeId">客户端映射标识</param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node`1.getValue">
            <summary>
            服务端获取数据
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node`1.getReturn">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.Node`1.GetValue">
            <summary>
            服务端获取数据
            </summary>
            <returns>返回值</returns>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ReturnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ReturnValue.Output">
            <summary>
            输出数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue.Output.Return">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue.Output.OutputInfo">
            <summary>
            远程表达式服务端节点标识解析输出参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue.Output.OutputThreadInfo">
            <summary>
            远程表达式服务端节点标识解析输出参数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue.ClientNodeId">
            <summary>
            客户端映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.TryGetValue``1(``0@)">
            <summary>
            尝试获取泛型数据
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.GetValue``1(``0)">
            <summary>
            获取泛型数据
            </summary>
            <typeparam name="returnType"></typeparam>
            <param name="nullValue">失败默认值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            服务端序列化返回值
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.serialize(AutoCSer.BinarySerialize.Serializer,AutoCSer.Net.RemoteExpression.ReturnValue)">
            <summary>
            服务端序列化返回值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.deSerialize(AutoCSer.BinarySerialize.DeSerializer,AutoCSer.Net.RemoteExpression.ReturnValue@)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="deSerializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.serialize(AutoCSer.Json.Serializer)">
            <summary>
            服务端序列化返回值
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.serialize(AutoCSer.Json.Serializer,AutoCSer.Net.RemoteExpression.ReturnValue)">
            <summary>
            服务端序列化返回值
            </summary>
            <param name="serializer"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.deSerialize(AutoCSer.Json.Parser)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="parser"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.deSerialize(AutoCSer.Json.Parser,AutoCSer.Net.RemoteExpression.ReturnValue@)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue.createReturnValues">
            <summary>
            新建返回值的委托集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue.createReturnValueLock">
            <summary>
            新建返回值的委托集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue.RegisterClient(System.Func{AutoCSer.Net.RemoteExpression.ReturnValue})">
            <summary>
            客户端表达式节点注册
            </summary>
            <param name="createReturnValue">新建一个返回值的委托</param>
            <returns>表达式节点映射编号</returns>
        </member>
        <member name="T:AutoCSer.Net.RemoteExpression.ReturnValue`1">
            <summary>
            返回值
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.RemoteExpression.ReturnValue`1.Value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue`1.op_Implicit(`0)~AutoCSer.Net.RemoteExpression.ReturnValue{`0}">
            <summary>
            返回值隐式转换
            </summary>
            <param name="value">返回值</param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue`1.serialize(AutoCSer.BinarySerialize.Serializer)">
            <summary>
            服务端序列化返回值
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue`1.deSerialize(AutoCSer.BinarySerialize.DeSerializer)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="deSerializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue`1.serialize(AutoCSer.Json.Serializer)">
            <summary>
            服务端序列化返回值
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:AutoCSer.Net.RemoteExpression.ReturnValue`1.deSerialize(AutoCSer.Json.Parser)">
            <summary>
            客户端反序列化返回值
            </summary>
            <param name="parser"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.GetRemoteExpressionServerCall">
            <summary>
            获取远程表达式服务端节点标识同步调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.GetRemoteExpressionServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.GetRemoteExpressionNodeIdServerCall">
            <summary>
            获取远程表达式服务端节点标识同步调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.GetRemoteExpressionNodeIdServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Client">
            <summary>
            TCP 内部服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Client.tcpRegisterClient">
            <summary>
            TCP 内部注册服务客户端
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.Client.AutoCSer#Net#TcpRegister#IClient#ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP 内部服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.Client.Sender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.AutoCSer#Net#TcpRegister#IClient#OnServerChange(AutoCSer.Net.TcpRegister.ServerSet)">
            <summary>
            服务更新
            </summary>
            <param name="serverSet"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.waitSocket">
            <summary>
            等待套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.TryCreateSocket">
            <summary>
            尝试创建第一个套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.createSocket(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            创建套接字
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="createVersion"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.SendCustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.SendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.SendCustomData(AutoCSer.SubArray{System.Byte})">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpressionClientNode(AutoCSer.Net.RemoteExpression.Node,AutoCSer.Net.RemoteExpression.ClientNode@)">
            <summary>
            获取客户端远程表达式节点
            </summary>
            <param name="node">远程表达式节点</param>
            <param name="clientNode">客户端远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpressionClientNode(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取客户端远程表达式节点
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>客户端远程表达式节点</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpressionClientNodeParameter``1(AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            获取客户端远程表达式参数节点
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
            <param name="node">远程表达式参数节点</param>
            <returns>客户端远程表达式参数节点</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.CallRemoteExpression(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpression``1(AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpression(AutoCSer.Net.RemoteExpression.ClientNode)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client.GetRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.ClientNode)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Client`1">
            <summary>
            TCP 内部服务客户端
            </summary>
            <typeparam name="clientType">客户端代理类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Client`1.client">
            <summary>
            TCP 内部服务客户端代理对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Client`1.verifyMethod">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client`1.#ctor(`0,AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,System.Func{`0,AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean})">
            <summary>
            TCP 内部服务客户端
            </summary>
            <param name="client">TCP 服务客户端对象</param>
            <param name="attribute">TCP服务调用配置</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="verifyMethod">验证委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Client`1.SocketVerifyMethod(AutoCSer.Net.TcpServer.ClientSocketSenderBase)">
            <summary>
            套接字验证
            </summary>
            <param name="socket">TCP 调用客户端套接字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ClientSocket">
            <summary>
            TCP 内部服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.#ctor(AutoCSer.Net.TcpServer.Client{AutoCSer.Net.TcpInternalServer.ServerAttribute},System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            TCP 调用客户端套接字
            </summary>
            <param name="commandClient">TCP 调用客户端</param>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="createVersion"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.#ctor(AutoCSer.Net.TcpInternalServer.ClientSocket)">
            <summary>
            TCP 调用客户端套接字
            </summary>
            <param name="socket">TCP 内部服务客户端套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.CreateNew">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.close">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.checkCreate">
            <summary>
            版本有效性检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.Create">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocket.CancelKeep(System.Int32)">
            <summary>
            通知服务端取消保持回调
            </summary>
            <param name="commandIndex">会话标识</param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ClientSocketSender">
            <summary>
            TCP 内部服务客户端套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ClientSocketSender.#ctor(AutoCSer.Net.TcpInternalServer.ClientSocket)">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <param name="socket">TCP 服务客户端套接字</param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.Client">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Client.Metadata">
            <summary>
            TCP 客户端元数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.Client`1">
            <summary>
            TCP 客户端
            </summary>
            <typeparam name="interfaceType">接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Client`1.defaultServerAttribute">
            <summary>
            默认 TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Client`1.errorString">
            <summary>
            错误字符串提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Client`1.clientType">
            <summary>
            TCP 客户端类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Client`1.commands">
            <summary>
            客户端命令信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.Client`1.GetCommand(System.Int32)">
            <summary>
            获取客户端命令信息
            </summary>
            <param name="index"></param>
            <returns>客户端命令信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.Client`1.Create(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{`0,AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            创建 TCP 客户端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verifyMethod">TCP 验证方法</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <returns>TCP 客户端</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.MethodClient">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.MethodGetter">
            <summary>
            获取 TCP 服务函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.MethodGetter.get(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.TcpInternalServer.ServerAttribute,AutoCSer.Net.TcpServer.MethodAttribute)">
            <summary>
            获取 TCP 服务函数信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="serverAttribute"></param>
            <param name="methodAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.Server">
            <summary>
            TCP 服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server.Metadata">
            <summary>
            TCP 服务端元数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.Server`1">
            <summary>
            TCP 服务
            </summary>
            <typeparam name="interfaceType">接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server`1.defaultServerAttribute">
            <summary>
            默认 TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server`1.errorString">
            <summary>
            错误字符串提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server`1.methods">
            <summary>
            TCP 函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server`1.serverType">
            <summary>
            TCP 服务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server`1.serverConstructorInfo">
            <summary>
            TCP 服务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.Server`1.Outputs">
            <summary>
            服务端输出信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.Server`1.Create(`0,AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            创建 TCP 服务端对象
            </summary>
            <param name="value">接口对象</param>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verify">套接字验证委托</param>
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
            <returns>TCP 服务</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.ServerCall">
            <summary>
            TCP 服务器端同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.ServerCall.Sender">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.ServerCall.serverValue">
            <summary>
            服务器目标对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.ServerCall.set(AutoCSer.Net.TcpInternalServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            设置参数
            </summary>
            <param name="socket">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.ServerCall.Call``1(AutoCSer.Net.TcpInternalServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            获取服务器端调用
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="socket"></param>
            <param name="serverValue"></param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.ServerCall.push``1(``0)">
            <summary>
            服务器端调用入池
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Emit.ServerCall`1">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Emit.ServerCall`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.ServerCall`1.set(AutoCSer.Net.TcpInternalServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType,`0@)">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType">任务类型</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.ServerCall`1.Call``1(AutoCSer.Net.TcpInternalServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType,`0@)">
            <summary>
            获取服务器端调用
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="socket"></param>
            <param name="serverValue"></param>
            <param name="taskType"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Emit.ServerCall`1.push``1(``0)">
            <summary>
            服务器端调用入池
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.MethodClient`1">
            <summary>
            TCP 客户端
            </summary>
            <typeparam name="clientType">客户端类型</typeparam>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.MethodClient`1._TcpClient_">
            <summary>
            TCP 内部服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.MethodClient`1._isDisposed_">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.MethodClient`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.Server">
            <summary>
            TCP 内部服务端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Server.TcpRegisterReaderServerNameSuffix">
            <summary>
            读取服务名称后缀
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.Server.tcpRegisterClient">
            <summary>
            TCP 内部注册服务客户端
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.Server.AutoCSer#Net#TcpRegister#IServer#TcpRegisterInfo">
            <summary>
            TCP 服务注册信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.AutoCSer#Net#TcpRegister#IServer#CreateServerInfo">
            <summary>
            创建 TCP 服务注册信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,System.Boolean)">
            <summary>
            TCP 内部服务端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="verify">同步验证接口</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="isCallQueue">是否提供独占的 TCP 服务器端同步调用队列</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.StopListen">
            <summary>
            停止服务监听
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.Start">
            <summary>
            启动服务
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.GetSocket">
            <summary>
            获取客户端请求
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.getSocket">
            <summary>
            获取客户端请求
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.Server.getSocketVerify">
            <summary>
            获取客户端请求
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerAttribute">
            <summary>
            TCP 内部服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerAttribute.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerAttribute.GetMemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerAttribute.IsServer">
            <summary>
            用于在配置文件中标识当前程序是否服务端，当在标识为服务端的环境中使用客户端调用时会输出警告日志，提示用户判断是否混淆了客户端与服务端。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerAttribute.IsInternalClient">
            <summary>
            默认为 false 表示客户端 API 公共可见，设置为 true 表示仅程序集可见
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerAttribute.GetIsInternalClient">
            <summary>
            客户端 API 是否仅程序集可见
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerAttribute.GetConfig(System.String,System.Type)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 服务注册名称</param>
            <param name="type">TCP 服务器类型</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute">
            <summary>
            TCP 内部服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.TcpRegister">
            <summary>
            注册当前服务的 TCP 注册服务名称。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.TcpRegisterName">
            <summary>
            注册当前服务的 TCP 注册服务名称。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.RegisterHost">
            <summary>
            客户端访问的主机名称或者 IP 地址，用于需要使用端口映射服务。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.AutoCSer#Net#TcpRegister#IServerAttribute#ClientRegisterHost">
            <summary>
            客户端访问的主机名称或者 IP 地址，用于需要使用端口映射服务。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.RegisterPort">
            <summary>
            客户端访问的监听端口，用于需要使用端口映射服务。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.AutoCSer#Net#TcpRegister#IServerAttribute#ClientRegisterPort">
            <summary>
            客户端访问的监听端口，用于需要使用端口映射服务。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.SendBufferSize">
            <summary>
            服务器端发送数据（包括客户端接受数据）缓冲区初始化字节数，默认为 128KB。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetSendBufferSize">
            <summary>
            服务器端发送数据（包括客户端接受数据）缓冲区初始化字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.ServerSendBufferMaxSize">
            <summary>
            服务器端发送数据缓冲区最大字节数，默认为 1MB。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetServerSendBufferMaxSize">
            <summary>
            服务器端发送数据缓冲区最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.ReceiveBufferSize">
            <summary>
            服务器端接受数据（包括客户端发送数据）缓冲区初始化字节数，默认为 128KB。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetReceiveBufferSize">
            <summary>
            服务器端接受数据（包括客户端发送数据）缓冲区初始化字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.DefaultReceiveVerifyCommandSeconds">
            <summary>
            客户端接收命令默认超时为 4 秒，超时客户端将被当作攻击者被抛弃。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.ReceiveVerifyCommandSeconds">
            <summary>
            客户端接收命令超时为 4 秒，超时客户端将被当作攻击者被抛弃。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.MaxCustomDataSize">
            <summary>
            客户端最大自定义数据包字节大小，默认为 0 表示不限
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetMaxCustomDataSize">
            <summary>
            客户端最大自定义数据包字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.ClientTryCreateSleep">
            <summary>
            客户端重建连接休眠毫秒数，默认为 10
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetClientTryCreateSleep">
            <summary>
            客户端重建连接休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.ClientOutputSleep">
            <summary>
            批量处理休眠毫秒数，默认为 0 适应于低延时高频串行调用，对于延时要求不高只要求吞吐量的情况可以设置为 1 以减少套接字调用次数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetClientOutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.ServerOutputSleep">
            <summary>
            批量处理休眠毫秒数，默认为 0 适应于低延时高频串行调用，对于延时要求不高只要求吞吐量的情况可以设置为 1 以减少套接字调用次数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetServerOutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsSegmentation">
            <summary>
            当需要将客户端提供给第三方使用的时候，可能不希望 dll 中同时包含服务端，设置为 true 会将客户端代码单独剥离出来生成一个代码文件 {项目名称}.tcpServer.服务名称.client.cs，当然你需要将服务中所有参数与返回值及其依赖的数据类型剥离出来。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetIsSegmentation">
            <summary>
            当需要将客户端提供给第三方使用的时候，可能不希望 dll 中同时包含服务端，设置为 true 会将客户端代码单独剥离出来生成一个代码文件 {项目名称}.tcpServer.服务名称.client.cs，当然你需要将服务中所有参数与返回值及其依赖的数据类型剥离出来。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsJsonSerialize">
            <summary>
            默认使用二进制序列化，适合参数数据类型稳定的服务，或者可以同步部署服务器端与客户端的内部服务。对于数据类型不稳定的互联网服务应该使用 JSON 序列化。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetIsJsonSerialize">
            <summary>
            是否使用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程，默认为 true
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetIsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.CommandPoolBitSize">
            <summary>
            命令池初始化二进制大小，默认为 8
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.GetCommandPoolBitSize">
            <summary>
            命令池初始化二进制大小 2^n
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsAutoClient">
            <summary>
            默认为 true 表示在创建客户端对象的时候自动启动连接，否则需要第一次调用触发
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsAuto">
            <summary>
            是否自动创建客户端对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsRememberCommand">
            <summary>
            默认为 true 表示生成记忆数字编号标识与长字符串名称标识之间对应关系的代码，用于保持多次代码生成的命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerBaseAttribute.IsSingleRegister">
            <summary>
            默认为 true 表示只允许注册一个 TCP 服务实例（单例服务，其它服务的注册将失败），但 false 并不代表支持负载均衡（仅仅是在客户端访问某个服务端失败时可以切换到其他服务端连接）。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerCall">
            <summary>
            TCP 服务器端同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerCall.Sender">
            <summary>
            套接字
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerCall`2">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="callType">调用类型</typeparam>
            <typeparam name="serverType">服务器目标对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerCall`2.serverValue">
            <summary>
            服务器目标对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCall`2.Set(AutoCSer.Net.TcpInternalServer.ServerSocketSender,`1,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            设置参数
            </summary>
            <param name="socket">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCall`2.Pop">
            <summary>
            获取服务器端调用
            </summary>
            <returns>服务器端调用</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCall`2.push(`0)">
            <summary>
            服务器端调用入池
            </summary>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerCall`3">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="callType">调用类型</typeparam>
            <typeparam name="serverType">服务器目标对象类型</typeparam>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerCall`3.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCall`3.Set(AutoCSer.Net.TcpInternalServer.ServerSocketSender,`1,AutoCSer.Net.TcpServer.ServerTaskType,`2@)">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType">任务类型</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCall`3.push(`0)">
            <summary>
            服务器端调用入池
            </summary>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerCallback">
            <summary>
            TCP 服务器端异步调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback.#ctor(System.Byte)">
            <summary>
            异步回调
            </summary>
            <param name="isKeep">是否保持回调</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback.onReturn(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback.onlyCallback(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback.SetKeep(AutoCSer.Net.TcpInternalServer.ServerSocketSender,System.Boolean)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerCallback`2">
            <summary>
            异步回调
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback`2.#ctor(System.Byte)">
            <summary>
            异步回调
            </summary>
            <param name="isKeep">是否保持回调</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback`2.onReturn(AutoCSer.Net.TcpServer.ReturnValue{`1})">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback`2.onlyCallback(AutoCSer.Net.TcpServer.ReturnValue{`1})">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback`2.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerCallback`2.SetKeep(AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.Net.TcpServer.OutputInfo,`0@)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerCallback`2.SetReturnValue">
            <summary>
            设置返回值委托
            </summary>
            <param name="outputParamter">输出参数</param>
            <param name="value">返回值</param>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerCallback`2.SetReturn">
            <summary>
            设置返回值委托
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerSocket">
            <summary>
            TCP 内部服务端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocket.customDataSize">
            <summary>
            自定义数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocket.Sender">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.#ctor(AutoCSer.Net.TcpInternalServer.Server)">
            <summary>
            TCP 内部服务端套接字
            </summary>
            <param name="server">TCP调用服务端</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.close">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.RunTask">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.ErrorTask">
            <summary>
            TCP 内部服务端套接字任务错误处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.Start">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isReceiveVerifyCommand">
            <summary>
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.verifyCommandAsync">
            <summary>
            接收验证命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isVerifyCommand">
            <summary>
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.checkVerifyCommandFixed">
            <summary>
            检查验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isReceiveVerifyData">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.verifyDataAsync">
            <summary>
            获取验证数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isVerifyData">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.doVerifyCommand">
            <summary>
            执行函数验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isReceiveCommand">
            <summary>
            获取命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.commandAsync">
            <summary>
            获取命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isCommand">
            <summary>
            获取命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.loop(System.Boolean)">
            <summary>
            循环处理命令
            </summary>
            <param name="isCommand"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.receiveCommandData(System.Boolean@)">
            <summary>
            检查命令数据
            </summary>
            <param name="isDoCommand">是否执行了命令</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.dataAsync">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.bigDataAsync">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isDoCommandBig">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.isDoCommandLoop">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.doCommandMark(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理委托
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.doCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理委托
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.doCommand(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            命令处理委托
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.Merge(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            流合并命令处理
            </summary>
            <param name="data">输入数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.SendCustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.SendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocket.SendCustomData(AutoCSer.SubArray{System.Byte})">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerSocketSender">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.#ctor(AutoCSer.Net.TcpInternalServer.ServerSocket)">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
            <param name="socket">TCP 内部服务套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.GetCallback(AutoCSer.Net.TcpServer.OutputInfo)">
            <summary>
            异步回调
            </summary>
            <param name="outputInfo">服务端输出信息</param>
            <returns>异步回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.GetCallback``2(AutoCSer.Net.TcpServer.OutputInfo,``0@)">
            <summary>
            异步回调
            </summary>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">输出参数</param>
            <returns>异步回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.closeSocket">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.close">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.BuildOutput">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.GetRemoteExpressionNodeId(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取远程表达式服务端节点标识
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketSender.GetRemoteExpression(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerSocketTask">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketTask.#ctor(System.Int64)">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
            <param name="taskTicks">线程切换超时时钟周期</param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketTask.Add(AutoCSer.Net.TcpInternalServer.ServerSocket)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketTask.run">
            <summary>
            TCP服务端套接字任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocketTask.Task">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocketTask.tasks">
            <summary>
            TCP 内部服务端套接字任务处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketTask.check">
            <summary>
            线程切换检测
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.ServerSocketTaskConfig">
            <summary>
            TCP 内部服务端套接字任务处理配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocketTaskConfig.ThreadCount">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocketTaskConfig.NewThreadMilliseconds">
            <summary>
            线程切换检测毫秒数量，默认为 10 毫秒
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.ServerSocketTaskConfig.set">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.ServerSocketTaskConfig.Default">
            <summary>
            TCP 内部服务端套接字任务处理配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.TimeVerifyClient">
            <summary>
            时间验证服务客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.TimeVerifyClient.Verifier">
            <summary>
            时间验证服务客户端委托
            </summary>
            <param name="sender"></param>
            <param name="randomPrefix">随机前缀</param>
            <param name="md5Data">MD5 数据</param>
            <param name="ticks">验证时钟周期</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpInternalServer.TimeVerifyClient.Verify(AutoCSer.Net.TcpInternalServer.TimeVerifyClient.Verifier,AutoCSer.Net.TcpInternalServer.ClientSocketSender,AutoCSer.Net.TcpInternalServer.Client)">
            <summary>
            时间验证客户端验证
            </summary>
            <param name="verify">时间验证服务客户端委托</param>
            <param name="sender"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.TimeVerifyServer">
            <summary>
            时间验证服务
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpInternalServer.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.UnionType.ClientSocketSender">
            <summary>
            TCP 内部服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.UnionType.Server">
            <summary>
            TCP 内部服务端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.UnionType.ServerAttribute">
            <summary>
            TCP 内部服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.UnionType.ServerSocketSender">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpInternalServer.UnionType.ServerSocketTaskConfig">
            <summary>
            TCP 内部服务端套接字任务处理配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionServerCall">
            <summary>
            获取远程表达式服务端节点标识同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionServerCall.Sender">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionServerCall.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionServerCall.Set(AutoCSer.Net.TcpOpenServer.ServerSocketSender,AutoCSer.Net.TcpServer.ServerTaskType,AutoCSer.Net.RemoteExpression.ClientNode@)">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="taskType"></param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionNodeIdServerCall">
            <summary>
            获取远程表达式服务端节点标识同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionNodeIdServerCall.Sender">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionNodeIdServerCall.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionNodeIdServerCall.Set(AutoCSer.Net.TcpOpenServer.ServerSocketSender,AutoCSer.Net.TcpServer.ServerTaskType,AutoCSer.RemoteType[])">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="taskType"></param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.GetRemoteExpressionNodeIdServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Client">
            <summary>
            TCP 开放服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.#ctor(AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP 开放服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.Client.Sender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.waitSocket">
            <summary>
            等待套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.TryCreateSocket">
            <summary>
            尝试创建第一个套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.SendCustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.SendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.SendCustomData(AutoCSer.SubArray{System.Byte})">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpressionClientNode(AutoCSer.Net.RemoteExpression.Node,AutoCSer.Net.RemoteExpression.ClientNode@)">
            <summary>
            获取客户端远程表达式节点
            </summary>
            <param name="node">远程表达式节点</param>
            <param name="clientNode">客户端远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpressionClientNode(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取客户端远程表达式节点
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>客户端远程表达式节点</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpressionClientNodeParameter``1(AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            获取客户端远程表达式参数节点
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
            <param name="node">远程表达式参数节点</param>
            <returns>客户端远程表达式参数节点</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.CallRemoteExpression(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpression``1(AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpression(AutoCSer.Net.RemoteExpression.ClientNode)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client.GetRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.ClientNode)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Client`1">
            <summary>
            TCP 开放服务客户端
            </summary>
            <typeparam name="clientType">客户端代理类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Client`1.client">
            <summary>
            TCP 开放服务客户端代理对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Client`1.verifyMethod">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client`1.#ctor(`0,AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,System.Func{`0,AutoCSer.Net.TcpOpenServer.ClientSocketSender,System.Boolean})">
            <summary>
            TCP 开放服务客户端
            </summary>
            <param name="client">TCP 服务客户端对象</param>
            <param name="attribute">TCP服务调用配置</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="verifyMethod">验证委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Client`1.SocketVerifyMethod(AutoCSer.Net.TcpServer.ClientSocketSenderBase)">
            <summary>
            套接字验证
            </summary>
            <param name="socket">TCP 调用客户端套接字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ClientSocket">
            <summary>
            TCP 内部服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.#ctor(AutoCSer.Net.TcpServer.Client{AutoCSer.Net.TcpOpenServer.ServerAttribute},System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            TCP 调用客户端套接字
            </summary>
            <param name="commandClient">TCP 调用客户端</param>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="createVersion"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.#ctor(AutoCSer.Net.TcpOpenServer.ClientSocket)">
            <summary>
            TCP 调用客户端套接字
            </summary>
            <param name="socket">TCP 内部服务客户端套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.CreateNew">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.close">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.checkCreate">
            <summary>
            版本有效性检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.Create">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocket.CancelKeep(System.Int32)">
            <summary>
            通知服务端取消保持回调
            </summary>
            <param name="commandIndex">会话标识</param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ClientSocketSender">
            <summary>
            TCP 内部服务客户端套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ClientSocketSender.#ctor(AutoCSer.Net.TcpOpenServer.ClientSocket)">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <param name="socket">TCP 服务客户端套接字</param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.Client">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Client.Metadata">
            <summary>
            TCP 客户端元数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.Client`1">
            <summary>
            TCP 客户端
            </summary>
            <typeparam name="interfaceType">接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Client`1.defaultServerAttribute">
            <summary>
            默认 TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Client`1.errorString">
            <summary>
            错误字符串提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Client`1.clientType">
            <summary>
            TCP 客户端类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Client`1.commands">
            <summary>
            客户端命令信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.Client`1.GetCommand(System.Int32)">
            <summary>
            获取客户端命令信息
            </summary>
            <param name="index"></param>
            <returns>客户端命令信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.Client`1.Create(AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Func{`0,AutoCSer.Net.TcpOpenServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            创建 TCP 客户端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verifyMethod">TCP 验证方法</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <returns>TCP 客户端</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.MethodClient">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.MethodGetter">
            <summary>
            获取 TCP 服务函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.MethodGetter.get(System.Type,System.Reflection.MethodInfo,AutoCSer.Net.TcpOpenServer.ServerAttribute,AutoCSer.Net.TcpOpenServer.MethodAttribute)">
            <summary>
            获取 TCP 服务函数信息
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="serverAttribute"></param>
            <param name="methodAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.Server">
            <summary>
            TCP 服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server.Metadata">
            <summary>
            TCP 服务端元数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.Server`1">
            <summary>
            TCP 服务
            </summary>
            <typeparam name="interfaceType">接口类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server`1.defaultServerAttribute">
            <summary>
            默认 TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server`1.errorString">
            <summary>
            错误字符串提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server`1.methods">
            <summary>
            TCP 函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server`1.serverType">
            <summary>
            TCP 服务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server`1.serverConstructorInfo">
            <summary>
            TCP 服务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.Server`1.Outputs">
            <summary>
            服务端输出信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.Server`1.Create(`0,AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            创建 TCP 服务端对象
            </summary>
            <param name="value">接口对象</param>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verify">套接字验证委托</param>
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
            <returns>TCP 服务</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.ServerCall">
            <summary>
            TCP 服务器端同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.ServerCall.Sender">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.ServerCall.serverValue">
            <summary>
            服务器目标对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.ServerCall.set(AutoCSer.Net.TcpOpenServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            设置参数
            </summary>
            <param name="socket">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.ServerCall.Call``1(AutoCSer.Net.TcpOpenServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            获取服务器端调用
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="socket"></param>
            <param name="serverValue"></param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.ServerCall.push``1(``0)">
            <summary>
            服务器端调用入池
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Emit.ServerCall`1">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Emit.ServerCall`1.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.ServerCall`1.set(AutoCSer.Net.TcpOpenServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType,`0@)">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType">任务类型</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.ServerCall`1.Call``1(AutoCSer.Net.TcpOpenServer.ServerSocketSender,System.Object,AutoCSer.Net.TcpServer.ServerTaskType,`0@)">
            <summary>
            获取服务器端调用
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="socket"></param>
            <param name="serverValue"></param>
            <param name="taskType"></param>
            <param name="inputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Emit.ServerCall`1.push``1(``0)">
            <summary>
            服务器端调用入池
            </summary>
            <typeparam name="callType">服务器端调用类型</typeparam>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute">
            <summary>
            保持异步回调 TCP 调用函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute.IsClientSynchronous">
            <summary>
            默认为 false 表示不生成同步调用代理函数，同步模式使用的是 Monitor.Wait，会占用一个工作线程，并存在线程调度开销，优点是使用方便、安全。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute.GetIsClientSynchronous">
            <summary>
            是否生成同步调用代理函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute.IsClientAsynchronous">
            <summary>
            默认为 true 表示生成异步调用代理函数。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute.GetIsClientAsynchronous">
            <summary>
            是否生成异步调用代理函数。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute.IsKeepCallback">
            <summary>
            保持异步回调，1 问多答的交互模式（客户端一个请求，服务器端可以任意多次回调回应）。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.KeepCallbackMethodAttribute.GetIsKeepCallback">
            <summary>
            保持异步回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.MethodAttribute">
            <summary>
            TCP 调用函数配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.MethodClient`1">
            <summary>
            TCP 客户端
            </summary>
            <typeparam name="clientType">客户端类型</typeparam>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.MethodClient`1._TcpClient_">
            <summary>
            TCP 开放服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.MethodClient`1._isDisposed_">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.MethodClient`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.SendState">
            <summary>
            发送数据状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.SendState.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.SendState.Synchronize">
            <summary>
            同步
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.SendState.Asynchronous">
            <summary>
            异步
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.Server">
            <summary>
            TCP 服务端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Server.socketHandle">
            <summary>
            套接字等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.Server.socketHead">
            <summary>
            套接字链表头部
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Server.#ctor(AutoCSer.Net.TcpOpenServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,System.Boolean)">
            <summary>
            TCP 服务端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="verify">同步验证接口</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="isCallQueue">是否提供独占的 TCP 服务器端同步调用队列</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Server.GetSocket">
            <summary>
            获取客户端请求
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Server.getSocket">
            <summary>
            获取客户端请求
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Server.getSocketVerify">
            <summary>
            获取客户端请求
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.Server.OnSocket">
            <summary>
            套接字处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerAttribute">
            <summary>
            TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.MemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetMemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.SendBufferSize">
            <summary>
            服务器端发送数据（包括客户端接受数据）缓冲区初始化字节数，默认为 8KB。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetSendBufferSize">
            <summary>
            服务器端发送数据（包括客户端接受数据）缓冲区初始化字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.ServerSendBufferMaxSize">
            <summary>
            服务器端发送数据缓冲区最大字节数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetServerSendBufferMaxSize">
            <summary>
            服务器端发送数据缓冲区最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.ReceiveBufferSize">
            <summary>
            服务器端接受数据（包括客户端发送数据）缓冲区初始化字节数，默认为 8KB。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetReceiveBufferSize">
            <summary>
            服务器端接受数据（包括客户端发送数据）缓冲区初始化字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.MaxInputSize">
            <summary>
            最大输入数据字节数，默认为 16 KB，小于等于 0 表示不限
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.DefaultReceiveVerifyCommandSeconds">
            <summary>
            客户端接收命令默认超时为 9 秒，超时客户端将被当作攻击者被抛弃。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.ReceiveVerifyCommandSeconds">
            <summary>
            客户端接收命令超时为 9 秒，超时客户端将被当作攻击者被抛弃。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.MaxCustomDataSize">
            <summary>
            客户端最大自定义数据包字节大小，默认为 16KB，设置为 0 表示不限
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetMaxCustomDataSize">
            <summary>
            客户端最大自定义数据包字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.ClientTryCreateSleep">
            <summary>
            客户端重建连接休眠毫秒数，默认为 1000
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetClientTryCreateSleep">
            <summary>
            客户端重建连接休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.ClientOutputSleep">
            <summary>
            批量处理休眠毫秒数，默认为 -1 表示不等待，设置为 0 适应于延时要求不高只要求吞吐量的情况以减少套接字调用次数，设置为 0 适应于低延时高频串行调用
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetClientOutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.ServerOutputSleep">
            <summary>
            批量处理休眠毫秒数，默认为 -1 表示不等待，设置为 0 适应于低延时高频串行调用，大于 0 适应于延时要求不高只要求吞吐量的情况以减少套接字调用次数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetServerOutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.CommandPoolBitSize">
            <summary>
            命令池初始化二进制大小，默认为 3
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetCommandPoolBitSize">
            <summary>
            命令池初始化二进制大小 2^n
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.IsSegmentation">
            <summary>
            当需要将客户端提供给第三方使用的时候，可能不希望 dll 中同时包含服务端，默认为 true 会将客户端代码单独剥离出来生成一个代码文件 {项目名称}.tcpServer.服务名称.client.cs，当然你需要将服务中所有参数与返回值及其依赖的数据类型剥离出来。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetIsSegmentation">
            <summary>
            当需要将客户端提供给第三方使用的时候，可能不希望 dll 中同时包含服务端，设置为 true 会将客户端代码单独剥离出来生成一个代码文件 {项目名称}.tcpServer.服务名称.client.cs，当然你需要将服务中所有参数与返回值及其依赖的数据类型剥离出来。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.IsJsonSerialize">
            <summary>
            默认使用 JSON 序列化，适合数据类型不稳定的互联网服务。对于参数数据类型稳定的服务，或者可以同步部署服务器端与客户端的内部服务，可以考虑使用二进制序列化以提升性能（对于简单测试可能提升 100+% 性能）。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetIsJsonSerialize">
            <summary>
            是否使用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.IsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程，默认为 false
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetIsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerAttribute.IsAutoClient">
            <summary>
            默认为 false 需要第一次调用触发，否则在创建客户端对象的时候自动启动连接
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerAttribute.GetConfig(System.String,System.Type)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 调用服务名称</param>
            <param name="type">TCP 服务器类型</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerCall`2">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="callType">调用类型</typeparam>
            <typeparam name="serverType">服务器目标对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerCall`2.Sender">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerCall`2.serverValue">
            <summary>
            服务器目标对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCall`2.Set(AutoCSer.Net.TcpOpenServer.ServerSocketSender,`1,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            设置参数
            </summary>
            <param name="socket">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCall`2.Pop">
            <summary>
            获取服务器端调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCall`2.push(`0)">
            <summary>
            服务器端调用入池
            </summary>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerCall`3">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="callType">调用类型</typeparam>
            <typeparam name="serverType">服务器目标对象类型</typeparam>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerCall`3.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCall`3.Set(AutoCSer.Net.TcpOpenServer.ServerSocketSender,`1,AutoCSer.Net.TcpServer.ServerTaskType,`2@)">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="serverValue">服务器目标对象</param>
            <param name="taskType"></param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCall`3.push(`0)">
            <summary>
            服务器端调用入池
            </summary>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerCallback">
            <summary>
            TCP 服务器端异步调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback.#ctor(System.Byte)">
            <summary>
            异步回调
            </summary>
            <param name="isKeep">是否保持回调</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback.onReturn(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback.onlyCallback(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback.SetKeep(AutoCSer.Net.TcpOpenServer.ServerSocketSender,System.Boolean)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerCallback`2">
            <summary>
            异步回调
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback`2.#ctor(System.Byte)">
            <summary>
            异步回调
            </summary>
            <param name="isKeep">是否保持回调</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback`2.onReturn(AutoCSer.Net.TcpServer.ReturnValue{`1})">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback`2.onlyCallback(AutoCSer.Net.TcpServer.ReturnValue{`1})">
            <summary>
            异步回调
            </summary>
            <param name="returnValue">返回值</param>
            <returns>是否成功加入回调队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback`2.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerCallback`2.SetKeep(AutoCSer.Net.TcpOpenServer.ServerSocketSender,AutoCSer.Net.TcpServer.OutputInfo,`0@)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerCallback`2.setReturn">
            <summary>
            设置返回值委托
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerSocket">
            <summary>
            TCP 服务端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocket.customDataSize">
            <summary>
            自定义数据字节长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocket.Sender">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocket.maxInputSize">
            <summary>
            最大输入数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocket.maxMergeInputSize">
            <summary>
            最大合并输入数据长度
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.#ctor(AutoCSer.Net.TcpOpenServer.Server,System.Net.Sockets.Socket@)">
            <summary>
            TCP 内部服务端套接字
            </summary>
            <param name="server">TCP调用服务端</param>
            <param name="socket">客户端信息</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.RunTask">
            <summary>
            TCP 服务端套接字任务处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.ErrorTask">
            <summary>
            TCP 服务端套接字任务错误处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.Close">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.Start">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.runTask">
            <summary>
            TCP 服务端套接字任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.onReceive(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据接收完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isReceiveVerifyCommand">
            <summary>
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isVerifyCommand">
            <summary>
            接收验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.checkVerifyCommandFixed">
            <summary>
            检查验证命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isReceiveVerifyData">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.verifyDataAsync">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isVerifyData">
            <summary>
            获取验证数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.doVerifyCommand">
            <summary>
            执行函数验证
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isReceiveCommand">
            <summary>
            获取命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isCommand">
            <summary>
            获取命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.loop(System.Boolean)">
            <summary>
            循环处理命令
            </summary>
            <param name="isCommand"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.receiveCommandData(System.Boolean@)">
            <summary>
            检查命令数据
            </summary>
            <param name="isDoCommand">是否执行了命令</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.dataAsync">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.bigDataAsync">
            <summary>
            获取数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isDoCommandBig">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.isDoCommandLoop">
            <summary>
            执行命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.doCommandMark(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理委托
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.doCommand(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理委托
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.doCommand(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            命令处理委托
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.Merge(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            流合并命令处理
            </summary>
            <param name="data">输入数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.SendCustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.SendCustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocket.SendCustomData(AutoCSer.SubArray{System.Byte})">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerSocketSender">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocketSender.sendAsyncEventArgs">
            <summary>
            发送数据异步事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocketSender.sendSizeLessCount">
            <summary>
            发送数据量过低次数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.#ctor(AutoCSer.Net.TcpOpenServer.ServerSocket)">
            <summary>
            TCP 内部服务套接字数据发送
            </summary>
            <param name="socket">TCP 内部服务套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.GetCallback(AutoCSer.Net.TcpServer.OutputInfo)">
            <summary>
            异步回调
            </summary>
            <param name="outputInfo">服务端输出信息</param>
            <returns>异步回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.GetCallback``2(AutoCSer.Net.TcpServer.OutputInfo,``0@)">
            <summary>
            异步回调
            </summary>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">输出参数</param>
            <returns>异步回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.closeSocket">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.close">
            <summary>
            释放接收数据缓冲区与异步事件对象
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.BuildOutput">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.send">
            <summary>
            发送数据
            </summary>
            <returns>发送数据状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.onSend(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            数据发送完成后的回调委托
            </summary>
            <param name="sender"></param>
            <param name="async">异步回调参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.GetRemoteExpressionNodeId(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取远程表达式服务端节点标识
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketSender.GetRemoteExpression(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.ServerSocketTask">
            <summary>
            TCP 服务端套接字任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketTask.#ctor(System.Int64)">
            <summary>
            TCP 服务端套接字任务处理
            </summary>
            <param name="taskTicks">线程切换超时时钟周期</param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketTask.Add(AutoCSer.Net.TcpOpenServer.ServerSocket)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketTask.run">
            <summary>
            TCP服务端套接字任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocketTask.Task">
            <summary>
            TCP 内部服务端套接字任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.ServerSocketTask.tasks">
            <summary>
            TCP 内部服务端套接字任务处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.ServerSocketTask.check">
            <summary>
            线程切换检测
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.TimeVerifyClient">
            <summary>
            时间验证服务客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.TimeVerifyClient.Verifier">
            <summary>
            时间验证服务客户端委托
            </summary>
            <param name="sender"></param>
            <param name="randomPrefix">随机前缀</param>
            <param name="md5Data">MD5 数据</param>
            <param name="ticks">验证时钟周期</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpOpenServer.TimeVerifyClient.Verify(AutoCSer.Net.TcpOpenServer.TimeVerifyClient.Verifier,AutoCSer.Net.TcpOpenServer.ClientSocketSender,AutoCSer.Net.TcpOpenServer.Client)">
            <summary>
            时间验证客户端验证
            </summary>
            <param name="verify">时间验证服务客户端委托</param>
            <param name="sender"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.TimeVerifyServer">
            <summary>
            时间验证服务
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpOpenServer.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.UnionType.ClientSocketSender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.UnionType.Server">
            <summary>
            TCP 服务端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.UnionType.ServerAttribute">
            <summary>
            TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpOpenServer.UnionType.ServerSocketSender">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod.FixedFill(System.Int32)">
            <summary>
            填充对齐数据
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializeDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.DeSerializeMethod">
            <summary>
            基本类型反序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.DeSerializer">
            <summary>
            简单反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.DeSerializer.Read">
            <summary>
            当前读取位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.DeSerializer.End">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Boolean@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">逻辑值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">逻辑值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Byte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Byte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.SByte@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.SByte}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Int16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Int16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.UInt16@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.UInt16}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Int32@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Int32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.UInt32@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.UInt32}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Int64@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Int64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.UInt64@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.UInt64}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Single@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Single}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Double@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Double}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Decimal@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Decimal}@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Char@)">
            <summary>
            字符反序列化
            </summary>
            <param name="data"></param>
            <param name="value">字符</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Char}@)">
            <summary>
            字符反序列化
            </summary>
            <param name="data"></param>
            <param name="value">字符</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.DateTime@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.DateTime}@)">
            <summary>
            时间反序列化
            </summary>
            <param name="data"></param>
            <param name="value">时间</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Guid@)">
            <summary>
            数值反序列化
            </summary>
            <param name="data"></param>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.Nullable{System.Guid}@)">
            <summary>
            Guid反序列化
            </summary>
            <param name="data"></param>
            <param name="value">Guid</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerialize(System.Byte*,System.String@,System.Byte*)">
            <summary>
            字符串反序列化
            </summary>
            <param name="start"></param>
            <param name="value">字符串</param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.Compile(System.Type[])">
            <summary>
            预编译类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.DeSerializer.deSerializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.DeSerializer.GetDeSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.#ctor(System.Type,System.Int32)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
            <param name="fixedSize"></param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.Push(AutoCSer.BinarySerialize.FieldSize)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.FixedFill(System.Int32)">
            <summary>
            填充对齐数据
            </summary>
            <param name="fixedFillSize"></param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteByteMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteSByteMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteShortMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteUShortMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteIntMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteUIntMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteLongMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.SerializeDynamicMethod.unmanagedStreamUnsafeWriteULongMethod">
            <summary>
            非托管内存数据流写数据函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.SerializeMethod">
            <summary>
            基本类型序列化函数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.Serializer">
            <summary>
            简单序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Boolean)">
            <summary>
            逻辑值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Boolean})">
            <summary>
            逻辑值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Byte)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Byte})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.SByte)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.SByte})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Int16)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int16})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.UInt16)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt16})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Int32)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int32})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.UInt32)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt32})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Int64)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Int64})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.UInt64)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.UInt64})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Single)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Single})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Double)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Double})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Decimal)">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Decimal})">
            <summary>
            数值序列化
            </summary>
            <param name="stream"></param>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Char)">
            <summary>
            字符序列化
            </summary>
            <param name="stream"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Char})">
            <summary>
            字符序列化
            </summary>
            <param name="stream"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.DateTime)">
            <summary>
            时间序列化
            </summary>
            <param name="stream"></param>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.DateTime})">
            <summary>
            时间序列化
            </summary>
            <param name="stream"></param>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Guid)">
            <summary>
            Guid序列化
            </summary>
            <param name="stream"></param>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.Nullable{System.Guid})">
            <summary>
            Guid序列化
            </summary>
            <param name="stream"></param>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.serialize(AutoCSer.UnmanagedStream,System.String)">
            <summary>
            字符串序列化
            </summary>
            <param name="stream"></param>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.Compile(System.Type[])">
            <summary>
            预编译类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="M:AutoCSer.Net.SimpleSerialize.Serializer.IsType(System.Type)">
            <summary>
            判断是否可序列化类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.TypeDeSerializer`1">
            <summary>
            简单反序列化
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.TypeDeSerializer`1.SimpleDeSerializer">
            <summary>
            简单反序列化委托
            </summary>
            <param name="start"></param>
            <param name="value">目标数据</param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.TypeDeSerializer`1.DeSerialize">
            <summary>
            简单反序列化委托
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.TypeSerializer`1">
            <summary>
            简单序列化
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="T:AutoCSer.Net.SimpleSerialize.TypeSerializer`1.SimpleSerializer">
            <summary>
            简单序列化委托
            </summary>
            <param name="stream"></param>
            <param name="value">目标数据</param>
        </member>
        <member name="F:AutoCSer.Net.SimpleSerialize.TypeSerializer`1.Serializer">
            <summary>
            成员序列化
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SocketAsyncEventArgsPool">
            <summary>
            套接字异步事件对象池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.maxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.head">
            <summary>
            套接字异步事件对象池首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.popLock">
            <summary>
            套接字异步事件对象池弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketAsyncEventArgsPool.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.Get">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SocketAsyncEventArgsPool.PushNotNull(System.Net.Sockets.SocketAsyncEventArgs@)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Net.SocketLink">
            <summary>
            套接字链表
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketLink.Socket">
            <summary>
            套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketLink.DisposeSocket">
            <summary>
            释放套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketLink.Cancel">
            <summary>
            释放套接字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SocketLink.Start(AutoCSer.Net.TcpOpenServer.Server,AutoCSer.Net.TcpOpenServer.ServerSocket@)">
            <summary>
            创建 TCP 服务端套接字
            </summary>
            <param name="server"></param>
            <param name="serverSocket"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.SocketTimeoutLink">
            <summary>
            套接字超时链表节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.timeoutSeconds">
            <summary>
            超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.Socket">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.timeoutSocket">
            <summary>
            超时操作验证标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.nextTimeout">
            <summary>
            下一个超时节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.previousTimeout">
            <summary>
            上一个超时节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.timeoutCount">
            <summary>
            超时计数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.isSetReceiveTimeout">
            <summary>
            是否设置了超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.ReceiveSizeLessCount">
            <summary>
            接收数据量过低次数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.setTimeout(System.Int64,System.Net.Sockets.Socket)">
            <summary>
            设置超时秒数
            </summary>
            <param name="timeoutSeconds"></param>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.setTimeout(System.Int64,System.Net.Sockets.Socket,System.UInt16)">
            <summary>
            设置超时秒数
            </summary>
            <param name="timeoutSeconds"></param>
            <param name="socket"></param>
            <param name="timeoutCount"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.setTimeout(System.Int64)">
            <summary>
            设置超时秒数
            </summary>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.getTimeoutSocket(System.Net.Sockets.Socket@)">
            <summary>
            获取超时操作验证标识
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.waitCancelTimeout">
            <summary>
            等待取消超时
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.freeTimeout">
            <summary>
            弹出节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.DisposeSocket(System.Net.Sockets.Socket)">
            <summary>
            释放套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.DisposeSocket">
            <summary>
            释放套接字
            </summary>
        </member>
        <member name="T:AutoCSer.Net.SocketTimeoutLink.TimerLink">
            <summary>
            套接字超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.TimerLink.Head">
            <summary>
            链表首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.TimerLink.End">
            <summary>
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.SocketTimeoutLink.TimerLink.queueLock">
            <summary>
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.TimerLink.#ctor(System.Int32)">
            <summary>
            定时器双向链表节点
            </summary>
            <param name="seconds">超时秒数</param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.TimerLink.Push(AutoCSer.Net.SocketTimeoutLink,System.Net.Sockets.Socket,System.UInt16)">
            <summary>
            添加超时套接字
            </summary>
            <param name="value"></param>
            <param name="socket"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.TimerLink.Cancel(AutoCSer.Net.SocketTimeoutLink)">
            <summary>
            弹出节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.TimerLink.OnTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.TimerLink.onTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="M:AutoCSer.Net.SocketTimeoutLink.TimerLink.Get(System.Int32)">
            <summary>
            获取套接字超时
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Cache">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Cache.ServerSets">
            <summary>
            TCP 服务信息集合缓存信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Cache.IpPorts">
            <summary>
            主机端口信息集合
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Client">
            <summary>
            TCP 内部注册服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.serviceName">
            <summary>
            TCP注册服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.readerClient">
            <summary>
            TCP 注册服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.registerClient">
            <summary>
            TCP 注册服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.checkSocketVersion">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.registerLock">
            <summary>
            TCP 注册服务访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.createWait">
            <summary>
            客户端创建等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.clientId">
            <summary>
            TCP 服务端标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.logHandle">
            <summary>
            客户端轮询
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.logKeep">
            <summary>
            客户端保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.serverSets">
            <summary>
            TCP 服务信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.serverSetLock">
            <summary>
            TCP 服务信息集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.servers">
            <summary>
            TCP 内部服务集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.isClientErrorLog">
            <summary>
            是否客户端错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.isRegisterLoaded">
            <summary>
            服务是否加载完毕
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.#ctor(System.String)">
            <summary>
            TCP 注册服务客户端
            </summary>
            <param name="serviceName">TCP 注册服务服务名称</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.close">
            <summary>
            关闭 TCP 注册服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.onNewSocket(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.onLog(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpRegister.Log})">
            <summary>
            客户端轮询
            </summary>
            <param name="result">轮询结果</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.registerServer(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            注册服务
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.removeServer(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            注销服务
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.Register(AutoCSer.Net.TcpRegister.IClient)">
            <summary>
            TCP 客户端注册
            </summary>
            <param name="client">TCP 客户端</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.Remove(AutoCSer.Net.TcpRegister.IClient)">
            <summary>
            TCP 客户端注销
            </summary>
            <param name="client">TCP 客户端</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.checkRegisterClient">
            <summary>
            创建 TCP 注册服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.GetPort``1(``0)">
            <summary>
            获取服务端口
            </summary>
            <typeparam name="serverAttributeType"></typeparam>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.Register(AutoCSer.Net.TcpRegister.IServer)">
            <summary>
            注册TCP服务端
            </summary>
            <param name="server"></param>
            <returns>是否注册成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.RemoveRegister(AutoCSer.Net.TcpRegister.IServer)">
            <summary>
            删除注册TCP服务端
            </summary>
            <param name="server"></param>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.clients">
            <summary>
            TCP注册服务客户端缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Client.clientsLock">
            <summary>
            TCP注册服务客户端 访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.Get(System.String,AutoCSer.Log.ILog)">
            <summary>
            获取 TCP 注册服务客户端
            </summary>
            <param name="serviceName">服务名称</param>
            <param name="Log">日志处理</param>
            <returns>TCP注册服务客户端,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Client.Close">
            <summary>
            关闭 TCP 注册服务客户端
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ClientId">
            <summary>
            TCP 服务端标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientId.Tick">
            <summary>
            时钟周期标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientId.Index">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientId.Identity">
            <summary>
            索引编号
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientInfo.Identity">
            <summary>
            索引编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientInfo.onLog">
            <summary>
            TCP 内部注册服务更新日志回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientInfo.Set(System.Int32,System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpRegister.Log},System.Boolean})">
            <summary>
            设置 TCP 内部注册服务更新日志回调
            </summary>
            <param name="identity"></param>
            <param name="onLog"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientInfo.OnLog(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            更新日志回调
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ClientServerSet">
            <summary>
            客户端 TCP 服务信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientServerSet.serverSet">
            <summary>
            TCP 服务信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ClientServerSet.clients">
            <summary>
            客户端集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.#ctor(AutoCSer.Net.TcpRegister.IClient)">
            <summary>
            客户端 TCP 服务信息集合
            </summary>
            <param name="client">TCP 客户端</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.#ctor(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            客户端 TCP 服务信息集合
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.Add(AutoCSer.Net.TcpRegister.IClient,System.Boolean)">
            <summary>
            添加 TCP 客户端
            </summary>
            <param name="client">TCP 客户端</param>
            <param name="isLoaded"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.Remove(AutoCSer.Net.TcpRegister.IClient)">
            <summary>
            移除 TCP 客户端
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.Add(AutoCSer.Net.TcpRegister.Log,System.Boolean)">
            <summary>
            添加服务
            </summary>
            <param name="log"></param>
            <param name="isLoaded"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.Remove(AutoCSer.Net.TcpRegister.Log,System.Boolean)">
            <summary>
            移除服务
            </summary>
            <param name="log"></param>
            <param name="isLoaded"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.onServerChange(AutoCSer.Net.TcpRegister.ServerSet)">
            <summary>
            TCP 服务更新
            </summary>
            <param name="serverSet"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ClientServerSet.OnLoaded">
            <summary>
            服务加载完毕
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Config">
            <summary>
            TCP 内部注册服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Config.PortStart">
            <summary>
            端口分配起始位置，默认为 9000
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Config.PortEnd">
            <summary>
            端口分配结束位置（不包含），默认为 65536
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Config.SaveSeconds">
            <summary>
            服务注册保存间隔秒数，默认为 2 秒
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Config.CheckPort">
            <summary>
            检测端口信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Config.IsPort(System.Int32)">
            <summary>
            判断端口号是否在分配范围内
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.DefaultServer">
            <summary>
            默认 TCP 注册服务包装
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.DefaultServer.Server">
            <summary>
            TCP 内部注册读取服务对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.DefaultServer.server">
            <summary>
            TCP 内部注册写服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.DefaultServer.readerServer">
            <summary>
            TCP 内部注册读取服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.DefaultServer.#ctor(AutoCSer.Net.TcpRegister.ReaderServer,AutoCSer.Net.TcpRegister.Server.TcpInternalServer,AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalServer)">
            <summary>
            默认 TCP 注册服务包装
            </summary>
            <param name="serverTarget">TCP 内部注册读取服务对象</param>
            <param name="server">TCP 内部注册写服务</param>
            <param name="readerServer">TCP 内部注册读取服务</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.DefaultServer.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.DefaultServer.Create">
            <summary>
            创建默认 TCP 注册服务包装
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.IClient">
            <summary>
            TCP 内部注册服务客户端 绑定 TCP 服务客户端
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.IClient.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.IClient.OnServerChange(AutoCSer.Net.TcpRegister.ServerSet)">
            <summary>
            服务更新
            </summary>
            <param name="serverSet">TCP 服务信息集合</param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.IServer">
            <summary>
            TCP 内部注册服务客户端 绑定 TCP 服务端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.IServer.AddLog(System.Exception)">
            <summary>
            添加日志
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.IServer.TcpRegisterInfo">
            <summary>
            TCP 服务注册信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.IServer.CreateServerInfo">
            <summary>
            创建 TCP 服务注册信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.IServerAttribute">
            <summary>
            TCP 服务配置接口
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.IServerAttribute.ClientRegisterHost">
            <summary>
            客户端访问的主机名称或者 IP 地址，用于需要使用端口映射服务。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.IServerAttribute.ClientRegisterPort">
            <summary>
            客户端访问的监听端口，用于需要使用端口映射服务。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Log">
            <summary>
            TCP 内部注册服务更新日志
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Log.Type">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Log.Server">
            <summary>
            TCP 服务注册信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Log.ClientError">
            <summary>
            客户端错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Log.RegisterLoaded">
            <summary>
            注册服务加载完毕
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.LogType">
            <summary>
            TCP 内部注册服务更新日志类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.LogType.ClientError">
            <summary>
            客户端错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.LogType.RegisterServer">
            <summary>
            注册服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.LogType.RegisterLoaded">
            <summary>
            注册服务加载完毕
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.LogType.RemoveServer">
            <summary>
            注销服务
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.PortCache">
            <summary>
            主机端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.PortCache.Host">
            <summary>
            IP 地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.PortCache.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.PortCache.Set(System.String,System.Int32)">
            <summary>
            设置 主机端口信息
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Ports">
            <summary>
            端口集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Ports.Map">
            <summary>
            已使用端口位图
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Ports.Current">
            <summary>
            当前待分配端口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Ports.Start">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Ports.End">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Ports.#ctor(AutoCSer.Net.TcpRegister.Config)">
            <summary>
            端口集合
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Ports.#ctor(AutoCSer.Net.TcpRegister.Config,System.Int32)">
            <summary>
            端口集合
            </summary>
            <param name="config"></param>
            <param name="current">当前待分配端口</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Ports.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.Ports.Next">
            <summary>
            获取下一个端口
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Ports.Set(System.Int32)">
            <summary>
            设置端口使用状态
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Ports.Clear(System.Int32)">
            <summary>
            清除端口使用状态
            </summary>
            <param name="port"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ReaderServer">
            <summary>
            TCP 内部注册读取服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ReaderServer.ServerNameSuffix">
            <summary>
            读取服务名称后缀
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ReaderServer.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.ReaderServer.Server">
            <summary>
            TCP注册服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.register">
            <summary>
            TCP 服务端注册
            </summary>
            <returns>TCP 服务端标识</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.getLog(AutoCSer.Net.TcpRegister.ClientId,System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpRegister.Log},System.Boolean})">
            <summary>
            TCP 服务端轮询
            </summary>
            <param name="clientId">TCP 服务端标识</param>
            <param name="onLog">TCP 服务注册通知委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.Create">
            <summary>
            创建 TCP 注册服务目标对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer._identityCommandNames_">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalServer">
            <summary>
            TcpRegisterReader TCP服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalServer.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.Net.TcpRegister.ReaderServer,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TcpRegisterReader TCP调用服务端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verify">套接字验证委托</param>
            <param name="value">TCP 服务目标对象</param>
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalServer.DoCommand(System.Int32,AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalClient.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalClient,AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP调用客户端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verifyMethod">TCP 验证方法</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalClient.getLog(AutoCSer.Net.TcpRegister.ClientId,System.Action{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpRegister.Log}})">
            <summary>
            TCP 服务端轮询
            </summary>
            <param name="clientId">TCP 服务端标识</param>
            <returns>保持异步回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ReaderServer.TcpInternalClient.register">
            <summary>
            TCP 服务端注册
            </summary>
            <returns>TCP 服务端标识</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.RegisterState">
            <summary>
            注册状态
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.RegisterState.NoClient">
            <summary>
            客户端不可用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.RegisterState.ClientError">
            <summary>
            客户端标识错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.RegisterState.Success">
            <summary>
            注册成功
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Server">
            <summary>
            TCP 内部注册写服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.config">
            <summary>
            端口分配配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.ticks">
            <summary>
            全局注册标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.clientPool">
            <summary>
            客户端信息池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.serverSets">
            <summary>
            TCP 服务信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.ipPorts">
            <summary>
            主机端口分配池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.isNew">
            <summary>
            是否需要保存
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.isDisposed">
            <summary>
            是否释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.#ctor">
            <summary>
            TCP 内部注册写服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.Register">
            <summary>
            TCP服务端注册
            </summary>
            <returns>TCP服务端标识</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.GetLog(AutoCSer.Net.TcpRegister.ClientId@,System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpRegister.Log},System.Boolean})">
            <summary>
            TCP服务端轮询
            </summary>
            <param name="clientId">TCP服务端标识</param>
            <param name="onLog">TCP服务注册通知委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.getPort(AutoCSer.Net.TcpRegister.ClientId,System.String)">
            <summary>
            分配服务端口号
            </summary>
            <param name="clientId"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.register(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            注册 TCP 服务信息
            </summary>
            <param name="ticks">全局注册标识</param>
            <param name="server">TCP 服务信息</param>
            <returns>注册状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.checkRegister(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            失败重连检测 TCP 服务信息
            </summary>
            <param name="ticks">全局注册标识</param>
            <param name="server">TCP 服务信息</param>
            <returns>注册状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.removeRegister(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            注销TCP服务信息
            </summary>
            <param name="ticks"></param>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.onLog(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            日志回调处理
            </summary>
            <param name="log"></param>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.DoubleLinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.DoubleLinkPrevious">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.cacheFile">
            <summary>
            缓存文件名称
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.SetTcpServer(AutoCSer.Net.TcpInternalServer.Server)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="tcpServer">TCP服务端</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.fromCacheFile">
            <summary>
            从缓存文件恢复TCP服务信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.SetIpPort(AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            设置主机端口
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.saveCacheFile">
            <summary>
            保存 TCP 服务信息集合到缓存文件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.isTimer">
            <summary>
            是否已经触发定时任务
            </summary> 
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.OnTimer">
            <summary>
            定时器触发日志写入
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.ServerEnd">
            <summary>
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.Server.serverLinkLock">
            <summary>
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.PushNotNull(AutoCSer.Net.TcpRegister.Server)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.PopNotNull(AutoCSer.Net.TcpRegister.Server)">
            <summary>
            弹出节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.freeNotEnd">
            <summary>
            弹出节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server._identityCommandNames_">
            <summary>
            命令序号记忆数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Server.TcpInternalServer">
            <summary>
            TcpRegister TCP服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalServer.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.Net.TcpRegister.Server,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TcpRegister TCP调用服务端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verify">套接字验证委托</param>
            <param name="value">TCP 服务目标对象</param>
            <param name="log">日志接口</param>
            <param name="onCustomData">自定义数据包处理</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalServer.DoCommand(System.Int32,AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.Server.TcpInternalClient">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Func{AutoCSer.Net.TcpRegister.Server.TcpInternalClient,AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP调用客户端
            </summary>
            <param name="attribute">TCP 调用服务器端配置信息</param>
            <param name="verifyMethod">TCP 验证方法</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.checkRegister(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            失败重连检测 TCP 服务信息
            </summary>
            <param name="ticks">全局注册标识</param>
            <param name="server">TCP 服务信息</param>
            <returns>注册状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.checkRegisterAwaiter(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            失败重连检测 TCP 服务信息
            </summary>
            <param name="ticks">全局注册标识</param>
            <param name="server">TCP 服务信息</param>
            <returns>注册状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.getPort(AutoCSer.Net.TcpRegister.ClientId,System.String)">
            <summary>
            分配服务端口号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.getPortAwaiter(AutoCSer.Net.TcpRegister.ClientId,System.String)">
            <summary>
            分配服务端口号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.register(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            注册 TCP 服务信息
            </summary>
            <param name="ticks">全局注册标识</param>
            <param name="server">TCP 服务信息</param>
            <returns>注册状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.registerAwaiter(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            注册 TCP 服务信息
            </summary>
            <param name="ticks">全局注册标识</param>
            <param name="server">TCP 服务信息</param>
            <returns>注册状态</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.removeRegister(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            注销TCP服务信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.Server.TcpInternalClient.removeRegisterAwaiter(System.Int64,AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            注销TCP服务信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ServerInfo">
            <summary>
            TCP 服务注册信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.RegisterTick">
            <summary>
            注册时钟周期标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.ClientIndex">
            <summary>
            索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.ClientIdentity">
            <summary>
            索引编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.Name">
            <summary>
            TCP服务名称标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.Host">
            <summary>
            主机名称或者IP地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpRegister.ServerInfo.HostPort">
            <summary>
            TCP 服务主机与端口信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.IsSingle">
            <summary>
            是否只允许一个 TCP 服务实例
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerInfo.IsCheckRegister">
            <summary>
            是否重连检测 TCP 服务注册信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerInfo.HostToIpAddress">
            <summary>
            主机名称转换成IP地址
            </summary>
            <returns>是否转换成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerInfo.ClientEquals(AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            判断是否匹配服务信息
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerInfo.HostPortEquals(AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            判断服务主机与端口信息是否匹配
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ServerSet">
            <summary>
            TCP 服务信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerSet.Server">
            <summary>
            TCP 服务注册信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerSet.Servers">
            <summary>
            TCP 服务注册信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.#ctor(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            TCP 服务信息集合
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.#ctor(AutoCSer.Net.TcpRegister.ServerSetCache,AutoCSer.Net.TcpRegister.Server)">
            <summary>
            TCP 服务信息集合
            </summary>
            <param name="cache"></param>
            <param name="registerServer"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.Add(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            添加 TCP 服务注册信息
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.Check(AutoCSer.Net.TcpRegister.Log)">
            <summary>
            失败重连检测 TCP 服务注册信息
            </summary>
            <param name="log"></param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.OnLog(System.Func{AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpRegister.Log},System.Boolean})">
            <summary>
            TCP 内部注册服务日志初始化回调
            </summary>
            <param name="onLog"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.Remove(AutoCSer.Net.TcpRegister.ServerInfo)">
            <summary>
            移除 TCP 服务注册信息
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSet.ClientClear">
            <summary>
            客户端清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.ServerSetCache">
            <summary>
            TCP 服务信息集合缓存信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerSetCache.Name">
            <summary>
            TCP服务名称标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerSetCache.Server">
            <summary>
            TCP 服务注册信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.ServerSetCache.Servers">
            <summary>
            TCP 服务注册信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpRegister.ServerSetCache.Set(System.String,AutoCSer.Net.TcpRegister.ServerSet)">
            <summary>
            设置 TCP 服务信息集合缓存信息
            </summary>
            <param name="name"></param>
            <param name="serverSet"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpRegister.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpRegister.UnionType.Config">
            <summary>
            TCP 内部注册写服务配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AutoWaitReturnValue">
            <summary>
            同步等待调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.CallbackHandle">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.waitHandle">
            <summary>
            同步等待
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.Get(AutoCSer.Net.TcpServer.ReturnValue@)">
            <summary>
            调用返回值（警告：每次调用只能使用一次）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.Wait">
            <summary>
            等待返回
            </summary>
            <returns>是否存在返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.#ctor">
            <summary>
            同步等待调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.Call(AutoCSer.Net.TcpServer.ReturnValue@)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter">是否调用成功</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.CallbackSet(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.op_Implicit(AutoCSer.Net.TcpServer.AutoWaitReturnValue)~System.Action{AutoCSer.Net.TcpServer.ReturnValue}">
            <summary>
            回调处理
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.poolMaxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.poolHead">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue.poolCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.PushNotNull(AutoCSer.Net.TcpServer.AutoWaitReturnValue)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.pushLink(AutoCSer.Net.TcpServer.AutoWaitReturnValue,AutoCSer.Net.TcpServer.AutoWaitReturnValue,System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="count">数据数量</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1">
            <summary>
            同步等待调用
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.waitHandle">
            <summary>
            同步等待
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.next">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.Get">
            <summary>
            调用返回值（警告：每次调用只能使用一次）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.Get(`0@)">
            <summary>
            调用返回值（警告：每次调用只能使用一次）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.Get(AutoCSer.Net.TcpServer.ReturnValue{`0}@)">
            <summary>
            调用返回值（警告：每次调用只能使用一次）
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.Wait">
            <summary>
            等待返回(无意义)
            </summary>
            <returns>是否存在返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.#ctor">
            <summary>
            同步等待调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.Call(AutoCSer.Net.TcpServer.ReturnValue{`0}@)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.poolMaxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.poolHead">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.poolCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.PushNotNull(AutoCSer.Net.TcpServer.AutoWaitReturnValue{`0})">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.pushLink(AutoCSer.Net.TcpServer.AutoWaitReturnValue{`0},AutoCSer.Net.TcpServer.AutoWaitReturnValue{`0},System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="count">数据数量</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AutoWaitReturnValue`1.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Awaiter">
            <summary>
            异步等待
            </summary>
            <summary>
            异步等待
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Awaiter.returnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter.Wait">
            <summary>
            等待返回值
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Awaiter.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Awaiter.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter.Call(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter.Call(AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            设置错误返回值类型
            </summary>
            <param name="type">返回值类型</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter.GetResult">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter.OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Awaiter`2">
            <summary>
            异步等待
            </summary>
            <typeparam name="returnType"></typeparam>
            <typeparam name="awaiterReturnValueType"></typeparam>
            <summary>
            异步等待
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Awaiter`2.returnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`2.Wait">
            <summary>
            等待返回值
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Awaiter`2.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Awaiter`2.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`2.Call(AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            设置错误返回值类型
            </summary>
            <param name="type">返回值类型</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`2.call(AutoCSer.Net.TcpServer.ReturnType,`0@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="returnType">返回值类型</param>
            <param name="returnValue">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`2.GetResult">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`2.OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`2.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Awaiter`1">
            <summary>
            异步等待
            </summary>
            <typeparam name="returnType"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Awaiter`1.Call(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpServer.AwaiterReturnValue{`0}}@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="returnValue">输出参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterBox`1">
            <summary>
            异步等待
            </summary>
            <typeparam name="returnType"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AwaiterBox`1.Call(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpServer.AwaiterReturnValueBox{`0}}@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="returnValue">输出参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterReference`1">
            <summary>
            异步等待
            </summary>
            <typeparam name="returnType"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AwaiterReference`1.Call(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpServer.AwaiterReturnValueReference{`0}}@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="returnValue">输出参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterBoxReference`1">
            <summary>
            异步等待
            </summary>
            <typeparam name="returnType"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.AwaiterBoxReference`1.Call(AutoCSer.Net.TcpServer.ReturnValue{AutoCSer.Net.TcpServer.AwaiterReturnValueBoxReference{`0}}@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="returnValue">输出参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterReturnValue`1">
            <summary>
            await 返回值包装
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AwaiterReturnValue`1.Ret">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.AwaiterReturnValue`1.Return">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterReturnValueBox`1">
            <summary>
            await 返回值包装
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AwaiterReturnValueBox`1.Ret">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.AwaiterReturnValueBox`1.Return">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterReturnValueReference`1">
            <summary>
            await 返回值包装
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AwaiterReturnValueReference`1.Ret">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.AwaiterReturnValueReference`1.Return">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.AwaiterReturnValueBoxReference`1">
            <summary>
            await 返回值包装
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.AwaiterReturnValueBoxReference`1.Ret">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.AwaiterReturnValueBoxReference`1.Return">
            <summary>
            返回值
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CallbackReturnValue`2">
            <summary>
            异步回调
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CallbackReturnValue`2.callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CallbackReturnValue`2.#ctor(System.Action{AutoCSer.Net.TcpServer.ReturnValue{`0}})">
            <summary>
            异步回调
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CallbackReturnValue`2.Call(AutoCSer.Net.TcpServer.ReturnValue{`1}@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CallbackReturnValue`2.getReturnValue">
            <summary>
            获取返回值委托
            </summary>
            <param name="outputParamter">输出参数</param>
            <returns>返回值</returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CallbackReturnValue`2.getReturn">
            <summary>
            获取返回值委托
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CheckSocketVersion">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CheckSocketVersion.onClientSocketHandle">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CheckSocketVersion.onCheckSocketVersion">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CheckSocketVersion.socket">
            <summary>
            当前缓存主服务客户端 TCP 套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CheckSocketVersion.#ctor(System.Action{AutoCSer.Net.TcpServer.ClientSocketBase})">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
            <param name="onCheckSocketVersion">TCP 客户端套接字初始化处理</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CheckSocketVersion.onClientSocket(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CheckSocketVersion.DisposeSocket">
            <summary>
            释放套接字
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CheckSocketVersion`1">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CheckSocketVersion`1.client">
            <summary>
            TCP 服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CheckSocketVersion`1.#ctor(AutoCSer.Net.TcpServer.ClientBase{`0},System.Action{AutoCSer.Net.TcpServer.ClientSocketBase})">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
            <param name="client">TCP 服务客户端</param>
            <param name="onCheckSocketVersion">TCP 客户端套接字初始化处理</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CheckSocketVersion`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Client`1">
            <summary>
            TCP 服务客户端
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Client`1.onCustomData">
            <summary>
            自定义数据包处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Client`1.maxCustomDataSize">
            <summary>
            客户端最大自定义数据包字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Client`1.customDataCommandInfo">
            <summary>
            自定义数据命令信息
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Client`1.CustomDataCommandInfo">
            <summary>
            自定义数据命令信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Client`1.#ctor(`0,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Client`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Client`1.CustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据包处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientBase`1">
            <summary>
            TCP 服务客户端
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.OutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.TryCreateSleep">
            <summary>
            重建连接休眠毫秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.SocketWait">
            <summary>
            创建 TCP 客户端套接字等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.SetSocketLock">
            <summary>
            客户端 TCP 套接字更新访问锁
            </summary>
        </member>
        <member name="E:AutoCSer.Net.TcpServer.ClientBase`1.onSetSocket">
            <summary>
            设置 TCP 客户端套接字事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.Socket">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.CreateSocket">
            <summary>
            当前正在建立的连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientBase`1.CreateVersion">
            <summary>
            服务更新版本号
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ClientBase`1.SendCount">
            <summary>
            套接字发送数据次数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ClientBase`1.ReceiveCount">
            <summary>
            套接字接收数据次数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.#ctor(`0,AutoCSer.Log.ILog)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.SocketVerifyMethod(AutoCSer.Net.TcpServer.ClientSocketSenderBase)">
            <summary>
            套接字验证
            </summary>
            <param name="socket">TCP 调用客户端套接字</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.SetSocket(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            设置 TCP 客户端套接字
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.OnSetSocket(System.Action{AutoCSer.Net.TcpServer.ClientSocketBase})">
            <summary>
            设置 TCP 客户端套接字事件
            </summary>
            <param name="onSetSocket"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.RemoveOnSetSocket(System.Action{AutoCSer.Net.TcpServer.ClientSocketBase})">
            <summary>
            删除 TCP 客户端套接字事件
            </summary>
            <param name="onSetSocket"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.CreateCheckSocketVersion(System.Action{AutoCSer.Net.TcpServer.ClientSocketBase})">
            <summary>
            TCP 客户端套接字初始化处理
            </summary>
            <param name="onCheckSocketVersion">TCP 客户端套接字初始化处理</param>
            <returns>TCP 客户端套接字初始化处理</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.OnDisposeSocket(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            移除 TCP 服务客户端套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientBase`1.GetCallback``2(System.Action{AutoCSer.Net.TcpServer.ReturnValue{``0}})">
            <summary>
            获取异步回调
            </summary>
            <param name="callback">回调委托</param>
            <returns>异步回调</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCallQueue">
            <summary>
            TCP 客户端回调队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCallQueue.Add(AutoCSer.Net.TcpServer.ClientCommand.CommandBase)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCallQueue.run">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCallQueue.Default">
            <summary>
            TCP 客户端回调队列处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCallTask">
            <summary>
            TCP 客户端回调任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCallTask.#ctor(System.Int64)">
            <summary>
            TCP 客户端回调任务处理
            </summary>
            <param name="taskTicks">线程切换超时时钟周期</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCallTask.Add(AutoCSer.Net.TcpServer.ClientCommand.CommandBase)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCallTask.run">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCallTask.Task">
            <summary>
            TCP 客户端回调任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCallTask.tasks">
            <summary>
            TCP 客户端回调任务处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCallTask.check">
            <summary>
            线程切换检测
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCheckTimer">
            <summary>
            客户端心跳检测定时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCheckTimer.Head">
            <summary>
            链表首节点
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCheckTimer.End">
            <summary>
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCheckTimer.queueLock">
            <summary>
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.#ctor(System.Int32)">
            <summary>
            客户端心跳检测定时
            </summary>
            <param name="seconds">超时秒数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.Push(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            添加心跳检测
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.Free(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            释放心跳检测
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.pop(System.Int64)">
            <summary>
            弹出节点
            </summary>
            <param name="currentSecond"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.Reset(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            重置心跳检测
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.OnTimer">
            <summary>
            定时器触发
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCheckTimer.Get(System.Int32)">
            <summary>
            获取客户端心跳检测定时
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CallCommandBase">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallCommandBase.Callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallCommandBase.ReturnType">
            <summary>
            任务返回类型
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CallCommand">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>下一个命令</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue})">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="onCall">回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.setTask">
            <summary>
            设置回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.onReceive">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallCommand.threadPoolOnReceive(System.Object)">
            <summary>
            系统线程池接收数据回调处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.outputParameters">
            <summary>
            输出参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.OutputLock">
            <summary>
            输出参数访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.isOutput">
            <summary>
            是否正在输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.Callback">
            <summary>
            回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.CancelKeep(System.Int32)">
            <summary>
            终止保持回调
            </summary>
            <param name="commandIndex">命令会话标识</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.currentOutputParameters">
            <summary>
            当前输出参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.onReceive">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommandBase.threadPoolOnReceive(System.Object)">
            <summary>
            系统线程池接收数据回调处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommand">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CallKeepCommand.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue})">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="onCall">回调委托</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CancelKeepCommand">
            <summary>
            取消保持回调客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CancelKeepCommand.commandInfo">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CancelKeepCommand.cancelCommandIndex">
            <summary>
            取消保持回调会话标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CancelKeepCommand.#ctor">
            <summary>
            取消保持回调客户端命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CancelKeepCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CancelKeepCommand.Set(AutoCSer.Net.TcpServer.ClientSocket,System.Int32)">
            <summary>
            取消保持回调客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="cancelCommandIndex">取消保持回调会话标识</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CheckCommand">
            <summary>
            心跳检测命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CheckCommand.commandInfo">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CheckCommand.#ctor">
            <summary>
            心跳检测命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CheckCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CheckCommand.Get(AutoCSer.Net.TcpServer.ClientSocket)">
            <summary>
            获取心跳检测命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <returns>心跳检测命令</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CommandBase">
            <summary>
            TCP 客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.StreamStartIndex">
            <summary>
            输出流起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.CommandInfo">
            <summary>
            TCP调用命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>下一个命令</returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.TaskTicks">
            <summary>
            线程切换检测时间
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.AutoCSer#Threading#ILinkTask#LinkTaskTicks">
            <summary>
            线程切换检测时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.NextTask">
            <summary>
            下一个任务
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.AutoCSer#Threading#ILinkTask#NextLinkTask">
            <summary>
            下一个任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.SingleRunLinkTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.OnReceiveTask">
            <summary>
            接收数据回调处理任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.GetReturnType(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取返回值类型
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CommandBase.CancelLink(AutoCSer.Net.TcpServer.ClientCommand.CommandBase)">
            <summary>
            取消命令调用
            </summary>
            <param name="head"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.Command">
            <summary>
            TCP 客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.Command.Socket">
            <summary>
            TCP 客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.Command.CancelKeep(System.Int32)">
            <summary>
            终止保持回调
            </summary>
            <param name="commandIndex">命令会话标识</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand">
            <summary>
            自定义数据命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.commandInfo">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.data">
            <summary>
            自定义数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.#ctor(AutoCSer.Net.TcpServer.ClientSocket)">
            <summary>
            服务端自定义数据回调命令
            </summary>
            <param name="socket">TCP 客户端套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.#ctor(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo)">
            <summary>
            服务端自定义数据回调命令
            </summary>
            <param name="socket">TCP 客户端套接字</param>
            <param name="commandInfo">命令信息</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.Set(AutoCSer.Net.TcpServer.ClientSocket,System.Byte[])">
            <summary>
            自定义数据命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="data">自定义数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="data">自定义数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.CustomDataCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.InputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue},`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.setTask">
            <summary>
            设置回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.onReceive">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputCommand`1.threadPoolOnReceive(System.Object)">
            <summary>
            系统线程池接收数据回调处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.InputKeepCommand`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.InputKeepCommand`1.InputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputKeepCommand`1.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputKeepCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue},`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2">
            <summary>
            客户端命令
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.InputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`1}},`0@,`1@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`1}},`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.setTask">
            <summary>
            设置回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.onReceive">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputCommand`2.threadPoolOnReceive(System.Object)">
            <summary>
            系统线程池接收数据回调处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.InputOutputKeepCommand`2">
            <summary>
            客户端命令
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.InputOutputKeepCommand`2.InputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputKeepCommand`2.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputKeepCommand`2.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`1}},`0@,`1@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.InputOutputKeepCommand`2.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`1}},`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.NullIndex">
            <summary>
            非法回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.MergeIndex">
            <summary>
            合并回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.CustomDataIndex">
            <summary>
            服务端自定义数据包回调命令索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.CommandPoolIndex">
            <summary>
            命令索引起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.KeepCallbackCommandInfo">
            <summary>
            命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.KeepCallback">
            <summary>
            保持回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.KeepCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>下一个命令</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.MergeCommand">
            <summary>
            合并处理命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.MergeCommand.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.MergeCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            
            </summary>
            <param name="buildInfo"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.OutputCommandBase`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputCommandBase`1.Callback">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputCommandBase`1.OutputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommandBase`1.onReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>下一个命令</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`0}},`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`0}})">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.setTask">
            <summary>
            设置回调任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.onReceive">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputCommand`1.threadPoolOnReceive(System.Object)">
            <summary>
            系统线程池接收数据回调处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.outputParameters">
            <summary>
            输出参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.OutputLock">
            <summary>
            输出参数访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.OutputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.isOutput">
            <summary>
            是否正在输出
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.Callback">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.currentOutputParameters">
            <summary>
            当前输出参数集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.CancelKeep(System.Int32)">
            <summary>
            终止保持回调
            </summary>
            <param name="commandIndex">命令会话标识</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.onReceive(AutoCSer.SubArray{System.Byte}@,AutoCSer.Net.TcpServer.ReturnValue{`0}@)">
            <summary>
            接收数据反序列化
            </summary>
            <param name="data"></param>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.OnReceive(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            接收数据回调处理
            </summary>
            <param name="data">输出数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.onReceive">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.onReceiveTask">
            <summary>
            回调处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommandBase`1.threadPoolOnReceive(System.Object)">
            <summary>
            系统线程池接收数据回调处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommand`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`0}},`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.OutputKeepCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{`0}})">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="callback">异步回调</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand`1">
            <summary>
            客户端命令
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand`1.InputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand`1.Set(AutoCSer.Net.TcpServer.ClientSocket,AutoCSer.Net.TcpServer.CommandInfo,`0@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="socket">TCP客户端命令流处理套接字</param>
            <param name="command">命令信息</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientCommand.SendOnlyCommand`1.Build(AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建命令输入数据
            </summary>
            <param name="buildInfo">TCP 客户端创建命令参数</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocket">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocket.Sender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocket.CommandPool">
            <summary>
            命令索引池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocket.CommandIndex">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.#ctor(System.Net.IPAddress,System.Int32,AutoCSer.Log.ILog,System.Int32)">
            <summary>
            TCP 服务客户端套接字
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="log"></param>
            <param name="maxInputSize"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.SetSender(AutoCSer.Net.TcpServer.ClientSocketSender)">
            <summary>
            设置 TCP 服务客户端套接字数据发送
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.onReceive(AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            接收数据处理
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.onReceive">
            <summary>
            接收数据处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.OnReceive(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            接收数据处理
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.CancelKeep(AutoCSer.Net.TcpServer.ClientCommand.Command,System.Int32)">
            <summary>
            通知服务端取消保持回调
            </summary>
            <param name="command">TCP 客户端命令</param>
            <param name="commandIndex">命令会话标识</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.CancelKeep(System.Int32)">
            <summary>
            通知服务端取消保持回调
            </summary>
            <param name="commandIndex">会话标识</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.mergeError">
            <summary>
            合并命令处理错误
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.Merge(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            合并命令处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket.CustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            服务端自定义数据处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocket`1">
            <summary>
            TCP 服务客户端套接字
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocket`1.CommandClient">
            <summary>
            TCP 服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.#ctor(AutoCSer.Net.TcpServer.Client{`0},System.Net.IPAddress,System.Int32,System.Int32,System.Int32)">
            <summary>
            TCP 服务客户端套接字
            </summary>
            <param name="commandClient">TCP 服务客户端</param>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="createVersion"></param>
            <param name="maxInputSize">最大输入数据字节数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.#ctor(AutoCSer.Net.TcpServer.ClientSocket{`0})">
            <summary>
            TCP 服务客户端套接字
            </summary>
            <param name="socket">TCP 内部服务客户端套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.DisposeSocket">
            <summary>
            释放套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.mergeError">
            <summary>
            合并命令处理错误
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.CheckCreateVersion">
            <summary>
            套接字操作失败重新创建版本检测
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.CreateNew">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.CreateSleep">
            <summary>
            创建 TCP 服务客户端套接字失败休眠
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.verifyMethod">
            <summary>
            验证函数调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.commandIdentityAsync(System.Int32)">
            <summary>
            获取命令回调序号
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.checkDataLoopFixed(System.Boolean@)">
            <summary>
            检查命令数据
            </summary>
            <param name="isOnData">是否接收完数据执行</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.isOnDataLoopFixed">
            <summary>
            回调命令数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.isOnBigDataLoopFixed">
            <summary>
            回调命令数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.dataAsync(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.bigDataAsync(System.Int32)">
            <summary>
            获取数据
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.loop">
            <summary>
            循环处理命令回调
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocket`1.CustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            服务端自定义数据处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocketBase">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ipAddress">
            <summary>
            服务 IP 地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.MaxInputSize">
            <summary>
            最大输入数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.Log">
            <summary>
            日志处理接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.receiveAsyncEventArgs">
            <summary>
            接收数据套接字异步事件对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.OutputJsonSerializer">
            <summary>
            输出数据 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.OutputSerializer">
            <summary>
            输出数据二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.CheckTimer">
            <summary>
            客户端心跳检测定时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveMarkData">
            <summary>
            接收变换数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.Socket">
            <summary>
            TCP 套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.Sender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveBigBuffer">
            <summary>
            临时接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.receiveBufferSize">
            <summary>
            接收数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.socketError">
            <summary>
            套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.CreateVersion">
            <summary>
            服务更新版本号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.receiveBigBufferCount">
            <summary>
            临时接收数据缓冲区当前接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.CheckNext">
            <summary>
            下一个心跳检测
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.CheckPrevious">
            <summary>
            上一个心跳检测
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.CheckTimeoutSeconds">
            <summary>
            心跳检测超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.receiveCount">
            <summary>
            当前接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.receiveIndex">
            <summary>
            当前处理接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.receiveDataStart">
            <summary>
            接收数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.compressionDataSize">
            <summary>
            当前数据压缩后的字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.dataSize">
            <summary>
            当前数据字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveType">
            <summary>
            获取命令回调序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveCount">
            <summary>
            套接字接收数据次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveDeSerializer">
            <summary>
            回调数据二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.ReceiveJsonParser">
            <summary>
            回调数据 JSON 解析
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.serializeParameterIndex">
            <summary>
            序列化参数编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.isVerifyMethod">
            <summary>
            是否通过验证函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.isClose">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketBase.isSleep">
            <summary>
            重建连接是否休眠
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.#ctor(System.Net.IPAddress,System.Int32,AutoCSer.Log.ILog,System.Int32)">
            <summary>
            TCP 服务客户端套接字
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <param name="log"></param>
            <param name="maxInputSize"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.Create">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.verifyMethod``1(AutoCSer.Net.TcpServer.ClientBase{``0})">
            <summary>
            验证函数调用
            </summary>
            <typeparam name="attributeType"></typeparam>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.IsSocketVersion(AutoCSer.Net.TcpServer.ClientSocketBase@)">
            <summary>
            判断服务更新版本号是否有效
            </summary>
            <param name="oldSocket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.ResetCheck">
            <summary>
            重置心跳检测
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.Check">
            <summary>
            心跳检测
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.FreeCheck">
            <summary>
            弹出节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.FreeCheckReset">
            <summary>
            弹出节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.FreeOutputSerializer">
            <summary>
            释放输出数据序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.Serialize``1(AutoCSer.Net.TcpServer.CommandInfo,``0@)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="commandInfo"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.JsonSerialize``1(``0@)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.DeSerialize``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.ParseJson``1(AutoCSer.SubArray{System.Byte}@,``0@)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.FreeReceiveDeSerializer">
            <summary>
            释放回调数据反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketBase.CloseFree">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocketReceiveType">
            <summary>
            TCP 服务客户端套接字接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketReceiveType.CommandIdentity">
            <summary>
            获取命令回调序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketReceiveType.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketReceiveType.BigData">
            <summary>
            获取临时数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketReceiveType.CompressionData">
            <summary>
            获取压缩数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketReceiveType.CompressionBigData">
            <summary>
            获取临时压缩数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocketSender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSender.ClientSocket">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ClientSocketSender.IsSocket">
            <summary>
            套接字是否有效
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSender.Outputs">
            <summary>
            TCP 客户端输出信息链表
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender.#ctor(AutoCSer.Net.TcpServer.ClientSocket)">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <param name="socket">TCP 服务客户端套接字</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocketSender`1">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSender`1.commandClient">
            <summary>
            TCP 服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSender`1.remoteExpressionServerNodeIdChecker">
            <summary>
            远程表达式客户端检测服务端映射标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.#ctor(AutoCSer.Net.TcpServer.ClientSocket{`0})">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <param name="socket">TCP 服务客户端套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetKeep``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``0}}@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.Get``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``0}}@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitGet``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue{``0}@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetKeep``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``1}}@,``0@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.Get``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``1}}@,``0@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitGet``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue{``1}@,``0@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitGet``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue{``0}@,``0@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="outputParameter">输出参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitGet``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue{``1}@,``0@,``1@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <param name="outputParameter">输出参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.Call``1(AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue},``0@)">
            <summary>
            TCP调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallKeep``1(AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue},``0@)">
            <summary>
            TCP调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.Call(AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue})">
            <summary>
            TCP调用
            </summary>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallKeep(AutoCSer.Net.TcpServer.CommandInfo,System.Action{AutoCSer.Net.TcpServer.ReturnValue})">
            <summary>
            TCP调用
            </summary>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitCall``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue@,``0@)">
            <summary>
            TCP调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitCall``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue{``1}@,``0@)">
            <summary>
            TCP调用（用于代码生成编译）
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.WaitCall(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.AutoWaitReturnValue@)">
            <summary>
            TCP调用
            </summary>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallOnly``1(AutoCSer.Net.TcpServer.CommandInfo,``0@)">
            <summary>
            TCP调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallOnly(AutoCSer.Net.TcpServer.CommandInfo)">
            <summary>
            TCP调用
            </summary>
            <param name="identityCommand">命令信息</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAwaiter``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``1}},``0@,``1@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <param name="outputParameter">输出参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAwaiter``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``0}},``0@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="outputParameter">输出参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAwaiter``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.Awaiter,``0@)">
            <summary>
            TCP调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAwaiter``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.Callback{AutoCSer.Net.TcpServer.ReturnValue{``1}},``0@)">
            <summary>
            TCP调用（用于代码生成编译）
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAwaiter(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.Awaiter)">
            <summary>
            TCP调用
            </summary>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.push(AutoCSer.Net.TcpServer.ClientCommand.Command)">
            <summary>
            添加命令
            </summary>
            <param name="command">当前命令</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.Check">
            <summary>
            心跳检测
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CancelKeep(System.Int32)">
            <summary>
            取消保持回调
            </summary>
            <param name="commandIndex"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpressionNodeId(AutoCSer.RemoteType[])">
            <summary>
            获取远程表达式服务端节点标识
            </summary>
            <param name="types">表达式服务端节点类型集合</param>
            <returns>表达式服务端节点标识集合</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpressionClientNode(AutoCSer.Net.RemoteExpression.Node,AutoCSer.Net.RemoteExpression.ClientNode@)">
            <summary>
            获取客户端远程表达式节点
            </summary>
            <param name="node">远程表达式节点</param>
            <param name="clientNode">客户端远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpressionClientNode(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取客户端远程表达式节点
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>客户端远程表达式节点</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpressionClientNodeParameter``1(AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            获取客户端远程表达式参数节点
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
            <param name="node">远程表达式参数节点</param>
            <returns>客户端远程表达式参数节点</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.getRemoteExpression(AutoCSer.Net.RemoteExpression.ClientNode@)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallRemoteExpression(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpression``1(AutoCSer.Net.RemoteExpression.Node{``0})">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpression(AutoCSer.Net.RemoteExpression.ClientNode)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.getRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.ClientNode@)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.Node)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetRemoteExpressionAwaiter(AutoCSer.Net.RemoteExpression.ClientNode)">
            <summary>
            获取远程表达式数据
            </summary>
            <param name="node">远程表达式节点</param>
            <returns>返回值类型</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.BuildOutput">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAsync``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.TaskAsyncReturnValue{``1},``0@,``1@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="inputParameter">输入参数</param>
            <param name="outputParameter">输出参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.GetAsync``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.TaskAsyncReturnValue{``0},``0@)">
            <summary>
            TCP调用并返回参数值
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="callback">异步回调</param>
            <param name="outputParameter">输出参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallAsync``1(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.TaskAsyncReturnValue,``0@)">
            <summary>
            TCP调用
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallAsync``2(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.TaskAsyncReturnValue{``1},``0@)">
            <summary>
            TCP调用（用于代码生成编译）
            </summary>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
            <typeparam name="outputParameterType">输入参数类型</typeparam>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <param name="inputParameter">输入参数</param>
            <returns>保持回调</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.CallAsync(AutoCSer.Net.TcpServer.CommandInfo,AutoCSer.Net.TcpServer.TaskAsyncReturnValue)">
            <summary>
            TCP调用
            </summary>
            <param name="identityCommand">命令信息</param>
            <param name="onCall">回调委托</param>
            <returns>保持回调</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocketSender`1.RemoteExpressionServerNodeIdChecker">
            <summary>
            远程表达式客户端检测服务端映射标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSender`1.RemoteExpressionServerNodeIdChecker.Sender">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSender`1.RemoteExpressionServerNodeIdChecker.Get(AutoCSer.RemoteType[])">
            <summary>
            获取服务端映射标识集合
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientSocketSenderBase">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSenderBase.OutputWaitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSenderBase.SendMarkData">
            <summary>
            发送变换数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSenderBase.SendCount">
            <summary>
            套接字发送数据次数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSenderBase.#ctor(AutoCSer.Net.TcpServer.ClientSocketBase)">
            <summary>
            TCP 服务客户端套接字数据发送
            </summary>
            <param name="socket">TCP 服务客户端套接字</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSenderBase.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSenderBase.Check">
            <summary>
            心跳检测
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSenderBase.VirtualBuildOutput">
            <summary>
            创建输出
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ClientSocketSenderBase.nullCallback(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            默认空回调委托
            </summary>
            <param name="value"></param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientSocketSenderBase.NullCallback">
            <summary>
            默认空回调委托
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ClientTaskType">
            <summary>
            客户端任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientTaskType.Synchronous">
            <summary>
            非任务同步阻塞模式，直接在 Socket 接收数据的 IO 线程中处理以避免线程调度，适应于快速结束的非阻塞函数；需要知道的是这种模式下如果产生阻塞会造成 Socket 停止接收数据。
            如果不小心在回调处理事件中又使用同步的方式调用了服务端，那么客户端死锁是必然的。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientTaskType.ThreadPool">
            <summary>
            系统线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientTaskType.Timeout">
            <summary>
            公用任务池，默认最大并行数量为 AutoCSer.Threading.Pub.CpuCount * 32，定时检测任务超时调度线程（默认为 10 毫秒）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientTaskType.TcpTask">
            <summary>
            TCP 任务池，适用于 CPU 计算类型任务，默认最大并行数量为 AutoCSer.Threading.Pub.CpuCount，定时检测任务超时调度线程（默认为 10 毫秒）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ClientTaskType.TcpQueue">
            <summary>
            TCP 任务队列，适应于无阻塞的快速任务处理。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandBase">
            <summary>
            TCP 组件基类
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.Log">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.SendBufferMaxSize">
            <summary>
            发送数据缓存区最大字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.MinCompressSize">
            <summary>
            压缩启用最低字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.SendNewBufferCount">
            <summary>
            发送数据 new 缓冲区次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.Host">
            <summary>
            服务主机名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.IpAddress">
            <summary>
            服务 IP 地址
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.Port">
            <summary>
            服务端口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.IsDisposed">
            <summary>
            是否已经关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBase.ReceiveNewBufferCount">
            <summary>
            接收数据 new 缓冲区次数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.#ctor(System.String,System.Int32,System.String,System.Int32,System.Int32,AutoCSer.Log.ILog)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="host">监听主机名称</param>
            <param name="port">监听端口</param>
            <param name="serviceName">服务名称</param>
            <param name="sendBufferMaxSize">发送数据缓存区最大字节大小</param>
            <param name="minCompressSize">压缩启用最低字节数量</param>
            <param name="log">日志接口</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.set(System.String,System.Int32)">
            <summary>
            设置主机名称
            </summary>
            <param name="host"></param>
            <param name="port"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.check(System.Net.IPAddress,System.Int32)">
            <summary>
            检测主机名称是否可用
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.AddLog(System.Exception)">
            <summary>
            添加日志
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.CloseClient(System.Net.Sockets.Socket)">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.CloseClientNotNull(System.Net.Sockets.Socket)">
            <summary>
            关闭套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.CloseServer(System.Net.Sockets.Socket)">
            <summary>
            关闭套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.Mark(AutoCSer.SubArray{System.Byte}@,System.UInt64)">
            <summary>
            变换数据
            </summary>
            <param name="data"></param>
            <param name="markData"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.Mark(System.Byte[],System.UInt64,System.Int32,System.Int32)">
            <summary>
            变换数据
            </summary>
            <param name="data"></param>
            <param name="markData"></param>
            <param name="startIndex"></param>
            <param name="dataLength"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.Mark(System.Byte*,System.UInt64,System.Int32)">
            <summary>
            变换数据
            </summary>
            <param name="data"></param>
            <param name="markData"></param>
            <param name="dataLength"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.Mark32(System.Byte*,System.UInt64,System.Int32)">
            <summary>
            变换数据
            </summary>
            <param name="data"></param>
            <param name="markData"></param>
            <param name="dataLength"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.Mark64(System.Byte*,System.UInt64,System.Int32)">
            <summary>
            变换数据
            </summary>
            <param name="data"></param>
            <param name="markData"></param>
            <param name="dataLength"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.CompileSerialize(System.Type[],System.Type[],System.Type[],System.Type[],System.Type[],System.Type[])">
            <summary>
            序列化预编译
            </summary>
            <param name="simpleDeSerializeTypes"></param>
            <param name="simpleSerializeTypes"></param>
            <param name="deSerializeTypes"></param>
            <param name="serializeTypes"></param>
            <param name="jsonDeSerializeTypes"></param>
            <param name="jsonSerializeTypes"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.ClientCompileSerialize(System.Type[],System.Type[],System.Type[],System.Type[],System.Type[],System.Type[])">
            <summary>
            序列化预编译
            </summary>
            <param name="simpleSerializeTypes"></param>
            <param name="simpleDeSerializeTypes"></param>
            <param name="serializeTypes"></param>
            <param name="deSerializeTypes"></param>
            <param name="jsonSerializeTypes"></param>
            <param name="jsonDeSerializeTypes"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBase.GetRegisterClient``1(``0,System.String,AutoCSer.Net.TcpRegister.Client@)">
            <summary>
            获取 TCP 内部注册服务客户端
            </summary>
            <typeparam name="serverAttributeType"></typeparam>
            <param name="attribute"></param>
            <param name="tcpRegisterName"></param>
            <param name="tcpRegisterClient"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandBuffer">
            <summary>
            TCP 组件基类
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBuffer.ReceiveBufferPool">
            <summary>
            接受数据缓存区池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBuffer.SendBufferPool">
            <summary>
            发送数据缓存区池
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBuffer.#ctor(System.String,System.Int32,System.String,AutoCSer.SubBuffer.Pool,AutoCSer.SubBuffer.Pool,System.Int32,System.Int32,AutoCSer.Log.ILog)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="host">监听主机名称</param>
            <param name="port">监听端口</param>
            <param name="serviceName">服务名称</param>
            <param name="receiveBufferPool">接受数据缓存区池</param>
            <param name="sendBufferPool">发送接受数据缓存区池</param>
            <param name="sendBufferMaxSize">发送数据缓存区最大字节大小</param>
            <param name="minCompressSize">压缩启用最低字节数量</param>
            <param name="log">日志接口</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandBuffer`1">
            <summary>
            TCP 组件基类
            </summary>
            <typeparam name="attributeType"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandBuffer`1.Attribute">
            <summary>
            TCP 服务调用配置
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandBuffer`1.#ctor(`0,AutoCSer.SubBuffer.Size,AutoCSer.SubBuffer.Size,System.Int32,AutoCSer.Log.ILog)">
            <summary>
            TCP 组件基类
            </summary>
            <param name="attribute">TCP 服务调用配置</param>
            <param name="receiveBufferSize">接受数据缓冲区字节大小</param>
            <param name="sendBufferSize">发送数据缓冲区字节大小</param>
            <param name="sendBufferMaxSize">发送数据缓存区最大字节大小</param>
            <param name="log">日志接口</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandFlags">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandFlags.None">
            <summary>
            缺省空参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandFlags.JsonSerialize">
            <summary>
            是否采用JSON序列化,否则使用二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandFlags.NullData">
            <summary>
            空数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandFlags._">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandInfo">
            <summary>
            客户端命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfo.IsKeepCallback">
            <summary>
            是否保持异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfo.IsSendOnly">
            <summary>
            客户端是否仅仅发送数据(不需要应答)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfo.TaskType">
            <summary>
            任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfo.MaxDataSize">
            <summary>
            最大命令数据字节长度
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandInfo.CheckMaxDataSize(System.Int32)">
            <summary>
            更新最大命令数据字节长度
            </summary>
            <param name="size">命令数据字节长度</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandInfoBase">
            <summary>
            客户端命令信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfoBase.Command">
            <summary>
            TCP 调用命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfoBase.CommandFlags">
            <summary>
            命令参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfoBase.InputParameterIndex">
            <summary>
            输入参数编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfoBase.IsVerifyMethod">
            <summary>
            是否验证函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfoBase.IsSimpleSerializeInputParamter">
            <summary>
            是否简单序列化输入参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandInfoBase.IsSimpleSerializeOutputParamter">
            <summary>
            是否简单序列化输出参数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandPool">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.minArrayBitSize">
            <summary>
            命令数组最小二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.maxArrayBitSize">
            <summary>
            命令数组最大二进制长度
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CommandPool.CommandLink">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.CommandLink.Command">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.CommandLink.Next">
            <summary>
            下一个命令序号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.CommandLink.Set(AutoCSer.Net.TcpServer.ClientCommand.Command)">
            <summary>
            设置客户端命令
            </summary>
            <param name="command">客户端命令</param>
            <returns>下一个命令序号</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.CommandLink.Get(System.Int32,AutoCSer.Net.TcpServer.ClientCommand.Command@)">
            <summary>
            获取客户端命令
            </summary>
            <param name="nextIndex"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.CommandLink.Cancel(System.Int32)">
            <summary>
            释放客户端命令
            </summary>
            <param name="nextIndex">下一个命令序号</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.CommandLink.Cancel(AutoCSer.Net.TcpServer.ClientCommand.Command,System.Int32)">
            <summary>
            释放客户端命令
            </summary>
            <param name="command"></param>
            <param name="nextIndex"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.log">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.arrays">
            <summary>
            客户端命令池
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.CommandPool.Item(System.Int32)">
            <summary>
            获取客户端命令
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.Array">
            <summary>
            第一个客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.arraySizeAnd">
            <summary>
            数组长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.bitSize">
            <summary>
            数组二进制长度
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.arrayCount">
            <summary>
            当前数组数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.commandCount">
            <summary>
            命令地址数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.pushArray">
            <summary>
            客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.freeIndex">
            <summary>
            空闲命令位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.pushArrayIndex">
            <summary>
            客户端命令池数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.keepCallbackCommand">
            <summary>
            保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.getArray">
            <summary>
            客户端命令池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.keepCallbackCommandIndex">
            <summary>
            保持回调命令会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.getArrayIndex">
            <summary>
            客户端命令池数组索引
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.freeEndIndex">
            <summary>
            空闲命令结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.freeEndIndexLock">
            <summary>
            空闲命令结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CommandPool.isErrorLog">
            <summary>
            是否输出过错误日志 活动会话数量过多
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.#ctor(System.Int32,System.Int32,AutoCSer.Log.ILog)">
            <summary>
            客户端命令池
            </summary>
            <param name="bitSize"></param>
            <param name="freeIndex"></param>
            <param name="log"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.Push(AutoCSer.Net.TcpServer.ClientCommand.Command)">
            <summary>
            添加客户端命令
            </summary>
            <param name="command">客户端命令</param>
            <returns>客户端命令索引位置</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.create(System.Int32)">
            <summary>
            新建客户端命令池
            </summary>
            <param name="currentIndex">当前空闲命令位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.GetCommand(System.Int32)">
            <summary>
            获取客户端命令
            </summary>
            <param name="index">客户端命令索引位置</param>
            <returns>客户端命令</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.Cancel(System.Int32)">
            <summary>
            取消客户端命令
            </summary>
            <param name="index">客户端命令索引位置</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.Cancel(System.Int32,AutoCSer.Net.TcpServer.ClientCommand.Command)">
            <summary>
            取消客户端命令
            </summary>
            <param name="index"></param>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CommandPool.Free(AutoCSer.Net.TcpServer.ClientCommand.CommandBase,AutoCSer.Net.TcpServer.ClientCommand.CommandBase,System.Int32)">
            <summary>
            释放所有命令
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CustomServerCall">
            <summary>
            自定义 TCP 服务器端同步调用任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomServerCall.Sender">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomServerCall.Task">
            <summary>
            自定义任务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall">
            <summary>
            自定义 TCP 服务器端同步调用任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.sender">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.task">
            <summary>
            自定义任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.#ctor(AutoCSer.Net.TcpServer.ServerSocketSenderBase,System.Action)">
            <summary>
            自定义 TCP 服务器端同步调用任务
            </summary>
            <param name="sender"></param>
            <param name="task"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.GetResult">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomTaskAsyncServerCall.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.CustomWaitServerCall">
            <summary>
            自定义 TCP 服务器端同步调用任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomWaitServerCall.Sender">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomWaitServerCall.Task">
            <summary>
            自定义任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.CustomWaitServerCall.Wait">
            <summary>
            等待锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.CustomWaitServerCall.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.Method`3">
            <summary>
            TCP 函数信息
            </summary>
            <summary>
            TCP 函数信息
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
            <typeparam name="methodAttributeType">TCP 调用函数配置</typeparam>
            <typeparam name="serverSocketSenderType">TCP 服务套接字数据发送</typeparam>
            <summary>
            TCP 函数信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.Method`3.ClientBuilder">
            <summary>
            创建 TCP 客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`3.ClientBuilder.Metadata">
            <summary>
            TCP 客户端元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`3.ClientBuilder.Commands">
            <summary>
            客户端命令信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`3.ClientBuilder.Build(System.Type,AutoCSer.Net.TcpServer.ServerBaseAttribute,AutoCSer.Net.TcpServer.Emit.Method{`0,`1,`2}[],System.Reflection.MethodInfo)">
            <summary>
            创建 TCP 客户端
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
            <param name="methods"></param>
            <param name="getCommandMethod"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`3.IsClientSendOnly">
            <summary>
            服务端需要应答客户端请求
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`3.#ctor(System.Type,System.Reflection.MethodInfo,`0,`1,System.Boolean)">
            <summary>
            TCP 函数信息
            </summary>
            <param name="type">接口类型</param>
            <param name="method">方法信息</param>
            <param name="attribute">TCP 服务器端配置</param>
            <param name="serverMethodAttribute">TCP 调用函数配置</param>
            <param name="isClient">是否客户端</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`3.#ctor(System.Type,System.Reflection.PropertyInfo,`0,`1,System.Boolean)">
            <summary>
            TCP 函数信息
            </summary>
            <param name="type">接口类型</param>
            <param name="property">属性信息</param>
            <param name="attribute">TCP 服务器端配置</param>
            <param name="serverMethodAttribute">TCP 调用函数配置</param>
            <param name="isSet">是否设置</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`3.#ctor(AutoCSer.Net.TcpServer.Emit.Method{`0,`1,`2},`1)">
            <summary>
            TCP 函数信息
            </summary>
            <param name="propertyGetMethod">属性获取 TCP 函数信息</param>
            <param name="serverMethodAttribute">TCP 调用函数配置</param>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`3.IsKeepCallback">
            <summary>
            是否保持异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`3.IsServerBuildOutputThread">
            <summary>
            创建输出是否开启线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`3.CheckRef(System.String@)">
            <summary>
            引用参数检测
            </summary>
            <param name="errorString"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.Method`3.ServerBuilder">
            <summary>
            创建 TCP 服务端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`3.ServerBuilder.Metadata">
            <summary>
            TCP 服务端元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`3.ServerBuilder.Outputs">
            <summary>
            服务端输出信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`3.ServerBuilder.Build(System.Type,AutoCSer.Net.TcpServer.ServerAttribute,System.Type,System.Type,System.Type[],AutoCSer.Net.TcpServer.Emit.Method{`0,`1,`2}[])">
            <summary>
            创建 TCP 服务端
            </summary>
            <param name="type"></param>
            <param name="attribute"></param>
            <param name="serverInterfaceType"></param>
            <param name="serverCallType"></param>
            <param name="constructorParameterTypes"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ClientCallback">
            <summary>
            客户端回调转换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientCallback.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientCallback.#ctor(System.Func{AutoCSer.Net.TcpServer.ReturnValue,System.Boolean})">
            <summary>
            客户端回调转换
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientCallback.call(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            客户端回调
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientCallback.Get(System.Func{AutoCSer.Net.TcpServer.ReturnValue,System.Boolean})">
            <summary>
            客户端回调转换
            </summary>
            <param name="callback">客户端回调委托</param>
            <returns>客户端回调转换</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ClientCallback`1">
            <summary>
            客户端回调转换
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientCallback`1.callback">
            <summary>
            客户端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientCallback`1.#ctor(System.Func{AutoCSer.Net.TcpServer.ReturnValue{`0},System.Boolean})">
            <summary>
            客户端回调转换
            </summary>
            <param name="callback">客户端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientCallback`1.call(AutoCSer.Net.TcpServer.ReturnValue{`0})">
            <summary>
            客户端回调
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientCallback`1.Get(System.Func{AutoCSer.Net.TcpServer.ReturnValue{`0},System.Boolean})">
            <summary>
            客户端回调转换
            </summary>
            <param name="callback">客户端回调委托</param>
            <returns>客户端回调转换</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase">
            <summary>
            TCP 客户端元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.TcpClientName">
            <summary>
            TCP 服务客户端属性名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.SenderType">
            <summary>
            TCP 客户端套接字发送数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.MethodClientType">
            <summary>
            TCP 客户端基类类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientTypeName">
            <summary>
            TCP 客户端类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.MethodClientGetTcpClientMethod">
            <summary>
            TCP 客户端基类获取 TCP 客户端属性函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientGetSenderMethod">
            <summary>
            TCP 服务客户端同步调用套接字发送对象函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientSocketSenderCallOnlyMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientSocketSenderCallOnlyInputMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientSocketSenderWaitCallMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientSocketSenderWaitCallInputMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientSocketSenderWaitGetMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.ClientSocketSenderWaitGetInputMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientMetadataBase.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            TCP 客户端元数据
            </summary>
            <param name="clientType">TCP 客户端类型</param>
            <param name="senderType">TCP 客户端套接字发送数据类型</param>
            <param name="methodClientType">TCP 客户端基类类型</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ClientMetadata">
            <summary>
            TCP 客户端元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderCallMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderCallInputMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderCallKeepMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderCallKeepInputMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderGetAsynchronousMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderGetInputAsynchronousMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderGetKeepAsynchronousMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientSocketSenderGetKeepInputAsynchronousMethod">
            <summary>
            TCP 服务客户端调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientGetCallbackMethod">
            <summary>
            TCP 服务客户端获取异步回调函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ClientMetadata.#ctor(System.Type,System.Type,System.Type)">
            <summary>
            TCP 客户端元数据
            </summary>
            <param name="clientType">TCP 客户端类型</param>
            <param name="senderType">TCP 客户端套接字发送数据类型</param>
            <param name="methodClientType">TCP 客户端基类类型</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ClientCallbackGetMethod">
            <summary>
            TCP 客户端回调转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.AutoWaitReturnValuePushNotNullMethod">
            <summary>
            同步等待调用添加节点函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.AutoWaitReturnValuePopMethod">
            <summary>
            TCP 服务客户端获取同步等待调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ReturnValueTypeField">
            <summary>
            返回值类型字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ReturnTypeStrings">
            <summary>
            返回值类型字符串集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ClientMetadata.ReturnTypeStringsField">
            <summary>
            返回值类型字符串集合字段信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.Method`4">
            <summary>
            TCP 函数信息
            </summary>
            <typeparam name="methodType">TCP 函数信息类型</typeparam>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
            <typeparam name="methodAttributeType">TCP 调用函数配置</typeparam>
            <typeparam name="serverSocketType">TCP 服务套接字</typeparam>
            <summary>
            TCP 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Type">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.MethodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.ServerAttribute">
            <summary>
            TCP 服务器端配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Attribute">
            <summary>
            TCP调用配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.ReturnValueType">
            <summary>
            真实返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`4.IsReturnType">
            <summary>
            函数是否存在同步返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Parameters">
            <summary>
            参数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.OutputParameters">
            <summary>
            输出参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.ClientParameter">
            <summary>
            客户端标识参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.IsAsynchronousCallback">
            <summary>
            是否异步回调方法
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`4.IsVerifyMethodAsynchronous">
            <summary>
            验证方法是否支持异步
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.IsClientAsynchronousCallback">
            <summary>
            是否客户端异步回调方法
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.#ctor(System.Type,System.Reflection.MethodInfo,`1,`2,System.Boolean)">
            <summary>
            TCP 函数信息
            </summary>
            <param name="type">接口类型</param>
            <param name="method">方法信息</param>
            <param name="attribute">TCP 服务器端配置</param>
            <param name="serverMethodAttribute">TCP 调用函数配置</param>
            <param name="isClient">是否客户端</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.IsPropertySetMethod">
            <summary>
            是否属性设置 TCP 函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.#ctor(System.Type,System.Reflection.PropertyInfo,`1,`2,System.Boolean)">
            <summary>
            TCP 函数信息
            </summary>
            <param name="type">接口类型</param>
            <param name="property">属性信息</param>
            <param name="attribute">TCP 服务器端配置</param>
            <param name="serverMethodAttribute">TCP 调用函数配置</param>
            <param name="isSet">是否设置</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.PropertySetMethod">
            <summary>
            属性设置 TCP 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.PropertyGetMethod">
            <summary>
            属性获取 TCP 函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.PropertyBuilder">
            <summary>
            属性创建
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`4.ServerTask">
            <summary>
            服务端任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`4.IsMethodServerCall">
            <summary>
            是否定义服务器端调用
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.Method`4.IsJsonSerialize">
            <summary>
            是否使用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.OutputParameterType">
            <summary>
            输出参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.ParameterType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.CheckRef(System.String@)">
            <summary>
            引用参数检测
            </summary>
            <param name="errorString"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.CheckIsVerifyMethod(System.String@)">
            <summary>
            是否验证方法
            </summary>
            <param name="errorString">错误字符串提示信息</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.SetParameterType">
            <summary>
            设置参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.DoCommandLabel">
            <summary>
            执行命令 Switch
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.CheckIdentity(AutoCSer.LeftArray{`0}@,System.String@)">
            <summary>
            检测方法序号
            </summary>
            <param name="methodIndexs">方法集合</param>
            <param name="errorString">错误字符串提示信息</param>
            <returns>方法集合,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.Compare(`0,`0)">
            <summary>
            TCP 函数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.compare(System.Reflection.ParameterInfo[],System.Reflection.ParameterInfo[])">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.Method`4.Getter">
            <summary>
            获取 TCP 服务函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.DefaultServerAttribute">
            <summary>
            默认 TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.ErrorString">
            <summary>
            错误字符串提示信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.Methods">
            <summary>
            TCP 函数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.IsClient">
            <summary>
            是否 TCP 服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.get(System.Type,System.Reflection.MethodInfo,`1,`2)">
            <summary>
            获取 TCP 函数
            </summary>
            <param name="type"></param>
            <param name="method"></param>
            <param name="serverAttribute"></param>
            <param name="methodAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.get(System.Type,`1,`2,System.Boolean,AutoCSer.LeftArray{`0}@)">
            <summary>
            获取 TCP 函数
            </summary>
            <param name="type"></param>
            <param name="serverAttribute"></param>
            <param name="methodAttribute"></param>
            <param name="isClient"></param>
            <param name="methods"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.Method`4.Getter.Get(System.Type)">
            <summary>
            获取 TCP 服务函数信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.MethodClient">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.MethodClient._isDisposed_">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.MethodClient`1">
            <summary>
            TCP 客户端
            </summary>
            <typeparam name="clientType">TCP 服务客户端类型</typeparam>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.Emit.MethodClient`1._TcpClient_">
            <summary>
            TCP 服务客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.MethodClient`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ParameterFlag">
            <summary>
            TCP 参数类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterFlag.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterFlag.IsSerializeReferenceMember">
            <summary>
            是否检测相同的引用成员
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterFlag.IsSerializeBox">
            <summary>
            是否序列化包装处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ParameterHash">
            <summary>
            TCP 参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterHash.parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterHash.returnType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterHash.flag">
            <summary>
            TCP 参数类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterHash.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterHash.#ctor(System.Reflection.ParameterInfo[],System.Type,AutoCSer.Net.TcpServer.Emit.ParameterFlag)">
            <summary>
            TCP 参数类型
            </summary>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
            <param name="flag">TCP 参数类型配置</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterHash.Equals(AutoCSer.Net.TcpServer.Emit.ParameterHash)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterHash.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterHash.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ParameterType">
            <summary>
            TCP 参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.Type">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.Index">
            <summary>
            类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.IsSimpleSerialize">
            <summary>
            是否简单序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.IsInitobj">
            <summary>
            是否需要初始化对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.fields">
            <summary>
            参数字段集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterType.setFields(System.Reflection.FieldInfo[])">
            <summary>
            设置参数字段集合
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterType.GetField(System.String)">
            <summary>
            获取参数字段
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterType.compare(System.Reflection.ParameterInfo,System.Reflection.ParameterInfo)">
            <summary>
            参数排序
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.serializeAttributeConstructorInfo">
            <summary>
            二进制数据序列化类型配置构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.boxSerializeAttributeConstructorInfo">
            <summary>
            序列化包装处理配置构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.jsonIgnoreMemberAttributeConstructorInfo">
            <summary>
            JSON 序列化成员配置构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.trueParameter">
            <summary>
            逻辑真值参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.falseParameter">
            <summary>
            逻辑假值参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.returnInterfaceTypes">
            <summary>
            返回值接口类型 AutoCSer.Net.IReturnParameter[]
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.returnInterfaces">
            <summary>
            返回值接口类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.returnTypes">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.types">
            <summary>
            TCP 参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.typeIndex">
            <summary>
            TCP 参数类型编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ParameterType.typeLock">
            <summary>
            TCP 参数类型集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterType.Get(System.Reflection.ParameterInfo[],System.Type,System.Boolean,System.Boolean)">
            <summary>
            获取 TCP 参数类型
            </summary>
            <param name="parameters">参数集合</param>
            <param name="returnType">类型</param>
            <param name="isSerializeReferenceMember">是否检测相同的引用成员</param>
            <param name="isSerializeBox">IsSerializeBox</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ParameterType.IsInputParameter(System.Reflection.ParameterInfo)">
            <summary>
            判断是否有效输入参数
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ServerCallback`1">
            <summary>
            服务端回调转换
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerCallback`1.callback">
            <summary>
            服务端回调委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ServerCallback`1.#ctor(System.Func{AutoCSer.Net.TcpServer.ReturnValue{`0},System.Boolean})">
            <summary>
            服务端回调转换
            </summary>
            <param name="callback">服务端回调委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ServerCallback`1.call(`0)">
            <summary>
            服务端回调
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ServerCallback`1.Get(System.Func{AutoCSer.Net.TcpServer.ReturnValue{`0},System.Boolean})">
            <summary>
            服务端回调转换
            </summary>
            <param name="callback">服务端回调委托</param>
            <returns>服务端回调转换</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase">
            <summary>
            TCP 服务端元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerType">
            <summary>
            服务端类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.SenderType">
            <summary>
            TCP 服务套接字发送数据类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerCallType">
            <summary>
            TCP 服务器端同步调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerTypeName">
            <summary>
            服务端类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerCallTypeName">
            <summary>
            TCP 服务器端同步调用类型名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerCallSenderField">
            <summary>
            TCP 服务器端同步调用套接字发送对象字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerCallServerValueField">
            <summary>
            TCP 服务器端同步调用套接字服务器目标对象字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerCallPushMethod">
            <summary>
            TCP 服务器端同步调用入池函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.ServerCallCallMethod">
            <summary>
            TCP 服务器端同步调用函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.MethodParameterTypes">
            <summary>
            服务端调用参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.DoCommandParameterTypes">
            <summary>
            命令处理参数类型集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.Identity">
            <summary>
            生成标识
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ServerMetadataBase.#ctor(System.Type,System.Type,System.Type,System.Type)">
            <summary>
            TCP 服务元数据
            </summary>
            <param name="serverType">TCP 服务类型</param>
            <param name="serverAttributeType">TCP 服务配置类型</param>
            <param name="senderType">TCP 服务套接字发送数据类型</param>
            <param name="serverCallType">TCP 服务器端同步调用类型</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Emit.ServerMetadata">
            <summary>
            TCP 服务端元数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerConstructorInfo">
            <summary>
            TCP 服务构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderPushMethod">
            <summary>
            TCP 服务器端同步调用套接字发送数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderPushReturnValueMethod">
            <summary>
            TCP 服务器端同步调用套接字发送数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderPushNoThreadMethod">
            <summary>
            TCP 服务器端同步调用套接字发送数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderPushOutputMethod">
            <summary>
            TCP 服务器端同步调用套接字发送数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderPushOutputRefMethod">
            <summary>
            TCP 服务器端同步调用套接字发送数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderPushReturnTypeMethod">
            <summary>
            TCP 服务器端同步调用套接字发送数据函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderAddLogMethod">
            <summary>
            TCP 服务器端同步调用套接字错误日志处理函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderGetCallbackMethod">
            <summary>
            TCP 服务器端同步调用套接字获取异步回调函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderGetCallbackReturnMethod">
            <summary>
            TCP 服务器端同步调用套接字获取异步回调函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Emit.ServerMetadata.#ctor(System.Type,System.Type,System.Type,System.Type)">
            <summary>
            TCP 服务元数据
            </summary>
            <param name="serverType">TCP 服务类型</param>
            <param name="serverAttributeType">TCP 服务配置类型</param>
            <param name="senderType">TCP 服务套接字发送数据类型</param>
            <param name="serverCallType">TCP 服务器端同步调用类型</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerCallCommandIndexField">
            <summary>
            TCP 服务器端同步调用会话标识字段信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderGetIsSocketMethod">
            <summary>
            TCP 服务器端同步调用套接字发送对象套接字是否有效函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderSetVerifyMethod">
            <summary>
            TCP 服务器端同步调用套接字发送对象通过函数验证处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ServerSocketSenderDeSerializeMethod">
            <summary>
            TCP 服务器端同步调用套接字发送对象通过函数验证处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Emit.ServerMetadata.ReturnValueTypeField">
            <summary>
            返回值类型字段信息
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.IServerKeepCallback">
            <summary>
            TCP 服务器端异步保持调用
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.IServerKeepCallback.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ISetTcpServer`2">
            <summary>
            TCP命令服务接口
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ISetTcpServer`2.SetTcpServer(`0)">
            <summary>
            设置 TCP 命令服务端
            </summary>
            <param name="commandServer">TCP 命令服务端</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.KeepCallback">
            <summary>
            TCP 调用客户端回调保持
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallback.command">
            <summary>
            客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallback.commandIndex">
            <summary>
            命令会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallback.keepLock">
            <summary>
            回调保持访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallback.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.KeepCallback.#ctor(AutoCSer.Net.TcpServer.ClientCommand.Command)">
            <summary>
            客户端命令
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.KeepCallback.SetCommandIndex(System.Int32)">
            <summary>
            设置命令会话标识
            </summary>
            <param name="commandIndex">命令会话标识</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.KeepCallback.BuildCancel">
            <summary>
            取消回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.KeepCallback.Cancel">
            <summary>
            客户端强制终止回调（不通知服务端）
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.KeepCallback.Dispose">
            <summary>
            通知服务端终止回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute">
            <summary>
            保持异步回调 TCP 调用函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute.IsClientSynchronous">
            <summary>
            默认为 false 表示不生成同步调用代理函数，同步模式使用的是 Monitor.Wait，会占用一个工作线程，并存在线程调度开销，优点是使用方便、安全。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute.GetIsClientSynchronous">
            <summary>
            是否生成同步调用代理函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute.IsClientAsynchronous">
            <summary>
            默认为 true 表示生成异步调用代理函数。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute.GetIsClientAsynchronous">
            <summary>
            是否生成异步调用代理函数。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute.IsKeepCallback">
            <summary>
            保持异步回调，1 问多答的交互模式（客户端一个请求，服务器端可以任意多次回调回应）。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.KeepCallbackMethodAttribute.GetIsKeepCallback">
            <summary>
            保持异步回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.MethodAttribute">
            <summary>
            TCP 调用函数配置
            </summary>
            <summary>
            TCP 调用函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.ServerTask">
            <summary>
            服务端任务类型，默认为 Timeout
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.ServerTaskType">
            <summary>
            服务端任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.ClientTask">
            <summary>
            客户端异步任务类型，默认为 Timeout
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.ClientTaskType">
            <summary>
            客户端异步任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsClientSynchronous">
            <summary>
            默认为 true 表示生成同步调用代理函数，同步模式使用的是 Monitor.Wait，会占用一个工作线程，并存在线程调度开销，优点是使用方便、安全。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.GetIsClientSynchronous">
            <summary>
            是否生成同步调用代理函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsClientAsynchronous">
            <summary>
            默认为 false 表示不生成异步调用代理函数。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.GetIsClientAsynchronous">
            <summary>
            是否生成异步调用代理函数。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsKeepCallback">
            <summary>
            保持异步回调，1 问多答的交互模式（客户端一个请求，服务器端可以任意多次回调回应）。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.GetIsKeepCallback">
            <summary>
            保持异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsClientSendOnly">
            <summary>
            默认为 false 表示服务端需要应答客户端请求，否则仅仅是客户端发送数据到服务端（服务端不应答）。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.GetIsClientSendOnly">
            <summary>
            客户端是否仅发送数据，无需服务端应答
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsClientAwaiter">
            <summary>
            默认为 true 表示生成 await 代理，不支持 ref / out
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.GetIsClientAwaiter">
            <summary>
            是否支持 async Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsServerAsynchronousCallbackBuildOutputThread">
            <summary>
            默认为 true 表示服务端异步回调创建输出需要开启线程任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodAttribute.IsClientTaskAsync">
            <summary>
            默认为 false 表示不支持 async Task
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodAttribute.GetIsClientTaskAsync">
            <summary>
            是否支持 async Task
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.MethodBaseAttribute">
            <summary>
            TCP 调用函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.CommandIdentity">
            <summary>
            自定义命令序号，不能重复，默认小于 0  表示不指定。存在自定义需求时不要使用巨大的数据，建议从 0 开始，因为它会是某个数组的大小。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsVerifyMethod">
            <summary>
            申明验证方法，客户端只有通过了验证才能调用其它函数。一个 TCP 服务只能指定一个验证方法（对于跨类型单例服务只能定义在 AutoCSer.Net.TcpStaticServer.ServerAttribute.IsServer = true 的 class 中），且返回值类型必须为 bool。从安全的角度考虑，实际项目中的服务都应该定义验证方法，除非你能保证该服务绝对不会被其它人建立非法连接。比如参考 AutoCSer.net.tcp.timeVerifyServer。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.ServerTaskType">
            <summary>
            服务端任务类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.ClientTaskType">
            <summary>
            客户端异步任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsServerSerialize">
            <summary>
            默认为 true 表示与服务配置使用相同的序列化方式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsJsonSerialize">
            <summary>
            是否使用 JSON 序列化
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetIsClientSynchronous">
            <summary>
            是否生成同步调用代理函数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetIsClientAsynchronous">
            <summary>
            是否生成异步调用代理函数。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetIsKeepCallback">
            <summary>
            保持异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.ParameterFlags">
            <summary>
            参数设置默认为 InputSerializeReferenceMember | ParameterFlags.OutputSerializeReferenceMember | InputSerializeBox | OutputSerializeBox
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetParameterFlags">
            <summary>
            参数设置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsInputSerializeReferenceMember">
            <summary>
            默认为 true 表示输入参数二进制序列化需要检测循环引用，如果可以保证参数没有循环引用而且对象无需重用则应该设置为 false 减少 CPU 开销。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsOutputSerializeReferenceMember">
            <summary>
            默认为 true 表示输出参数（包括 ref / out）二进制序列化需要检测循环引用，如果可以保证参数没有循环引用而且对象无需重用则应该设置为 false 减少 CPU 开销。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsInputSerializeBox">
            <summary>
            输入参数是否添加包装处理申明 AutoCSer.emit.boxSerialize，用于只有一个输入参数的类型忽略外壳类型的处理以减少序列化开销。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsOutputSerializeBox">
            <summary>
            输出参数是否添加包装处理申明 AutoCSer.emit.boxSerialize，用于只有一个输出参数的类型忽略外壳类型的处理以减少序列化开销。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetIsClientSendOnly">
            <summary>
            客户端是否仅发送数据，无需服务端应答
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetIsClientTaskAsync">
            <summary>
            是否支持 async Task
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.MethodBaseAttribute.GetIsClientAwaiter">
            <summary>
            是否支持 async Task
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsOnlyGetMember">
            <summary>
            默认为 true 表示对于 属性 / 字段 仅仅生成获取数据的代理，否则生成设置数据的代理（如果属性可写）。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsExpired">
            <summary>
            是否过期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.MethodBaseAttribute.IsInitobj">
            <summary>
            默认为 false 表示可能不会对输入输出参数进行初始化操作从而导致错误时出现随机数据，仅 Emit 模式有效
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.MethodClient">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.MethodClient._compileSerialize_(System.Type[],System.Type[],System.Type[],System.Type[],System.Type[],System.Type[])">
            <summary>
            序列化预编译
            </summary>
            <param name="simpleSerializeTypes"></param>
            <param name="simpleDeSerializeTypes"></param>
            <param name="serializeTypes"></param>
            <param name="deSerializeTypes"></param>
            <param name="jsonSerializeTypes"></param>
            <param name="jsonDeSerializeTypes"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocketSenderBase">
            <summary>
            TCP 服务套接字数据发送
            </summary>
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.AddTaskAsync(System.Action)">
            <summary>
            添加自定义 TCP 服务器端同步调用任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.ServerSocket">
            <summary>
            TCP 服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.OutputSleep">
            <summary>
            等待输出休眠时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.IsBuildOutputThread">
            <summary>
            创建输出是否开启线程
            </summary>
        </member>
        <member name="E:AutoCSer.Net.TcpServer.ServerSocketSenderBase.OnClose">
            <summary>
            关闭事件
            </summary>
        </member>
        <member name="E:AutoCSer.Net.TcpServer.ServerSocketSenderBase.OnCloseTask">
            <summary>
            关闭事件（TCP 服务器端同步调用任务处理）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.OutputJsonSerializer">
            <summary>
            输出数据 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.OutputSerializer">
            <summary>
            输出数据二进制序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.Buffer">
            <summary>
            输出数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.CopyBuffer">
            <summary>
            输出复制数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.CompressBuffer">
            <summary>
            压缩数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.ClientObject">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.sendData">
            <summary>
            发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.TimeVerifyTicks">
            <summary>
            时间验证时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.serializeParameterIndex">
            <summary>
            序列化参数编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderBase.IsOutput">
            <summary>
            是否正在输出
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerSocketSenderBase.IsSocket">
            <summary>
            套接字是否有效
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.#ctor(AutoCSer.Net.TcpServer.ServerSocket,System.Boolean,System.Int32)">
            <summary>
            TCP 服务套接字数据发送
            </summary>
            <param name="socket">TCP 服务套接字</param>
            <param name="isBuildOutputThread">创建输出是否开启线程</param>
            <param name="outputSleep">等待输出休眠时间</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.callOnClose">
            <summary>
            调用关闭事件
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.CallOnCloseTask">
            <summary>
            调用关闭事件
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.VirtualAddLog(System.Exception)">
            <summary>
            错误日志处理
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.freeCopyBuffer">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.freeSerializer">
            <summary>
            释放序列化器
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.SetMarkData(System.UInt64)">
            <summary>
            设置变换数据
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.SetVerifyMethod">
            <summary>
            通过函数验证处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.AddTask(System.Action)">
            <summary>
            添加自定义 TCP 服务器端同步调用任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.AddWaitTask(System.Action)">
            <summary>
            添加自定义 TCP 服务器端同步调用任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.Serialize``1(AutoCSer.Net.TcpServer.OutputInfo,``0@)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="outputInfo"></param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.JsonSerialize``1(``0@)">
            <summary>
            序列化
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.DeSerialize``1(AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="isSimpleSerialize"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderBase.VirtualBuildOutput">
            <summary>
            创建输出
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.NullCallbackReturnValue`1">
            <summary>
            异步空回调
            </summary>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.NullCallbackReturnValue`1.#ctor">
            <summary>
            异步空回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.NullCallbackReturnValue`1.Call(AutoCSer.Net.TcpServer.ReturnValue{`0}@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.NullCallbackReturnValue`1.Default">
            <summary>
            异步空回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.OutputInfo">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.OutputInfo.OutputParameterIndex">
            <summary>
            输出参数编号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.OutputInfo.IsSimpleSerializeOutputParamter">
            <summary>
            是否简单序列化输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.OutputInfo.IsKeepCallback">
            <summary>
            是否保持异步回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.OutputInfo.IsClientSendOnly">
            <summary>
            客户端是否仅仅发送数据(不需要应答)
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.OutputInfo.IsJsonSerialize">
            <summary>
            是否采用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.OutputInfo.IsBuildOutputThread">
            <summary>
            创建输出是否开启线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.OutputInfo.MaxDataSize">
            <summary>
            最大输出数据字节长度
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.OutputInfo.CheckMaxDataSize(System.Int32)">
            <summary>
            更新最大输出数据字节长度
            </summary>
            <param name="size">输出数据字节长度</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ParameterFlags">
            <summary>
            参数设置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.InputSerializeReferenceMember">
            <summary>
            默认为 true 表示输入参数二进制序列化需要检测循环引用，如果可以保证参数没有循环引用而且对象无需重用则应该设置为 false 减少 CPU 开销。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.OutputSerializeReferenceMember">
            <summary>
            默认为 true 表示输出参数（包括 ref / out）二进制序列化需要检测循环引用，如果可以保证参数没有循环引用而且对象无需重用则应该设置为 false 减少 CPU 开销。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.InputSerializeBox">
            <summary>
            输入参数是否添加包装处理申明 AutoCSer.emit.boxSerialize，用于只有一个输入参数的类型忽略外壳类型的处理以减少序列化开销。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.OutputSerializeBox">
            <summary>
            输出参数是否添加包装处理申明 AutoCSer.emit.boxSerialize，用于只有一个输出参数的类型忽略外壳类型的处理以减少序列化开销。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.SerializeBox">
            <summary>
            InputSerializeBox | OutputSerializeBox
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.Default">
            <summary>
            InputSerializeReferenceMember | OutputSerializeReferenceMember | SerializeBox
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ParameterFlags.ClientAsynchronousReturnInput">
            <summary>
            客户端异步回调的返回值是否和第一个相同类型的输入参数公用同一个对象，类似于 ref 的作用。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ReturnType">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.VersionExpired">
            <summary>
            版本过期
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ServerDeSerializeError">
            <summary>
            服务器端反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ServerException">
            <summary>
            服务器端异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.CancelKeep">
            <summary>
            取消保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.RemoteExpressionServerNodeError">
            <summary>
            远程表达式映射失败
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.Success">
            <summary>
            成功，最大占用 3b，低端是服务端状态，用于 Identity 最高 3 位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientDisposed">
            <summary>
            客户端已关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientNullData">
            <summary>
            客户端没有接收到数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientDeSerializeError">
            <summary>
            客户端反序列化错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientException">
            <summary>
            客户端异常
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientBuildError">
            <summary>
            创建输出错误取消命令调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientSendError">
            <summary>
            客户端发送数据错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.ClientReceiveError">
            <summary>
            客户端接收数据错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.RemoteExpressionNotSupport">
            <summary>
            服务配置不支持远程表达式
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnType.RemoteExpressionCheckerError">
            <summary>
            远程表达式客户端检测服务端映射标识不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ReturnValue">
            <summary>
            异步返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnValue.RetParameterName">
            <summary>
            返回值参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnValue.ReturnParameterName">
            <summary>
            返回值参数名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnValue.Type">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ReturnValue.IsReturn">
            <summary>
            是否存在返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ReturnValue.op_Implicit(AutoCSer.Net.TcpServer.ReturnValue)~System.Boolean">
            <summary>
            是否存在返回值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ReturnValue.op_Implicit(AutoCSer.Net.TcpServer.ReturnType)~AutoCSer.Net.TcpServer.ReturnValue">
            <summary>
            异步返回值
            </summary>
            <param name="type">返回值类型</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ReturnValue`1">
            <summary>
            异步返回值
            </summary>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnValue`1.Value">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ReturnValue`1.Type">
            <summary>
            返回值类型
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ReturnValue`1.IsReturn">
            <summary>
            是否存在返回值
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ReturnValue`1.op_Implicit(`0)~AutoCSer.Net.TcpServer.ReturnValue{`0}">
            <summary>
            获取返回值
            </summary>
            <param name="value">异步返回值</param>
            <returns>返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ReturnValue`1.op_Implicit(AutoCSer.Net.TcpServer.ReturnValue{`0})~`0">
            <summary>
            获取返回值
            </summary>
            <param name="value">返回值</param>
            <returns>异步返回值</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ReturnValue`1.Null">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Sender">
            <summary>
            TCP 套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Sender.Socket">
            <summary>
            TCP 服务套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Sender.isFree">
            <summary>
            是否已经释放缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Sender.isClose">
            <summary>
            是否已经关闭并释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Sender.#ctor(System.Net.Sockets.Socket)">
            <summary>
            TCP 套接字数据发送
            </summary>
            <param name="socket">TCP 服务套接字</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.SenderBuildInfo">
            <summary>
            输出创建参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.SendBufferSize">
            <summary>
            发送数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.Count">
            <summary>
            当前创建命令数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.IsSend">
            <summary>
            是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.isFullSend">
            <summary>
            数据是否需要发送数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.IsVerifyMethod">
            <summary>
            是否存在验证函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.IsClose">
            <summary>
            是否需要关闭
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.IsError">
            <summary>
            是否错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.IsNewBuffer">
            <summary>
            是否创建了新的缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.SendSizeLessCount">
            <summary>
            发送数据量过低次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.SenderBuildInfo.IsClientAwaiter">
            <summary>
            客户端是否更注重 await
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.SenderBuildInfo.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Server">
            <summary>
            TCP 服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CommandStartIndex">
            <summary>
            用户命令起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CheckCommandIndex">
            <summary>
            连接检测命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.RemoteExpressionCommandIndex">
            <summary>
            远程表达式服务端节点调用命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.RemoteExpressionNodeIdCommandIndex">
            <summary>
            远程表达式服务端节点标识解析命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.MergeCommandIndex">
            <summary>
            客户端流合并命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CustomDataCommandIndex">
            <summary>
            自定义数据包命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CancelKeepCommandIndex">
            <summary>
            取消保持回调命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.MinCommandIndex">
            <summary>
            最小系统命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.MinSocketSize">
            <summary>
            最小接收/发送数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.JsonConfig">
            <summary>
            JSON 序列化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CommandIndexBits">
            <summary>
            会话索引有效位
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CommandIndexAnd">
            <summary>
            会话索引最大值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server.CommandFlagsAnd">
            <summary>
            会话索引参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server.GetReturnType(System.UInt32@)">
            <summary>
            获取返回值类型
            </summary>
            <param name="commandIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server.GetCommandFlags(System.UInt32@)">
            <summary>
            获取命令参数
            </summary>
            <param name="commandIndex"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server.GetCommandIndex(System.UInt32,AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            获取会话索引
            </summary>
            <param name="commandIndex"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server.AppendTcpQueue(AutoCSer.Net.TcpServer.ServerCallBase)">
            <summary>
            添加 TCP 任务队列（不允许添加重复的任务实例，否则可能造成严重后果）
            </summary>
            <param name="call">TCP 服务器端同步调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Server`1">
            <summary>
            TCP 服务基类
            </summary>
            <typeparam name="attributeType"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server`1.onCustomData">
            <summary>
            自定义数据包处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.Server`1.getSocketThreadCallType">
            <summary>
            获取客户端请求线程调用类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`1.#ctor(`0,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,AutoCSer.Threading.Thread.CallType,System.Boolean)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="verify">获取客户端请求线程调用类型</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="getSocketThreadCallType">同步验证接口</param>
            <param name="isCallQueue">是否提供独占的 TCP 服务器端同步调用队列</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`1.Start">
            <summary>
            启动服务
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`1.startGetSocket">
            <summary>
            获取客户端套接字
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`1.CustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            自定义数据包处理
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.Server`3">
            <summary>
            TCP 服务基类
            </summary>
            <typeparam name="attributeType"></typeparam>
            <typeparam name="serverType"></typeparam>
            <typeparam name="serverSocketSenderType"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`3.#ctor(`0,System.Func{System.Net.Sockets.Socket,System.Boolean},System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,AutoCSer.Threading.Thread.CallType,System.Boolean)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="verify">获取客户端请求线程调用类型</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="getSocketThreadCallType">同步验证接口</param>
            <param name="isCallQueue">是否提供独占的 TCP 服务器端同步调用队列</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`3.DoCommand(System.Int32,`2,AutoCSer.SubArray{System.Byte}@)">
            <summary>
            命令处理
            </summary>
            <param name="index">命令序号</param>
            <param name="sender">TCP 内部服务套接字数据发送</param>
            <param name="data">命令数据</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.Server`3.DoCommand(System.Int32,`2,AutoCSer.SubBuffer.PoolBufferFull@,System.Int32)">
            <summary>
            命令处理委托
            </summary>
            <param name="index"></param>
            <param name="socket"></param>
            <param name="buffer"></param>
            <param name="dataSize"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerAttribute">
            <summary>
            TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerAttribute.RemoteExpressionServerTask">
            <summary>
            远程表达式服务端任务类型，默认为 Timeout
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerAttribute.GetMaxCustomDataSize">
            <summary>
            客户端最大自定义数据包字节大小，0 表示不限
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerAttribute.GetClientTryCreateSleep">
            <summary>
            客户端重建连接休眠毫秒数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerAttribute.GetClientOutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerAttribute.GetServerOutputSleep">
            <summary>
            批量处理休眠毫秒数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerAttribute.GetIsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerAttribute.GetCommandPoolBitSize">
            <summary>
            命令池初始化二进制大小 2^n
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerAttribute.IsClientAwaiter">
            <summary>
            默认为 false 表示更注重客户端异步吞吐性能，否则更注重客户端 await 吞吐性能
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerBase`1">
            <summary>
            TCP 服务基类
            </summary>
            <typeparam name="attributeType"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.verify">
            <summary>
            同步验证接口
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.CallQueue">
            <summary>
            TCP 服务器端同步调用队列
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.commandData">
            <summary>
            命令位图
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.commands">
            <summary>
            命令位图
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.maxCommand">
            <summary>
            最大命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.ReceiveVerifyCommandTimeout">
            <summary>
            验证超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.Socket">
            <summary>
            TCP 套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.isStart">
            <summary>
            是否已启动服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.VerifyCommandIdentity">
            <summary>
            验证命令序号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBase`1.isListen">
            <summary>
            是否处于监听状态
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBase`1.IsListen">
            <summary>
            是否服务处于监听状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.#ctor(`0,System.Func{System.Net.Sockets.Socket,System.Boolean},AutoCSer.Log.ILog,System.Boolean)">
            <summary>
            TCP 服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="verify">获取客户端请求线程调用类型</param>
            <param name="log">日志接口</param>
            <param name="isCallQueue">是否提供独占的 TCP 服务器端同步调用队列</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.Dispose">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.StopListen">
            <summary>
            停止服务监听
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.start">
            <summary>
            启动服务
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.listen">
            <summary>
            服务端监听
            </summary>
            <returns></returns>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBase`1.isCustomData">
            <summary>
            是否支持自定义数据包
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBase`1.isKeepCallback">
            <summary>
            是否支持保持回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBase`1.isMergeCommand">
            <summary>
            是否支持合并命令处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.setCommandData(System.Int32)">
            <summary>
            初始化序号识别命令处理委托集合
            </summary>
            <param name="count">命令数量</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.setCommand(System.Int32)">
            <summary>
            设置命令索引信息
            </summary>
            <param name="methodIndex">命令处理索引</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.IsCommand(System.Int32)">
            <summary>
            判断命令是否有效
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.setVerifyCommand(System.Int32)">
            <summary>
            设置验证命令序号
            </summary>
            <param name="methodIndex"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.PushReceiveVerifyCommandTimeout(AutoCSer.Net.SocketTimeoutLink,System.Net.Sockets.Socket)">
            <summary>
            添加超时套接字
            </summary>
            <param name="serverSocket"></param>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBase`1.CancelReceiveVerifyCommandTimeout(AutoCSer.Net.SocketTimeoutLink)">
            <summary>
            取消超时套接字
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerBaseAttribute">
            <summary>
            TCP 服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.Name">
            <summary>
            服务名称的唯一标识，默认匹配的配置文件 Key 的后缀（Net.Tcp.CommandServerAttribute.Service），TCP 注册服务中注册的当前服务名称。对于 tcpCall 必填，并且必须可以作为合法的 C# 类型名称使用。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.Host">
            <summary>
            服务主机名称或者 IP 地址，无法解析时默认使用 IPAddress.Any，比如 "www.autocser.com" 或者 "127.0.0.1"
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.Port">
            <summary>
            服务监听端口(服务配置)
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.VerifyString">
            <summary>
            服务默认验证字符串，AutoCSer.Net.Tcp.TimeVerifyServer 用到了该字符串。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.verifyHashCode">
            <summary>
            附加验证字符串信息哈希值
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.VerifyHashCode">
            <summary>
            附加验证字符串信息哈希值
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.MaxVerifyDataSize">
            <summary>
            最大验证字节数量，默认为 1KB
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetMemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.ClientSegmentationCopyPath">
            <summary>
            当 IsSegmentation = true 时，对于剥离出来的客户端代码指定需要复制的目标路径，也就是你的客户端所在的项目路径。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetIsSegmentation">
            <summary>
            当需要将客户端提供给第三方使用的时候，可能不希望 dll 中同时包含服务端，设置为 true 会将客户端代码单独剥离出来生成一个代码文件 {项目名称}.tcpServer.服务名称.client.cs，当然你需要将服务中所有参数与返回值及其依赖的数据类型剥离出来。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetSendBufferSize">
            <summary>
            服务器端发送数据（包括客户端接受数据）缓冲区初始化字节数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetReceiveBufferSize">
            <summary>
            服务器端接受数据（包括客户端发送数据）缓冲区初始化字节数
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetServerSendBufferMaxSize">
            <summary>
            服务器端发送数据缓冲区最大字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.ClientSendBufferMaxSize">
            <summary>
            客户端发送数据缓冲区最大字节数，默认为 1MB。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.MinCompressSize">
            <summary>
            压缩启用最低字节数量，默认为 0 表示不压缩数据；压缩数据需要消耗一定的 CPU 资源降低带宽使用。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetMinCompressSize">
            <summary>
            压缩启用最低字节数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.CheckSeconds">
            <summary>
            客户端保持连接心跳包间隔时间默认为 59 秒，对于频率稳定可靠的服务类型可以设置为 0 禁用心跳包。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.GenericType">
            <summary>
            提供当前类型的一个泛型实例类型，用于获取命令序号记忆数据
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetIsJsonSerialize">
            <summary>
            是否使用 JSON 序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsAutoServer">
            <summary>
            默认为 true 表示在创建服务对象的时候自动启动监听，否则需要手动 Start
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsAttribute">
            <summary>
            成员是否匹配自定义属性类型，默认为 true 表示代码生成仅选择申明了 AutoCSer.Net.Tcp.MethodAttribute 的函数，否则选择所有函数。对于 tcpCall 有效域为当前 class。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsBaseTypeAttribute">
            <summary>
            指定是否搜索该成员的继承链以查找这些特性，参考System.Reflection.MemberInfo.GetCustomAttributes(bool inherit)。对于 tcpCall 有效域为当前 class。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsMarkData">
            <summary>
            默认为 false 表示传输原始数据，否则传输简单变换处理后的数据，作用于继承自 AutoCSer.Net.Tcp.TimeVerifyServer 的服务端。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsSimpleSerialize">
            <summary>
            默认为 true 表示支持简单序列化操作
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsCompileSerialize">
            <summary>
            默认为 true 表示在初始化的时候启动序列化预编译任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerBaseAttribute.IsRemoteExpression">
            <summary>
            默认为 false 表示不支持远程表达式
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetIsInternalClient">
            <summary>
            默认为 false 表示客户端 API 公共可见，设置为 true 表示仅程序集可见
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerBaseAttribute.GetConfig``1(System.String,System.Type,``0)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 服务注册名称</param>
            <param name="type">TCP 服务器类型</param>
            <param name="attribute">TCP 服务配置</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCallBase">
            <summary>
            TCP 服务器端同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallBase.TaskTicks">
            <summary>
            线程切换检测时间
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerCallBase.AutoCSer#Threading#ILinkTask#LinkTaskTicks">
            <summary>
            线程切换检测时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallBase.NextTask">
            <summary>
            下一个任务节点
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.ServerCallBase.AutoCSer#Threading#ILinkTask#NextLinkTask">
            <summary>
            下一个任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallBase.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallBase.threadPoolCall(System.Object)">
            <summary>
            系统线程池调用处理
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallBase.SingleRunTask">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallBase.SingleRunTask(System.Int64@)">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallBase.AutoCSer#Threading#ILinkTask#SingleRunLinkTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCall">
            <summary>
            TCP 服务器端同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCall.CommandIndex">
            <summary>
            回话标识
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCallback`2">
            <summary>
            TCP 服务器端异步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`2.socket">
            <summary>
            异步套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`2.commandIndex">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`2.keepLock">
            <summary>
            保持回调访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`2.isBuildOutputThread">
            <summary>
            尝试启动创建输出线程
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`2.onReturnHandle">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallback`2.Set(`1,System.Boolean)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallback`2.setKeep(`1,System.Boolean)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallback`2.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCallback`4">
            <summary>
            异步回调
            </summary>
            <typeparam name="callbackType">异步回调类型</typeparam>
            <typeparam name="serverSocketSenderType">TCP 服务套接字数据发送类型</typeparam>
            <typeparam name="outputParameterType">输出参数类型</typeparam>
            <typeparam name="returnType">返回值类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`4.socket">
            <summary>
            异步套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`4.outputInfo">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`4.commandIndex">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`4.keepLock">
            <summary>
            保持回调访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`4.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallback`4.onReturnHandle">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallback`4.Set(`1,AutoCSer.Net.TcpServer.OutputInfo,`2@)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallback`4.setKeep(`1,AutoCSer.Net.TcpServer.OutputInfo,`2@)">
            <summary>
            异步回调
            </summary>
            <param name="socket"></param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallback`4.CancelKeep">
            <summary>
            取消保持调用
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCallCanDisposableQueue">
            <summary>
            TCP 服务器端同步调用队列处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallCanDisposableQueue.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallCanDisposableQueue.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallCanDisposableQueue.run">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCallQueue">
            <summary>
            TCP 服务器端同步调用队列处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallQueue.Add(AutoCSer.Net.TcpServer.ServerCallBase)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallQueue.CheckAdd(AutoCSer.Net.TcpServer.ServerCallBase)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallQueue.run">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallQueue.Default">
            <summary>
            TCP 服务器端同步调用队列处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerCallTask">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallTask.#ctor(System.Int64)">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
            <param name="taskTicks">线程切换超时时钟周期</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallTask.Add(AutoCSer.Net.TcpServer.ServerCallBase)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallTask.run">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallTask.Task">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerCallTask.tasks">
            <summary>
            TCP 服务器端同步调用任务处理集合
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerCallTask.check">
            <summary>
            线程切换检测
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerOutput.CustomDataOutput">
            <summary>
            TCP 服务端套接字输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerOutput.CustomDataOutput.Data">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.CustomDataOutput.Build(AutoCSer.Net.TcpServer.ServerSocketSenderBase,AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="sender">TCP 服务套接字数据发送</param>
            <param name="buildInfo">输出创建参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.CustomDataOutput.free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerOutput.Output`1">
            <summary>
            TCP 服务端套接字输出信息
            </summary>
            <typeparam name="outputParameterType">输出数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerOutput.Output`1.outputInfo">
            <summary>
            服务端输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerOutput.Output`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.Output`1.Build(AutoCSer.Net.TcpServer.ServerSocketSenderBase,AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="sender">TCP 服务套接字数据发送</param>
            <param name="buildInfo">输出创建参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.Output`1.Set(System.UInt32,AutoCSer.Net.TcpServer.OutputInfo,`0@)">
            <summary>
            设置输出参数
            </summary>
            <param name="commandIndex"></param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.Output`1.free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerOutput.OutputLink`1">
            <summary>
            TCP 服务端套接字输出信息
            </summary>
            <typeparam name="outputLinkType">TCP 服务端套接字输出信息类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerOutput.OutputLink`1.StreamStartIndex">
            <summary>
            输出流起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerOutput.OutputLink`1.setCommandFlags">
            <summary>
            设置保留命令参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.OutputLink`1.Build(AutoCSer.Net.TcpServer.ServerSocketSenderBase,AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="sender">TCP 服务套接字数据发送</param>
            <param name="buildInfo">输出创建参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.OutputLink`1.free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.OutputLink`1.CancelLink(`0)">
            <summary>
            取消输出
            </summary>
            <param name="head"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerOutput.OutputLink">
            <summary>
            TCP 服务端套接字输出信息
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerOutput.OutputLink.CommandIndex">
            <summary>
            会话标识
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerOutput.ReturnTypeOutput">
            <summary>
            TCP 服务端套接字输出信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.ReturnTypeOutput.Build(AutoCSer.Net.TcpServer.ServerSocketSenderBase,AutoCSer.Net.TcpServer.SenderBuildInfo@)">
            <summary>
            创建输出信息
            </summary>
            <param name="sender">TCP 服务套接字数据发送</param>
            <param name="buildInfo">输出创建参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerOutput.ReturnTypeOutput.free">
            <summary>
            释放 TCP 服务端套接字输出信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocket">
            <summary>
            TCP 服务端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.DefaultVerifyMethodCount">
            <summary>
            默认验证函数调用次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveAsyncEventArgs">
            <summary>
            接收数据套接字异步事件对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.MarkData">
            <summary>
            变换数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.ReceiveDeSerializer">
            <summary>
            接收数据二进制反序列化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.ReceiveJsonParser">
            <summary>
            接收数据 JSON 解析
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.ReceiveBuffer">
            <summary>
            接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.ReceiveBigBuffer">
            <summary>
            临时接收数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveBufferSize">
            <summary>
            接收数据缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveTimeout">
            <summary>
            接收数据超时
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveDataStart">
            <summary>
            接收数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.CommandIndex">
            <summary>
            当前处理会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveCount">
            <summary>
            当前接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveIndex">
            <summary>
            当前处理接收数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.compressionDataSize">
            <summary>
            当前数据压缩后的字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.dataSize">
            <summary>
            当前数据字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.command">
            <summary>
            当前命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.receiveBigBufferCount">
            <summary>
            当前接收临时数据字节数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.socketError">
            <summary>
            套接字错误
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.ReceiveType">
            <summary>
            TCP 服务端套接字接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.verifyMethodCount">
            <summary>
            验证函数调用次数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket.IsVerifyMethod">
            <summary>
            是否通过函数验证
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocket.DeSerialize``1(AutoCSer.SubArray{System.Byte}@,``0@,System.Boolean)">
            <summary>
            反序列化
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="value">目标对象</param>
            <param name="isSimpleSerialize"></param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocket.FreeReceiveDeSerializer">
            <summary>
            释放数据反序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocket.CloseFree">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocket`4">
            <summary>
            TCP 服务端套接字
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
            <typeparam name="serverType">TCP 服务类型</typeparam>
            <typeparam name="socketType">TCP 服务端套接字类型</typeparam>
            <typeparam name="socketSenderType">TCP 服务套接字数据发送</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket`4.TaskTicks">
            <summary>
            线程切换检测时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket`4.NextTask">
            <summary>
            下一个任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocket`4.Server">
            <summary>
            TCP 服务
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocket`4.#ctor(`1)">
            <summary>
            TCP 服务端套接字
            </summary>
            <param name="server">TCP调用服务端</param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocketReceiveType">
            <summary>
            TCP 服务端套接字接收数据回调类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.VerifyCommand">
            <summary>
            获取验证命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.VerifyData">
            <summary>
            获取验证数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.Command">
            <summary>
            获取命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.Data">
            <summary>
            获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.BigData">
            <summary>
            获取临时数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.CompressionData">
            <summary>
            获取压缩数据
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketReceiveType.CompressionBigData">
            <summary>
            获取临时压缩数据
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocketSender">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSender.BuildOutputThreadCallType">
            <summary>
            创建输出线程调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSender.KeepCallbacks">
            <summary>
            TCP 服务器端异步保持调用集合
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSender.Outputs">
            <summary>
            TCP 服务端套接字输出信息链表
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender.#ctor(AutoCSer.Net.TcpServer.ServerSocket,AutoCSer.Threading.Thread.CallType,System.Boolean,System.Int32)">
            <summary>
            TCP 服务套接字数据发送
            </summary>
            <param name="socket">TCP 服务套接字</param>
            <param name="buildOutputThreadCallType">创建输出线程调用类型</param>
            <param name="isBuildOutputThread">创建输出是否开启线程</param>
            <param name="outputSleep">等待输出休眠时间</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender.AddKeepCallback(System.UInt32,AutoCSer.Net.TcpServer.IServerKeepCallback)">
            <summary>
            添加 TCP 服务器端异步保持调用
            </summary>
            <param name="commandIndex"></param>
            <param name="keepCallback"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocketSender`4">
            <summary>
            TCP 服务套接字数据发送
            </summary>
            <typeparam name="attributeType">TCP 服务配置类型</typeparam>
            <typeparam name="serverType">TCP 服务类型</typeparam>
            <typeparam name="socketType">TCP 服务端套接字类型</typeparam>
            <typeparam name="socketSenderType">TCP 服务套接字数据发送类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSender`4.Server">
            <summary>
            TCP 服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSender`4.IsServerBuildOutputThread">
            <summary>
            服务端创建输出是否开启线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.#ctor(AutoCSer.Net.TcpServer.ServerSocket{`0,`1,`2,`3},AutoCSer.Threading.Thread.CallType)">
            <summary>
            TCP 服务套接字数据发送
            </summary>
            <param name="socket">TCP 服务套接字</param>
            <param name="buildOutputThreadCallType">创建输出线程调用类型</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.freeBuffer">
            <summary>
            释放接收数据缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.freeOutput">
            <summary>
            释放输出信息
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.setSendData(System.Byte*,System.Int32)">
            <summary>
            设置发送数据
            </summary>
            <param name="start">数据起始位置</param>
            <param name="count">输出数量</param>
            <returns>是否改变输出缓冲区</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.VirtualAddLog(System.Exception)">
            <summary>
            错误日志处理
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.AddLog(System.Exception)">
            <summary>
            错误日志处理
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.TryGetOutput(System.UInt32)">
            <summary>
            获取输出信息
            </summary>
            <param name="commandIndex">会话索引</param>
            <returns>输出信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.TryPush(System.UInt32,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="commandIndex">会话索引</param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push(System.UInt32)">
            <summary>
            发送数据
            </summary>
            <param name="commandIndex">会话索引</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push(System.UInt32,System.Boolean)">
            <summary>
            发送数据
            </summary>
            <param name="commandIndex">会话索引</param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push(AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            发送数据
            </summary>
            <param name="value">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push">
            <summary>
            发送数据
            </summary>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push(System.UInt32,AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            发送数据
            </summary>
            <param name="commandIndex">会话标识</param>
            <param name="returnType">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.PushNoThread(System.UInt32,AutoCSer.Net.TcpServer.ReturnType)">
            <summary>
            发送数据
            </summary>
            <param name="commandIndex">会话标识</param>
            <param name="returnType">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.TryGetOutput``1(System.UInt32,AutoCSer.Net.TcpServer.OutputInfo,``0@)">
            <summary>
            获取输出信息
            </summary>
            <typeparam name="outputParameterType"></typeparam>
            <param name="commandIndex">会话标识</param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">输出参数</param>
            <returns>输出信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.GetOutput``1(System.UInt32,AutoCSer.Net.TcpServer.OutputInfo,``0@)">
            <summary>
            获取输出信息
            </summary>
            <typeparam name="outputParameterType"></typeparam>
            <param name="commandIndex">会话标识</param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">输出参数</param>
            <returns>输出信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.TryPush``1(System.UInt32,AutoCSer.Net.TcpServer.OutputInfo,AutoCSer.Net.TcpServer.ReturnValue{``0}@)">
            <summary>
            发送数据
            </summary>
            <typeparam name="outputParameterType">输出数据类型</typeparam>
            <param name="commandIndex">会话标识</param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push``1(System.UInt32,AutoCSer.Net.TcpServer.OutputInfo,AutoCSer.Net.TcpServer.ReturnValue{``0}@)">
            <summary>
            发送数据
            </summary>
            <typeparam name="outputParameterType">输出数据类型</typeparam>
            <param name="commandIndex">会话标识</param>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.Push``1(AutoCSer.Net.TcpServer.OutputInfo,``0@)">
            <summary>
            发送数据
            </summary>
            <typeparam name="outputParameterType">输出数据类型</typeparam>
            <param name="outputInfo">服务端输出信息</param>
            <param name="outputParameter">返回值</param>
            <returns>是否成功加入输出队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.push(AutoCSer.Net.TcpServer.ServerOutput.OutputLink)">
            <summary>
            添加输出信息
            </summary>
            <param name="output">当前输出信息</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.push(AutoCSer.Net.TcpServer.ServerOutput.OutputLink,System.Boolean)">
            <summary>
            添加输出信息
            </summary>
            <param name="output">当前输出信息</param>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.TryBuildOutput">
            <summary>
            尝试启动创建输出线程
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.TryBuildOutput(System.Boolean)">
            <summary>
            尝试启动创建输出线程
            </summary>
            <param name="isBuildOutputThread">尝试启动创建输出线程</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.CustomData(System.Byte[])">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.CustomData(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            发送自定义数据
            </summary>
            <param name="data"></param>
            <returns>是否添加到发送队列</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSender`4.CancelKeepCallback(System.Int32)">
            <summary>
            删除 TCP 服务器端异步保持调用
            </summary>
            <param name="commandIndex"></param>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerSocketSenderCloseTask">
            <summary>
            TCP 服务套接字数据发送关闭任务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerSocketSenderCloseTask.Sender">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.ServerSocketSenderCloseTask.Call">
            <summary>
            调用处理
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.ServerTaskType">
            <summary>
            服务端任务类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerTaskType.Synchronous">
            <summary>
            非任务同步阻塞模式，直接在 Socket 接收数据的 IO 线程中处理以避免线程调度，适应于快速结束的非阻塞函数；需要知道的是这种模式下如果产生阻塞会造成 Socket 停止接收数据。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerTaskType.ThreadPool">
            <summary>
            系统线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerTaskType.Timeout">
            <summary>
            公用任务池，默认最大并行数量为 AutoCSer.Threading.Pub.CpuCount * 32，定时检测任务超时调度线程（默认为 10 毫秒）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerTaskType.TcpTask">
            <summary>
            TCP 任务池，适用于 CPU 计算类型任务，定时检测任务超时调度线程（默认为 10 毫秒），默认最大并行数量为 AutoCSer.Threading.Pub.CpuCount
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerTaskType.TcpQueue">
            <summary>
            TCP 任务队列，适用于无阻塞的快速任务处理。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.ServerTaskType.Queue">
            <summary>
            服务独占任务队列，适用于无阻塞的快速任务处理。
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.TaskAsyncReturnValue">
            <summary>
            异步等待
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.Call(AutoCSer.Net.TcpServer.ReturnValue@)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.Call(AutoCSer.Net.TcpServer.ReturnValue)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.GetResult">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1">
            <summary>
            异步等待
            </summary>
            <typeparam name="outputParameterType"></typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.outputParameter">
            <summary>
            输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.continuation">
            <summary>
            异步回调
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.IsCompleted">
            <summary>
            完成状态
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.Call(AutoCSer.Net.TcpServer.ReturnValue{`0}@)">
            <summary>
            回调处理
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.GetResult">
            <summary>
            获取返回值
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.OnCompleted(System.Action)">
            <summary>
            设置异步回调
            </summary>
            <param name="continuation"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskAsyncReturnValue`1.GetAwaiter">
            <summary>
            获取 await
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.TaskConfig">
            <summary>
            TCP 任务处理配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskConfig.ThreadCount">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskConfig.NewThreadMilliseconds">
            <summary>
            线程切换检测毫秒数量，默认为 10 毫秒
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TaskConfig.set">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TaskConfig.Default">
            <summary>
            TCP 任务处理配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.TimeVerifyServer">
            <summary>
            时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TimeVerifyServer.CommandIdentity">
            <summary>
            时间验证函数 命令序号
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TimeVerifyServer.Md5(System.String,System.UInt64,System.Int64)">
            <summary>
            MD5加密
            </summary>
            <param name="value"></param>
            <param name="randomPrefix"></param>
            <param name="ticks"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TimeVerifyServer.IsMd5(System.Byte[],System.Byte[])">
            <summary>
            判断 MD5 值是否相等
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TimeVerifyServer.CheckVerifyString(AutoCSer.Net.TcpServer.CommandBase,AutoCSer.Net.TcpServer.ServerBaseAttribute)">
            <summary>
            检测默认验证字符串
            </summary>
            <param name="server"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.TimeVerifyServer`4">
            <summary>
            时间验证服务
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TimeVerifyServer`4.server">
            <summary>
            TCP 服务端
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpServer.TimeVerifyServer`4.TcpServer">
            <summary>
            TCP 服务端
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TimeVerifyServer`4.SetTcpServer(`1)">
            <summary>
            设置TCP服务端
            </summary>
            <param name="server">TCP服务端</param>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TimeVerifyServer`4.lastVerifyTicks">
            <summary>
            最后一次验证时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.TimeVerifyServer`4.lastVerifyTickLock">
            <summary>
            最后一次验证时间访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpServer.TimeVerifyServer`4.verify(`3,System.UInt64,System.Byte[],System.Int64@)">
            <summary>
            时间验证函数
            </summary>
            <param name="sender"></param>
            <param name="randomPrefix">随机前缀</param>
            <param name="md5Data">MD5 数据</param>
            <param name="ticks">验证时钟周期</param>
            <returns>是否验证成功</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpServer.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.CommandBase">
            <summary>
            TCP 组件基类
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.ClientCommand">
            <summary>
            TCP 客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.ClientCommandBase">
            <summary>
            TCP 客户端命令
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.ClientSocketBase">
            <summary>
            TCP 服务客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.ClientSocketSenderBase">
            <summary>
            TCP 客户端套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.ServerCall">
            <summary>
            TCP 服务器端同步调用
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.ServerSocketSenderBase">
            <summary>
            TCP 服务套接字数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpServer.UnionType.TaskConfig">
            <summary>
            TCP 任务处理配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.Callback`1">
            <summary>
            异步回调
            </summary>
            <typeparam name="outputParameterType"></typeparam>
        </member>
        <member name="M:AutoCSer.Net.Callback`1.Call(`0@)">
            <summary>
            异步回调返回值
            </summary>
            <param name="outputParameter">输出参数</param>
        </member>
        <member name="T:AutoCSer.Net.ServerPort">
            <summary>
            TCP 服务默认端口号
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.KeyValueStreamSlaveServer">
            <summary>
            K-V 数据库从服务 8988
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.KeyValueStreamMasterServer">
            <summary>
            K-V 数据库主服务 8989
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.SlaveCacheServer">
            <summary>
            可持久化缓存从服务 8990
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.MasterCacheServer">
            <summary>
            可持久化缓存主服务 8991
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.Search">
            <summary>
            搜索服务 8992
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.DiskBlock">
            <summary>
            磁盘块服务 8993
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.Deploy">
            <summary>
            部署服务 8994
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.ProcessCopy">
            <summary>
            进程复制重启服务 8995
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.HttpSession">
            <summary>
            HTTP 会话标识服务 8996
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.HttpServerRegister">
            <summary>
            HTTP 注册管理服务 8997
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.TcpRegister">
            <summary>
            TCP 内部注册写服务 8998
            </summary>
        </member>
        <member name="F:AutoCSer.Net.ServerPort.TcpRegisterReader">
            <summary>
            TCP 内部注册读取服务 8999
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.Client">
            <summary>
            TCP 静态服务客户端
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.Client.verifyMethod">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.Client.#ctor(AutoCSer.Net.TcpInternalServer.ServerAttribute,System.Action{AutoCSer.SubArray{System.Byte}},AutoCSer.Log.ILog,System.Func{AutoCSer.Net.TcpInternalServer.ClientSocketSender,System.Boolean})">
            <summary>
            TCP 内部服务客户端
            </summary>
            <param name="attribute">TCP服务调用配置</param>
            <param name="onCustomData">自定义数据包处理</param>
            <param name="log">日志接口</param>
            <param name="verifyMethod">验证委托</param>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.Client.SocketVerifyMethod(AutoCSer.Net.TcpServer.ClientSocketSenderBase)">
            <summary>
            套接字验证
            </summary>
            <param name="socket">TCP 调用客户端套接字</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute">
            <summary>
            保持异步回调 TCP 调用函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute.IsClientSynchronous">
            <summary>
            默认为 false 表示不生成同步调用代理函数，同步模式使用的是 Monitor.Wait，会占用一个工作线程，并存在线程调度开销，优点是使用方便、安全。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute.GetIsClientSynchronous">
            <summary>
            是否生成同步调用代理函数
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute.IsClientAsynchronous">
            <summary>
            默认为 true 表示生成异步调用代理函数。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute.GetIsClientAsynchronous">
            <summary>
            是否生成异步调用代理函数。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute.IsKeepCallback">
            <summary>
            保持异步回调，1 问多答的交互模式（客户端一个请求，服务器端可以任意多次回调回应）。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.KeepCallbackMethodAttribute.GetIsKeepCallback">
            <summary>
            保持异步回调
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.MethodAttribute">
            <summary>
            TCP 调用函数配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.MethodAttribute.ServerName">
            <summary>
            服务名称。如果不指定 Service，则默认绑定到该 class 申明配置的 Service；一个 class 中的不同函数可以绑定到不同服务名称。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.MethodAttribute.GetServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute">
            <summary>
            远程调用链目标成员配置
            </summary>
            <summary>
            远程调用链目标成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.IsAwait">
            <summary>
            默认为 true 表示生成 await 客户端函数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.Type">
            <summary>
            名称类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.Type.Concat">
            <summary>
            直接连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.Type.Join">
            <summary>
            下划线连接
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.Type.OnlyName">
            <summary>
            仅名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.MemberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.NameType">
            <summary>
            名称类型（用于成员缓存调用链）
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.IsCancel">
            <summary>
            是否取消生成
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.IsClientRemoteMember">
            <summary>
            默认为 true 表示生成客户端远程成员，false 主要用于缓存推送的自定义处理
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.RemoteMemberAttribute.IsMethod">
            <summary>
            是否生成函数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.RemoteKeyAttribute">
            <summary>
            远程调用链根对象关键字配置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.RemoteLinkAttribute">
            <summary>
            远程调用链中间节点配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.RemoteLinkAttribute.IsNull">
            <summary>
            是否需要可空检查
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.RemoteMethodAttribute">
            <summary>
            远程调用链目标函数配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.RemoteMethodAttribute.IsMethod">
            <summary>
            是否生成函数
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.SerializeBoxMethodAttribute">
            <summary>
            TCP 调用函数配置
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.SerializeBoxMethodAttribute.GetParameterFlags">
            <summary>
            参数设置
            </summary>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.ServerAttribute">
            <summary>
            TCP 静态服务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.ServerAttribute.MemberFilters">
            <summary>
            成员选择类型，为了防止调用者混淆了远程函数与本地函数在某些情况下产生误调用，默认只选择受保护的方法生成（包括 private / protected / internal）相关代码。
            </summary>
        </member>
        <member name="P:AutoCSer.Net.TcpStaticServer.ServerAttribute.GetMemberFilters">
            <summary>
            成员选择类型
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.ServerAttribute.IsServer">
            <summary>
            是否 TCP 服务配置。一个静态服务只能存在一个 class 配置 IsServer = true，并且必须指定 Service，用于这个服务名称绑定 TCP 服务配置。
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.ServerAttribute.IsAbstract">
            <summary>
            默认为 false 表示不支持抽象类
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.ServerAttribute.IsRemoteLink">
            <summary>
            默认为 true 表示检测并生成基于的 [AutoCSer.Net.TcpStaticServer.RemoteKey] 调用链代码，只有在 IsRemoteLinkType = false 时才有效
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.ServerAttribute.IsRemoteLinkType">
            <summary>
            默认为 false 表示当前类型不是远程调用链类型
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerAttribute.GetConfig(System.String,System.Type)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 调用服务名称</param>
            <param name="type">TCP 服务器类型</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerAttribute.GetConfig(System.String,System.Type,System.Boolean)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 调用服务名称</param>
            <param name="type">TCP 服务器类型</param>
            <param name="isServer">是否服务端</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerAttribute.GetConfig(System.String,System.Boolean)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 调用服务名称</param>
            <param name="isServer">是否服务端</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerAttribute.GetConfig(System.String)">
            <summary>
            获取配置信息
            </summary>
            <param name="serviceName">TCP 调用服务名称</param>
            <returns>TCP 调用服务器端配置信息</returns>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.ServerCall`1">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="callType">调用类型</typeparam>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerCall`1.Set(AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.Net.TcpServer.ServerTaskType)">
            <summary>
            设置参数
            </summary>
            <param name="socket">套接字</param>
            <param name="taskType"></param>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerCall`1.Pop">
            <summary>
            获取服务器端调用
            </summary>
            <returns>服务器端调用</returns>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerCall`1.push(`0)">
            <summary>
            服务器端调用入池
            </summary>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.ServerCall`2">
            <summary>
            TCP 服务器端同步调用
            </summary>
            <typeparam name="callType">调用类型</typeparam>
            <typeparam name="inputParameterType">输入参数类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.ServerCall`2.inputParameter">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerCall`2.Set(AutoCSer.Net.TcpInternalServer.ServerSocketSender,AutoCSer.Net.TcpServer.ServerTaskType,`1@)">
            <summary>
            设置参数
            </summary>
            <param name="sender">套接字</param>
            <param name="taskType"></param>
            <param name="inputParameter">输入参数</param>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.ServerCall`2.push(`0)">
            <summary>
            服务器端调用入池
            </summary>
            <param name="call">服务器端调用</param>
        </member>
        <member name="T:AutoCSer.Net.TcpStaticServer.TimeVerify`1">
            <summary>
            时间验证
            </summary>
            <typeparam name="verifyType">验证类型</typeparam>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.TimeVerify`1.lastVerifyTicks">
            <summary>
            最后一次验证时间
            </summary>
        </member>
        <member name="F:AutoCSer.Net.TcpStaticServer.TimeVerify`1.lastVerifyTickLock">
            <summary>
            最后一次验证时间访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Net.TcpStaticServer.TimeVerify`1.verify(AutoCSer.Net.TcpInternalServer.ServerSocketSender,System.UInt64,System.Byte[],System.Int64@)">
            <summary>
            时间验证函数
            </summary>
            <param name="sender"></param>
            <param name="randomPrefix">随机前缀</param>
            <param name="md5Data">MD5 数据</param>
            <param name="ticks">验证时钟周期</param>
            <returns>是否验证成功</returns>
        </member>
        <member name="T:AutoCSer.Net.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Net.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Net.UnionType.Socket">
            <summary>
            套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Net.UnionType.SocketAsyncEventArgs">
            <summary>
            套接字异步事件对象
            </summary>
        </member>
        <member name="T:AutoCSer.NullableBool">
            <summary>
            可控逻辑值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBool.Null">
            <summary>
            空值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBool.False">
            <summary>
            逻辑假值
            </summary>
        </member>
        <member name="F:AutoCSer.NullableBool.True">
            <summary>
            逻辑真值
            </summary>
        </member>
        <member name="T:AutoCSer.NullValue`1">
            <summary>
            空值相关参数
            </summary>
            <typeparam name="valueType">值类型</typeparam>
        </member>
        <member name="F:AutoCSer.NullValue`1.Array">
            <summary>
            0元素数组
            </summary>
        </member>
        <member name="T:AutoCSer.ObjectReference">
            <summary>
            对象引用
            </summary>
        </member>
        <member name="F:AutoCSer.ObjectReference.Value">
            <summary>
            对象
            </summary>
        </member>
        <member name="M:AutoCSer.ObjectReference.Equals(AutoCSer.ObjectReference)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReference.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.ObjectReference.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Pointer">
            <summary>
            指针(因为指针无法静态初始化)
            </summary>
            <summary>
            指针(因为指针无法静态初始化)
            </summary>
        </member>
        <member name="T:AutoCSer.Pointer.Size">
            <summary>
            带长度的指针
            </summary>
            <summary>
            带长度的指针
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.Size.GetSize">
            <summary>
            字节长度
            </summary>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Pointer.Size.Data">
            <summary>
            指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Pointer">
            <summary>
            指针
            </summary>
        </member>
        <member name="F:AutoCSer.Pointer.Size.ByteSize">
            <summary>
            字节长度
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Byte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Char">
            <summary>
            字符指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.Int">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.UInt">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Size.ULong">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.Size.SetNull">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.Size.Set(System.Void*,System.Int32)">
            <summary>
            设置指针数据
            </summary>
            <param name="data"></param>
            <param name="size"></param>
        </member>
        <member name="F:AutoCSer.Pointer.Data">
            <summary>
            指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Byte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.SByte">
            <summary>
            字节指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Char">
            <summary>
            字符指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Short">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.UShort">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Int">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.UInt">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.Long">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="P:AutoCSer.Pointer.ULong">
            <summary>
            整形指针
            </summary>
        </member>
        <member name="M:AutoCSer.Pointer.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.Pointer.Equals(System.Object)">
            <summary>
            指针比较
            </summary>
            <param name="obj">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="M:AutoCSer.Pointer.Equals(AutoCSer.Pointer)">
            <summary>
            指针比较
            </summary>
            <param name="other">待比较指针</param>
            <returns>指针是否相等</returns>
        </member>
        <member name="T:AutoCSer.Pub">
            <summary>
            常用公共定义
            </summary>
            <summary>
            常用公共定义
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.HttpSpiderUserAgent">
            <summary>
            AutoCSer 爬虫标识
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.MinTime">
            <summary>
            最小时间值
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.identity">
            <summary>
            默认自增标识
            </summary>
        </member>
        <member name="P:AutoCSer.Pub.Identity">
            <summary>
            默认自增标识
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.PuzzleValue">
            <summary>
            LGD
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.StartTime">
            <summary>
            程序启用时间
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.identity32">
            <summary>
            默认自增标识
            </summary>
        </member>
        <member name="P:AutoCSer.Pub.Identity32">
            <summary>
            默认自增标识
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.ClearCaches">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="M:AutoCSer.Pub.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.clearUnmanagedCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.ClearCacheNoGC(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Pub.emptyAction">
            <summary>
            空委托
            </summary>
        </member>
        <member name="F:AutoCSer.Pub.EmptyAction">
            <summary>
            空委托
            </summary>
        </member>
        <member name="T:AutoCSer.PubPath">
            <summary>
            常用公共定义
            </summary>
        </member>
        <member name="F:AutoCSer.PubPath.ApplicationPath">
            <summary>
            程序执行主目录(小写字母)
            </summary>
        </member>
        <member name="M:AutoCSer.PubPath.fileNameToLower(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.PubPath.FileNameToLower(System.String)">
            <summary>
            文件名转小写（MONO 不做处理）
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.PubPath.PathCompare(System.String,System.String)">
            <summary>
            文件路径比较
            </summary>
            <param name="path">文件路径</param>
            <param name="fileName">文件名称</param>
            <returns>匹配返回 0</returns>
        </member>
        <member name="T:AutoCSer.Random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.seeds">
            <summary>
            公用种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.secureSeeds">
            <summary>
            安全种子
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current">
            <summary>
            32位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.current64">
            <summary>
            64位种子位置
            </summary>
        </member>
        <member name="F:AutoCSer.Random.currentLock">
            <summary>
            64位种子位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bits">
            <summary>
            随机位缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bitCount">
            <summary>
            随机位缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteLock">
            <summary>
            字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.bytes">
            <summary>
            字节缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.byteCount">
            <summary>
            字节缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortLock">
            <summary>
            双字节缓存访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushorts">
            <summary>
            双字节缓存
            </summary>
        </member>
        <member name="F:AutoCSer.Random.ushortCount">
            <summary>
            双字节缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Random.#ctor">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.nextIndex">
            <summary>
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.Next">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextFloat">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.Next(System.Int32)">
            <summary>
            获取下一个随机数
            </summary>
            <param name="mod">求余取模数</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextBit">
            <summary>
            获取下一个随机位
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextByte">
            <summary>
            获取下一个随机字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextUShort">
            <summary>
            获取下一个随机双字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.nextIndex64">
            <summary>
            获取随机种子位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Random.NextULong">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.NextDouble">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNext">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextUIntNotZero">
            <summary>
            获取下一个非0随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULong">
            <summary>
            获取下一个随机数
            </summary>
        </member>
        <member name="M:AutoCSer.Random.SecureNextULongNotZero">
            <summary>
            获取下一个非0随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Default">
            <summary>
            默认随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Random.Hash">
            <summary>
            随机Hash值(用于防构造)
            </summary>
        </member>
        <member name="T:AutoCSer.RandomKey`1">
            <summary>
            随机防 HASH 构造关键字
            </summary>
            <typeparam name="keyType"></typeparam>
        </member>
        <member name="F:AutoCSer.RandomKey`1.Key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="M:AutoCSer.RandomKey`1.op_Implicit(`0)~AutoCSer.RandomKey{`0}">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.op_Implicit(AutoCSer.RandomKey{`0})~`0">
            <summary>
            隐式转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.Equals(AutoCSer.RandomKey{`0})">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.Equals(`0)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.RandomKey`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Range">
            <summary>
            索引范围
            </summary>
        </member>
        <member name="F:AutoCSer.Range.StartIndex">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Range.EndIndex">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.Range.Length">
            <summary>
            范围长度
            </summary>
        </member>
        <member name="M:AutoCSer.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="M:AutoCSer.Range.Set(System.Int32,System.Int32)">
            <summary>
            重置索引范围
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="endIndex">结束位置</param>
        </member>
        <member name="T:AutoCSer.RangeLength">
            <summary>
            范围
            </summary>
            <summary>
            范围
            </summary>
        </member>
        <member name="M:AutoCSer.RangeLength.Set(System.Int32,System.Int32)">
            <summary>
            设置范围
            </summary>
            <param name="start">起始位置</param>
            <param name="length">数量</param>
        </member>
        <member name="F:AutoCSer.RangeLength.Length">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.RangeLength.Start">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:AutoCSer.RangeLength.#ctor(System.Int32,System.Int32)">
            <summary>
            范围
            </summary>
            <param name="start">起始位置</param>
            <param name="length">数量</param>
        </member>
        <member name="T:AutoCSer.Reflection.Assembly">
            <summary>
            程序集扩展操作
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Assembly.Get(System.String)">
            <summary>
            根据程序集名称获取程序集
            </summary>
            <param name="fullName">程序集名称</param>
            <returns>程序集,失败返回null</returns>
        </member>
        <member name="F:AutoCSer.Reflection.Assembly.nameCache">
            <summary>
            程序集名称缓存
            </summary>
        </member>
        <member name="M:AutoCSer.Reflection.Assembly.loadAssembly(System.Reflection.Assembly)">
            <summary>
            加载程序集
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:AutoCSer.Reflection.Assembly.loadAssembly(System.Object,System.AssemblyLoadEventArgs)">
            <summary>
            加载程序集
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AutoCSer.RemoteType">
            <summary>
            远程类型
            </summary>
        </member>
        <member name="F:AutoCSer.RemoteType.assemblyName">
            <summary>
            程序集名称
            </summary>
        </member>
        <member name="F:AutoCSer.RemoteType.name">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="M:AutoCSer.RemoteType.#ctor(System.Type)">
            <summary>
            远程类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:AutoCSer.RemoteType.op_Implicit(System.Type)~AutoCSer.RemoteType">
            <summary>
            类型隐式转换
            </summary>
            <param name="type">类型</param>
            <returns>远程类型</returns>
        </member>
        <member name="M:AutoCSer.RemoteType.TryGet(System.Type@)">
            <summary>
            尝试获取类型
            </summary>
            <param name="type">类型</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.RemoteType.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.values">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiBuilder.charCount">
            <summary>
            状态字符数量
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="values">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建状态查找数据
            </summary>
            <param name="states">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>状态查找数据</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiSearcher">
            <summary>
            ASCII字节搜索器
            </summary>
            <summary>
            ASCII 字节搜索器
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.Search(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.Search(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.SearchLower(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.SearchLower(AutoCSer.SubString@)">
            <summary>
            获取状态索引
            </summary>
            <param name="value">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.SearchLower(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.Search(AutoCSer.SubArray{System.Byte})">
            <summary>
            获取状态索引
            </summary>
            <param name="data">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.Search(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取状态索引
            </summary>
            <param name="data">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.SearchNotEmpty(System.Byte[])">
            <summary>
            获取状态索引
            </summary>
            <param name="data">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.Search(System.Byte*,System.Byte*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.SearchLower(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            获取状态索引
            </summary>
            <param name="data">匹配状态</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.SearchLower(System.Byte*,System.Byte*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            ASCII字节搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher.UnsafeSearch(System.Char*@)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.AsciiSearcher`1">
            <summary>
            ASCII字节状态搜索
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher`1.Searcher">
            <summary>
            ASCII 字节搜索器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher`1.Array">
            <summary>
            状态数据集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher`1.data">
            <summary>
            状态搜索数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.AsciiSearcher`1.isStaticUnmanaged">
            <summary>
            是否固定内存申请
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.#ctor(System.String[],`0[],System.Boolean)">
            <summary>
            ASCII字节状态搜索
            </summary>
            <param name="states">状态集合</param>
            <param name="values">状态数据集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.Get(System.String,`0)">
            <summary>
            获取状态数据
            </summary>
            <param name="state">查询状态</param>
            <param name="nullValue">默认空值</param>
            <returns>状态数据,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.Get(AutoCSer.SubArray{System.Byte}@,`0)">
            <summary>
            获取状态数据
            </summary>
            <param name="state">查询状态</param>
            <param name="nullValue">默认空值</param>
            <returns>状态数据,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.GetLower(AutoCSer.SubArray{System.Byte}@,`0)">
            <summary>
            获取状态数据
            </summary>
            <param name="state">查询状态</param>
            <param name="nullValue">默认空值</param>
            <returns>状态数据,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.Get(AutoCSer.SubArray{System.Byte},`0)">
            <summary>
            获取状态数据
            </summary>
            <param name="state">查询状态</param>
            <param name="nullValue">默认空值</param>
            <returns>状态数据,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.GetLower(AutoCSer.SubArray{System.Byte},`0)">
            <summary>
            获取状态数据
            </summary>
            <param name="state">查询状态</param>
            <param name="nullValue">默认空值</param>
            <returns>状态数据,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.GetNotEmpty(System.Byte[],`0)">
            <summary>
            获取状态数据
            </summary>
            <param name="state">查询状态</param>
            <param name="nullValue">默认空值</param>
            <returns>状态数据,失败返回默认空值</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.AsciiSearcher`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:AutoCSer.StateSearcher.ByteBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.values">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.bytes">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.nullPrefix">
            <summary>
            空前缀
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.charCount">
            <summary>
            状态字符数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.ByteBuilder.#ctor(AutoCSer.KeyValue{System.Byte[],System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="values">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.ByteBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.ByteBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.ByteBuilder.Create(System.Byte[][],System.Boolean)">
            <summary>
            创建状态查找数据
            </summary>
            <param name="states">状态集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>状态查找数据</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.ByteBuilder.check(AutoCSer.KeyValue{System.Byte[],System.Int32}[])">
            <summary>
            状态检测
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.StateSearcher.ByteBuilder.compareHanlde">
            <summary>
            字节数组比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.ByteBuilder.compare(AutoCSer.KeyValue{System.Byte[],System.Int32},AutoCSer.KeyValue{System.Byte[],System.Int32})">
            <summary>
            字节数组比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharBuilder">
            <summary>
            状态数据创建器
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.names">
            <summary>
            名称集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.Data">
            <summary>
            状态数据
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefix">
            <summary>
            前缀集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.table">
            <summary>
            状态矩阵
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.stateCount">
            <summary>
            状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableCount">
            <summary>
            矩阵状态数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.prefixSize">
            <summary>
            前缀数量
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.chars">
            <summary>
            状态字符集合
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.#ctor(AutoCSer.KeyValue{System.String,System.Int32}[],System.Boolean)">
            <summary>
            状态数据创建器
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.count(System.Int32,System.Int32,System.Int32)">
            <summary>
            计算状态数量
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.create(System.Int32,System.Int32,System.Int32)">
            <summary>
            创建状态数据
            </summary>
            <param name="start">起始名称位置</param>
            <param name="end">结束名称位置</param>
            <param name="current"></param>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharBuilder.StringCompare">
            <summary>
            字符串比较大小
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.compare(AutoCSer.KeyValue{System.String,System.Int32},AutoCSer.KeyValue{System.String,System.Int32})">
            <summary>
            字符串比较大小
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Check(AutoCSer.KeyValue{System.String,System.Int32}[])">
            <summary>
            状态检测
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharBuilder.Create(System.String[],System.Boolean)">
            <summary>
            创建名称查找数据
            </summary>
            <param name="names">名称集合</param>
            <param name="isStaticUnmanaged">是否固定内存申请</param>
            <returns>名称查找数据</returns>
        </member>
        <member name="T:AutoCSer.StateSearcher.CharSearcher">
            <summary>
            字符搜索器
            </summary>
            <summary>
            字符搜索器
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.SearchLower(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value"></param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.SearchLower(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.state">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.StateSearcher.CharSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            字符搜索器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.GetCharIndex(System.Char*,System.Char*,System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="charStart">特殊字符串查找表</param>
            <param name="charEnd">特殊字符串查找表结束位置</param>
            <param name="value">特殊字符</param>
            <returns>特殊字符位置,匹配失败返回null</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.Search(System.String)">
            <summary>
            获取状态索引
            </summary>
            <param name="value"></param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Char*)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="end">匹配结束位置</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.StateSearcher.CharSearcher.UnsafeSearch(System.Char*,System.Int32)">
            <summary>
            获取状态索引
            </summary>
            <param name="start">匹配起始位置</param>
            <param name="length">匹配长度</param>
            <returns>状态索引,失败返回-1</returns>
        </member>
        <member name="T:AutoCSer.StringArray">
            <summary>
            字符串连接(适应于较长的字符串链接,一个一个字符添加的请用unmanagedStream)
            </summary>
        </member>
        <member name="F:AutoCSer.StringArray.array">
            <summary>
            字符串数组
            </summary>
        </member>
        <member name="P:AutoCSer.StringArray.Length">
            <summary>
            字符串数量
            </summary>
        </member>
        <member name="M:AutoCSer.StringArray.Add(System.String)">
            <summary>
            添加字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.StringArray.Add(AutoCSer.StringArray)">
            <summary>
            添加数据集合
            </summary>
            <param name="values">数据集合</param>
        </member>
        <member name="M:AutoCSer.StringArray.Append(System.String[])">
            <summary>
            添加字符串
            </summary>
            <param name="values">字符串集合</param>
        </member>
        <member name="M:AutoCSer.StringArray.Append(AutoCSer.LeftArray{System.String}@)">
            <summary>
            添加字符串
            </summary>
            <param name="values">字符串集合</param>
        </member>
        <member name="M:AutoCSer.StringArray.Reverse">
            <summary>
            逆转列表
            </summary>
        </member>
        <member name="M:AutoCSer.StringArray.Join(System.Char)">
            <summary>
            连接字符串集合
            </summary>
            <param name="join">字符连接</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:AutoCSer.StringArray.ToString">
            <summary>
            生成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:AutoCSer.SubArray`1">
            <summary>
            数组子串
            </summary>
            <summary>
            数组子串
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.SubArray`1.Null">
            <summary>
            公共数组空子串
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.BufferArray">
            <summary>
            原数组
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.StartIndex">
            <summary>
            原数组中的起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(`0[])">
            <summary>
            数组子串
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(AutoCSer.ListArray{`0})">
            <summary>
            数组子串
            </summary>
            <param name="array">数组</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            数组子串
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            数组子串
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.SetNull">
            <summary>
            置空并释放数组
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.SetFull">
            <summary>
            重置数据
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(`0[])">
            <summary>
            重置数据
            </summary>
            <param name="array"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetArray``1(System.Func{`0,``0})">
            <summary>
            转换数组
            </summary>
            <typeparam name="arrayType">数组类型</typeparam>
            <param name="getValue">数据获取委托</param>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.GetSub(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.SubArray`1.Array">
            <summary>
            原数组
            </summary>
        </member>
        <member name="F:AutoCSer.SubArray`1.Start">
            <summary>
            原数组中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubArray`1.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.EndIndex">
            <summary>
            数据结束位置
            </summary>
        </member>
        <member name="P:AutoCSer.SubArray`1.Item(System.Int32)">
            <summary>
            设置或获取值
            </summary>
            <param name="index">位置</param>
            <returns>数据值</returns>
        </member>
        <member name="P:AutoCSer.SubArray`1.IsReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.System#Collections#Generic#IEnumerable{valueType}#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            枚举器
            </summary>
            <returns>枚举器</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.Clear">
            <summary>
            清除所有数据
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.Empty">
            <summary>
            长度设为0
            </summary>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(System.Int32,System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Set(`0[],System.Int32,System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="value">数组,不能为null</param>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.MoveStart(System.Int32)">
            <summary>
            修改起始位置
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SubArray`1.setLength(System.Int32)">
            <summary>
            设置数据容器长度
            </summary>
            <param name="count">数据长度</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Add(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Insert(System.Int32,`0)">
            <summary>
            插入数据
            </summary>
            <param name="index">插入位置</param>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.Contains(`0)">
            <summary>
            判断是否存在数据
            </summary>
            <param name="value">匹配数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.IndexOf(`0)">
            <summary>
            获取匹配数据位置
            </summary>
            <param name="value">匹配数据</param>
            <returns>匹配位置,失败为-1</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.Remove(`0)">
            <summary>
            移除数据
            </summary>
            <param name="value">数据</param>
            <returns>是否存在移除数据</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.RemoveAt(System.Int32)">
            <summary>
            移除数据
            </summary>
            <param name="index">数据位置</param>
            <returns>被移除数据</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="values">目标数据</param>
            <param name="index">目标位置</param>
        </member>
        <member name="M:AutoCSer.SubArray`1.ToArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="M:AutoCSer.SubArray`1.getArray">
            <summary>
            转换数组
            </summary>
            <returns>数组</returns>
        </member>
        <member name="T:AutoCSer.SubBuffer.Pool">
            <summary>
            缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.minBufferSizeBits">
            <summary>
            最小缓冲区字节大小二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.bufferSizeBits">
            <summary>
            缓冲区字节大小二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.bufferSize">
            <summary>
            128KB 避免 GC 压缩
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.bufferLock">
            <summary>
            缓冲区数组访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.Buffers">
            <summary>
            缓冲区数组
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.freeStart">
            <summary>
            空闲缓冲区起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.freeCurrent">
            <summary>
            当前空闲缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.freeEnd">
            <summary>
            空闲缓冲区结束为止
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.backFree">
            <summary>
            备用空闲缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.createFreeLock">
            <summary>
            创建空闲缓冲区访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.freeBufferLock">
            <summary>
            空闲缓冲区访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.bufferIndex">
            <summary>
            当前缓冲区索引
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.bufferCount">
            <summary>
            缓冲区数量
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.Size">
            <summary>
            缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.sizeBits">
            <summary>
            缓冲区字节大小二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.arrayBits">
            <summary>
            缓冲区分块数量二进制位数
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.arrayBufferCount">
            <summary>
            缓冲区分块数量
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.ArrayIndexMark">
            <summary>
            缓冲区分块数量 and 值
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.#ctor(System.Int32)">
            <summary>
            缓冲区池
            </summary>
            <param name="sizeBits">缓冲区字节大小二进制位数</param>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.Get(AutoCSer.SubBuffer.PoolBuffer@)">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.Get(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            获取缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.Push(AutoCSer.SubBuffer.PoolBuffer@)">
            <summary>
            添加缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.Push(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            添加缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.clear">
            <summary>
            清除缓存数据
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.pools">
            <summary>
            缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Pool.poolLock">
            <summary>
            缓冲区池访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.GetPool(AutoCSer.SubBuffer.Size)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.getPool(System.Int32,System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="bits"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.getPool(System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.GetPool(System.Int32)">
            <summary>
            获取缓冲区池
            </summary>
            <param name="size">缓冲区字节大小</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.GetBuffer(AutoCSer.SubBuffer.PoolBufferFull@,System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.SubBuffer.Pool.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.SubBuffer.PoolBuffer">
            <summary>
            缓冲区索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.PoolBuffer.Pool">
            <summary>
            缓冲区池
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.PoolBuffer.Index">
            <summary>
            缓冲区索引信息
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBuffer.Set(AutoCSer.SubBuffer.Pool,System.UInt32)">
            <summary>
            设置缓冲区索引信息
            </summary>
            <param name="pool">缓冲区池</param>
            <param name="index">缓冲区索引信息</param>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBuffer.Free">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBuffer.CopyToClear(AutoCSer.SubBuffer.PoolBuffer@)">
            <summary>
            复制数据并清除数据源
            </summary>
            <param name="targetBuffer"></param>
        </member>
        <member name="T:AutoCSer.SubBuffer.PoolBufferFull">
            <summary>
            缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.PoolBufferFull.PoolBuffer">
            <summary>
            缓冲区索引信息
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.PoolBufferFull.Buffer">
            <summary>
            缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.PoolBufferFull.StartIndex">
            <summary>
            缓冲区起始位置
            </summary>
        </member>
        <member name="P:AutoCSer.SubBuffer.PoolBufferFull.Length">
            <summary>
            缓冲区长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubBuffer.PoolBufferFull.NullLength">
            <summary>
            缓冲区长度，可能返回 0
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.Set(System.Byte[],System.Int32)">
            <summary>
            设置缓冲区
            </summary>
            <param name="buffer"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.Free">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.TryFree">
            <summary>
            释放缓冲区
            </summary>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.CopyToClear(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            复制数据并清除数据源
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.ToSubByteArray(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            设置数组子串
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.CopyTo(AutoCSer.SubBuffer.PoolBufferFull@,System.Int32)">
            <summary>
            复制数据
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SubBuffer.PoolBufferFull.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.SubBuffer.Size">
            <summary>
            缓冲区字节大小
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Byte256">
            <summary>
            256B
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Byte512">
            <summary>
            512B
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte">
            <summary>
            1KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte2">
            <summary>
            2KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte4">
            <summary>
            4KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte8">
            <summary>
            8KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte16">
            <summary>
            16KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte32">
            <summary>
            32KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte64">
            <summary>
            64KB
            </summary>
        </member>
        <member name="F:AutoCSer.SubBuffer.Size.Kilobyte128">
            <summary>
            128KB
            </summary>
        </member>
        <member name="T:AutoCSer.SubString">
            <summary>
            字符子串
            </summary>
            <summary>
            字符子串
            </summary>
        </member>
        <member name="P:AutoCSer.SubString.StartIndex">
            <summary>
            原字符串中的起始位置
            </summary>
        </member>
        <member name="P:AutoCSer.SubString.Count">
            <summary>
            字符子串长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubString.EndIndex">
            <summary>
            原字符串中的结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.String)">
            <summary>
            字符子串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            字符子串
            </summary>
            <param name="value">字符串</param>
            <param name="startIndex">起始位置</param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            字符子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="value">字符串</param>
            <param name="length">长度</param>
        </member>
        <member name="M:AutoCSer.SubString.MoveStart(System.Int32)">
            <summary>
            修改起始位置
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">起始位置</param>
            <returns>子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.IndexOf(System.Char)">
            <summary>
            字符查找
            </summary>
            <param name="value">查找值</param>
            <returns>字符位置,失败返回-1</returns>
        </member>
        <member name="M:AutoCSer.SubString.Split(System.Char)">
            <summary>
            分割字符串
            </summary>
            <param name="split">分割符</param>
            <returns>字符子串集合</returns>
        </member>
        <member name="M:AutoCSer.SubString.CompareTo(AutoCSer.SubString@)">
            <summary>
            比较字符串大小
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubString.Trim">
            <summary>
            删除前后空格
            </summary>
            <returns>删除前后空格</returns>
        </member>
        <member name="M:AutoCSer.SubString.TrimEnd(System.Char)">
            <summary>
            删除后缀
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubString.StartsWith(System.String)">
            <summary>
            是否以字符串开始
            </summary>
            <param name="value">字符串</param>
            <returns>是否以字符串开始</returns>
        </member>
        <member name="F:AutoCSer.SubString.String">
            <summary>
            原字符串
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Start">
            <summary>
            原字符串中的起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.SubString.Length">
            <summary>
            字符子串长度
            </summary>
        </member>
        <member name="P:AutoCSer.SubString.Item(System.Int32)">
            <summary>
            获取字符
            </summary>
            <param name="index">字符位置</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.SubString.SetNull">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.SubString.Set(System.String,System.Int32,System.Int32)">
            <summary>
            设置数据长度
            </summary>
            <param name="value">字符串,不能为null</param>
            <param name="startIndex">起始位置,必须合法</param>
            <param name="length">长度,必须合法</param>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(System.String)~AutoCSer.SubString">
            <summary>
            字符串隐式转换为子串
            </summary>
            <param name="value">字符串</param>
            <returns>字符子串</returns>
        </member>
        <member name="M:AutoCSer.SubString.op_Implicit(AutoCSer.SubString)~System.String">
            <summary>
            字符子串隐式转换为字符串
            </summary>
            <param name="value">字符子串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetHashCode">
            <summary>
            HASH值
            </summary>
            <returns>HASH值</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.Object)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="obj">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(AutoCSer.SubString@)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.Equals(System.String)">
            <summary>
            判断子串是否相等
            </summary>
            <param name="other">待比较子串</param>
            <returns>子串是否相等</returns>
        </member>
        <member name="M:AutoCSer.SubString.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:AutoCSer.SubString.GetSub(System.Int32,System.Int32)">
            <summary>
            获取子串
            </summary>
            <param name="startIndex">起始位置</param>
            <param name="length">长度</param>
            <returns>子串</returns>
        </member>
        <member name="T:AutoCSer.Threading.AutoWaitHandle">
            <summary>
            一次性等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AutoWaitHandle.waitLock">
            <summary>
            同步等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.AutoWaitHandle.isWait">
            <summary>
            是否等待中
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitHandle.Set(System.Int32)">
            <summary>
            初始化数据
            </summary>
            <param name="isWait">是否等待中</param>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitHandle.Wait">
            <summary>
            等待结束
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitHandle.Set">
            <summary>
            结束等待
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.AutoWaitHandle.TryWait">
            <summary>
            如果初始化则等待结束
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.DoubleLink`1">
            <summary>
            双向链表节点
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.DoubleLinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.DoubleLinkPrevious">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.freeNotEnd">
            <summary>
            弹出节点
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.DoubleLink`1.YieldLink">
            <summary>
            双向链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.YieldLink.End">
            <summary>
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.DoubleLink`1.YieldLink.linkLock">
            <summary>
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.YieldLink.PushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.DoubleLink`1.YieldLink.PopNotNull(`0)">
            <summary>
            弹出节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Threading.IndexValuePool`1">
            <summary>
            索引池
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.IndexValuePool`1.ArrayLock">
            <summary>
            对象池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.IndexValuePool`1.Array">
            <summary>
            对象池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.IndexValuePool`1.PoolIndex">
            <summary>
            对象池当前索引位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.IndexValuePool`1.freeIndexs">
            <summary>
            空闲索引集合
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.IndexValuePool`1.freeIndex">
            <summary>
            当前空闲索引
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.Reset(System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.GetIndexContinue">
            <summary>
            获取池索引(当前占用锁状态)并保持锁状态
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.FreeExit(System.Int32)">
            <summary>
            释放对象(当前占用锁状态)
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.FreeContinue(System.Int32)">
            <summary>
            释放对象(当前占用锁状态)
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.newFree(System.Int32)">
            <summary>
            释放对象
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.ClearIndexExit(System.Int32)">
            <summary>
            清除索引数据
            </summary>
            <param name="poolIndex">对象池当前索引位置</param>
        </member>
        <member name="M:AutoCSer.Threading.IndexValuePool`1.ClearIndexContinue">
            <summary>
            清除索引数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Interlocked">
            <summary>
            原子操作扩张
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Interlocked.CompareExchangeYield(System.Int32@)">
            <summary>
            循环等待(适应于等待时间极短的情况)
            </summary>
            <param name="value">目标值</param>
        </member>
        <member name="T:AutoCSer.Threading.Link`1">
            <summary>
            链表节点
            </summary>
            <summary>
            链表节点
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldLink">
            <summary>
            链表（用于冲突概率低的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldLink.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldLink.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Link`1.YieldLink.IsEmpty">
            <summary>
            是否空链表
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.GetClear">
            <summary>
            获取链表头部并清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.PushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.SinglePop">
            <summary>
            弹出节点（单线程）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldLink.PushLink(`0,`0)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.Queue">
            <summary>
            链表节点队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.#ctor(`0)">
            <summary>
            节点队列链表
            </summary>
            <param name="head">节点队列头部</param>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.Queue.head">
            <summary>
            节点队列头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.Queue.end">
            <summary>
            节点队列尾部
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Link`1.Queue.IsEmpty">
            <summary>
            是否空队列
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.GetClear">
            <summary>
            获取链表头部并清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.SetHeaderNextNull">
            <summary>
            头节点 next 设置为 null
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.Push(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.PopOnly">
            <summary>
            弹出节点（不处理下一个节点，可能会造成少许暂时的内存泄露）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.UnsafePopOnly">
            <summary>
            弹出节点（不处理下一个节点，可能会造成少许暂时的内存泄露）
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.Queue.Exchange(AutoCSer.Threading.Link{`0}.Queue@)">
            <summary>
            链表互换
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldQueue">
            <summary>
            链表节点队列
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldQueue.Head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldQueue.end">
            <summary>
            链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldQueue.queueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.#ctor(`0)">
            <summary>
            节点队列链表
            </summary>
            <param name="head">节点队列头部</param>
        </member>
        <member name="P:AutoCSer.Threading.Link`1.YieldQueue.IsEmpty">
            <summary>
            是否空链表
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetClear">
            <summary>
            获取链表头部并清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetClear(`0@)">
            <summary>
            获取链表并清除数据
            </summary>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.GetToEndClear(`0@)">
            <summary>
            获取链表并清除数据
            </summary>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.Push(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.IsPushHead(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.PushHead(`0@,`0)">
            <summary>
            添加链表
            </summary>
            <param name="head"></param>
            <param name="end"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldQueue.IsPushHead(`0@,`0)">
            <summary>
            添加链表
            </summary>
            <param name="head"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.LinkNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.GetLinkNextClear">
            <summary>
            获取并清除下一个节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldPoolLink">
            <summary>
            缓存对象链表（用于冲突概率低的场景）
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.maxCount">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.popLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPoolLink.count">
            <summary>
            缓存数量
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.PushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.IsPushNotNull(`0)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.Pop">
            <summary>
            弹出节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPoolLink.PushLink(`0,`0,System.Int32)">
            <summary>
            添加链表
            </summary>
            <param name="value">链表头部</param>
            <param name="end">链表尾部</param>
            <param name="count">数据数量</param>
        </member>
        <member name="T:AutoCSer.Threading.Link`1.YieldPool">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Link`1.YieldPool.Default">
            <summary>
            链表节点池
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Link`1.YieldPool.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Threading.ILinkTask">
            <summary>
            链表任务节点接口
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.ILinkTask.LinkTaskTicks">
            <summary>
            线程切换检测时间
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.ILinkTask.NextLinkTask">
            <summary>
            下一个任务节点
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ILinkTask.SingleRunLinkTask">
            <summary>
            执行任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkTask">
            <summary>
            链表任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTask.head">
            <summary>
            链表任务节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTask.isThread">
            <summary>
            是否启动线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkTask.Add(AutoCSer.Threading.ILinkTask)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkTask.addNullHead(AutoCSer.Threading.ILinkTask)">
            <summary>
            添加任务
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkTask.runThread">
            <summary>
            启动线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkTask.Run">
            <summary>
            链表任务处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTask.Task">
            <summary>
            链表任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTask.tasks">
            <summary>
            链表任务集合
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTask.taskIndex">
            <summary>
            当前任务处理索引
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTask.isAllTask">
            <summary>
            是否已经创建所有任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkTask.check">
            <summary>
            线程切换检测
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkTaskConfigBase">
            <summary>
            链表任务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfigBase.timer">
            <summary>
            线程切换检测定时器
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfigBase.Stopwatch">
            <summary>
            线程切换检测计时器
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfigBase.TaskTicks">
            <summary>
            线程切换超时时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfigBase.isCheck">
            <summary>
            是否正在检测线程切换
            </summary>
        </member>
        <member name="E:AutoCSer.Threading.LinkTaskConfigBase.onCheck">
            <summary>
            检测线程切换事件
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskConfigBase.set(System.Int32,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="threadCount"></param>
            <param name="newThreadMilliseconds"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskConfigBase.check(System.Object)">
            <summary>
            线程切换检测
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskConfigBase.OnCheck(System.Action)">
            <summary>
            检测线程切换事件
            </summary>
            <param name="onCheck"></param>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskConfigBase.IsCheck(System.Int64)">
            <summary>
            判断是否切换线程
            </summary>
            <param name="currentTaskTicks"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskConfigBase.nullCheck">
            <summary>
            线程切换检测
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkTaskConfig">
            <summary>
            链表任务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfig.ThreadCount">
            <summary>
            线程数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfig.NewThreadMilliseconds">
            <summary>
            线程切换检测毫秒数量，默认为 10 毫秒
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskConfig.set">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskConfig.Default">
            <summary>
            链表任务配置
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LinkTaskThread`1">
            <summary>
            链表任务线程
            </summary>
            <typeparam name="taskType">任务对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.threadHandle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.head">
            <summary>
            链表头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.currentTaskTicks">
            <summary>
            当前处理任务时钟周期
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.taskTicks">
            <summary>
            线程切换超时时钟周期
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskThread`1.#ctor(System.Int64)">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
            <param name="taskTicks">线程切换超时时钟周期</param>
        </member>
        <member name="M:AutoCSer.Threading.LinkTaskThread`1.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.taskIndex">
            <summary>
            当前任务处理索引
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LinkTaskThread`1.isAllTask">
            <summary>
            是否已经创建所有任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LockDictionary`2">
            <summary>
            字典
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LockDictionary`2.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockDictionary`2.dictionaryLock">
            <summary>
            访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.Set(`0,`1,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="oldValue">被替换的数据</param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockDictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LockEquatableLastDictionary`2">
            <summary>
            字典
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LockEquatableLastDictionary`2.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockEquatableLastDictionary`2.Lock">
            <summary>
            访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockEquatableLastDictionary`2.lastKey">
            <summary>
            最后一次访问的关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockEquatableLastDictionary`2.lastValue">
            <summary>
            最后一次访问的数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockEquatableLastDictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockEquatableLastDictionary`2.TryGetValue(`0@,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockEquatableLastDictionary`2.TryGetValueEnter(`0@,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockEquatableLastDictionary`2.Set(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockEquatableLastDictionary`2.SetOnly(`0@,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockEquatableLastDictionary`2.Exit">
            <summary>
            释放目标
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.LockLastDictionary`2">
            <summary>
            最后关键字缓存字典
            </summary>
            <typeparam name="keyType"></typeparam>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.LockLastDictionary`2.dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockLastDictionary`2.dictionaryLock">
            <summary>
            访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockLastDictionary`2.lastLock">
            <summary>
            最后一次访问数据锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockLastDictionary`2.lastKey">
            <summary>
            最后一次访问的关键字
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.LockLastDictionary`2.lastValue">
            <summary>
            最后一次访问的数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockLastDictionary`2.Clear">
            <summary>
            清除数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.LockLastDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns>是否存在数据</returns>
        </member>
        <member name="M:AutoCSer.Threading.LockLastDictionary`2.Set(`0,`1)">
            <summary>
            设置数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.LockLastDictionary`2.Exit">
            <summary>
            释放目标
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Pub">
            <summary>
            常用公共定义
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Pub.CpuCount">
            <summary>
            CPU核心数量
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.QueueTaskThread`1">
            <summary>
            队列任务线程
            </summary>
            <typeparam name="taskType">任务对象类型</typeparam>
        </member>
        <member name="F:AutoCSer.Threading.QueueTaskThread`1.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.QueueTaskThread`1.threadHandle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.QueueTaskThread`1.head">
            <summary>
            队列头部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.QueueTaskThread`1.end">
            <summary>
            队列尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.QueueTaskThread`1.queueLock">
            <summary>
            弹出节点访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskThread`1.#ctor(System.Boolean)">
            <summary>
            TCP 服务器端同步调用任务处理
            </summary>
            <param name="isBackground">是否后台线程</param>
        </member>
        <member name="M:AutoCSer.Threading.QueueTaskThread`1.run">
            <summary>
            任务线程处理
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.RingPool">
            <summary>
            环池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool.PadCount">
            <summary>
            数组前后填充数量
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.RingPool`1">
            <summary>
            环池数据类型
            </summary>
            <typeparam name="valueType"></typeparam>
        </member>
        <member name="T:AutoCSer.Threading.RingPool`1.ArrayValue">
            <summary>
            数组元素
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.ArrayValue.Value">
            <summary>
            数组元素
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.ArrayValue.Pop">
            <summary>
            弹出数组元素
            </summary>
            <returns>数组元素</returns>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.ring">
            <summary>
            环池数组
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.count">
            <summary>
            环大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.countLess">
            <summary>
            环索引值
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writeIndex">
            <summary>
            预写位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writeEndIndex">
            <summary>
            可写结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writeEndLock">
            <summary>
            可写结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.writedIndex">
            <summary>
            已写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readIndex">
            <summary>
            预读位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readEndIndex">
            <summary>
            可读结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readEndLock">
            <summary>
            可读结束位置访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.readedIndex">
            <summary>
            已读取位置
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.#ctor">
            <summary>
            环池
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.PushNotNull(`0)">
            <summary>
            添加数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.Pop">
            <summary>
            弹出数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.RingPool`1.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="F:AutoCSer.Threading.RingPool`1.Default">
            <summary>
            默认环池
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Thread.CallType">
            <summary>
            调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.Action">
            <summary>
            委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.CompileBinarySerialize">
            <summary>
            二进制序列化预编译
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.CompileBinaryDeSerialize">
            <summary>
            二进制反序列化预编译
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.CompileJsonSerialize">
            <summary>
            JSON 序列化预编译
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.CompileJsonDeSerialize">
            <summary>
            JSON 反序列化预编译
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.CompileSimpleSerialize">
            <summary>
            简单序列化预编译
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.CompileSimpleDeSerialize">
            <summary>
            简单反序列化预编译
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.DomainUnloadRemoveLast">
            <summary>
            删除应用程序卸载处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.DomainUnloadRemoveLastRun">
            <summary>
            删除应用程序卸载处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.FileStreamWriterDispose">
            <summary>
            关闭文件流写入器
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.FileStreamWriteFile">
            <summary>
            文件流写入器写入文件数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.LinkTaskRun">
            <summary>
            链表任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.ProcessCopyer">
            <summary>
            进程文件复制
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpClientSocketBaseCreate">
            <summary>
            创建 TCP 服务客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpClientSocketSenderVirtualBuildOutput">
            <summary>
            TCP 客户端套接字创建数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpInternalClientSocketSenderBuildOutput">
            <summary>
            TCP 内部服务客户端套接字创建数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpInternalServerGetSocket">
            <summary>
            TCP 内部服务获取客户端请求
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpInternalServerSocketSenderBuildOutput">
            <summary>
            TCP 内部服务套接字创建数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpOpenClientSocketSenderBuildOutput">
            <summary>
            TCP 服务客户端套接字创建数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpOpenServerGetSocket">
            <summary>
            TCP 服务获取客户端请求
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpOpenServerOnSocket">
            <summary>
            TCP 服务套接字处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpOpenServerSocketSenderBuildOutput">
            <summary>
            TCP 服务套接字创建数据发送
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallType.TcpServerSocketSenderVirtualBuildOutput">
            <summary>
            TCP 服务套接字创建数据发送
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Thread.CallInfo">
            <summary>
            调用信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallInfo.Value">
            <summary>
            任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.CallInfo.Type">
            <summary>
            调用类型
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.CallInfo.Set(System.Object,AutoCSer.Threading.Thread.CallType)">
            <summary>
            调用信息
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.CallInfo.Call">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.Thread.AutoWaitHandle">
            <summary>
            一次性等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.AutoWaitHandle.waitLock">
            <summary>
            同步等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.AutoWaitHandle.isWait">
            <summary>
            是否等待中
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.AutoWaitHandle.Set(System.Int32)">
            <summary>
            初始化数据
            </summary>
            <param name="isWait">是否等待中</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.AutoWaitHandle.Wait">
            <summary>
            等待结束
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.AutoWaitHandle.Set">
            <summary>
            结束等待
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.threadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.threadHandle">
            <summary>
            线程句柄
            </summary>
        </member>
        <member name="P:AutoCSer.Threading.Thread.IsAborted">
            <summary>
            线程是否已经退出
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.task">
            <summary>
            任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.Thread.waitHandle">
            <summary>
            等待事件
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.#ctor(AutoCSer.Threading.ThreadPool)">
            <summary>
            线程池线程
            </summary>
            <param name="threadPool">线程池</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.#ctor(AutoCSer.Threading.ThreadPool,System.Object,AutoCSer.Threading.Thread.CallType)">
            <summary>
            线程池线程
            </summary>
            <param name="threadPool">线程池</param>
            <param name="task">任务委托</param>
            <param name="taskType">任务委托调用类型</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.exitTest">
            <summary>
            退出测试线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.runBackground">
            <summary>
            运行线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.run">
            <summary>
            运行线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.Thread.RunTask(System.Object,AutoCSer.Threading.Thread.CallType)">
            <summary>
            执行任务
            </summary>
            <param name="task">任务委托</param>
            <param name="taskType">任务委托调用类型</param>
        </member>
        <member name="M:AutoCSer.Threading.Thread.StopLink">
            <summary>
            结束线程
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Threading.ThreadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.TinyStackSize">
            <summary>
            最低线程堆栈大小 128KB
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.defaultStackSize">
            <summary>
            默认线程堆栈大小 1MB
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.exitNext">
            <summary>
            下一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.exitPrevious">
            <summary>
            上一个节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.threads">
            <summary>
            线程链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.StackSize">
            <summary>
            线程堆栈大小
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.IsBackground">
            <summary>
            是否后台线程
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.isDisposed">
            <summary>
            是否已经释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.#ctor(System.Int32,System.Boolean)">
            <summary>
            线程池
            </summary>
            <param name="stackSize">线程堆栈大小</param>
            <param name="isBackground">是否后台线程</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.disposePool">
            <summary>
            释放线程池
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Push(AutoCSer.Threading.Thread)">
            <summary>
            线程入池
            </summary>
            <param name="thread">线程池线程</param>
            <returns>是否已经释放资源</returns>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.FastStart(System.Action)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task">任务委托</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.FastStart(System.Object,AutoCSer.Threading.Thread.CallType)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task">任务委托</param>
            <param name="taskType">任务委托调用类型</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.CheckStart(System.Object,AutoCSer.Threading.Thread.CallType)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task">任务委托</param>
            <param name="taskType">任务委托调用类型</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.Start(System.Action)">
            <summary>
            获取一个线程并执行任务
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:AutoCSer.Threading.ThreadPool.ExitLink">
            <summary>
            双向链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.ExitLink.End">
            <summary>
            链表尾部
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.ExitLink.linkLock">
            <summary>
            链表访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.ExitLink.GetClear">
            <summary>
            获取链表尾部并清除数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.ExitLink.Push(AutoCSer.Threading.ThreadPool)">
            <summary>
            添加节点
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.ExitLink.Pop(AutoCSer.Threading.ThreadPool)">
            <summary>
            弹出节点
            </summary>
            <param name="value"></param>
            <returns>是否成功</returns>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.Tiny">
            <summary>
            微型线程池,堆栈 128K
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.TinyBackground">
            <summary>
            微型后台线程池,堆栈 128K
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.exitTestThread">
            <summary>
            退出测试线程
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.exitThreadPools">
            <summary>
            前台线程池集合
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.isThreadPoolExit">
            <summary>
            前台线程池集合访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadPool.timer">
            <summary>
            激活计时器
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.CheckExit">
            <summary>
            前台退出测试
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.exit">
            <summary>
            前台线程退出
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.clearExit">
            <summary>
            清除线程退出数据
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadPool.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Threading.ThreadYield">
            <summary>
            线程操作
            </summary>
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.Yield">
            <summary>
            线程休眠
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.ThreadYield.Type">
            <summary>
            冲突统计类型
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.Unknown">
            <summary>
            未知的用户调用
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SubBufferPoolSetBackFree">
            <summary>
            设置备用空闲缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNextBit">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNextByte">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNextUShort">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.RandomNext64">
            <summary>
            获取随机数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.NamePoolGet">
            <summary>
            字符串名称申请
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MemberMapPoolFreePush">
            <summary>
            成员位图内存池空闲地址入池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.UnmanagedPoolFreePush">
            <summary>
            非托管内存池空闲地址入池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SubBufferPoolPush">
            <summary>
            添加缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SocketAsyncEventArgsPush">
            <summary>
            套接字异步事件对象池添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlConnectionPoolPush">
            <summary>
            Sql 连接池添加连接
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.FileLogPushDebug">
            <summary>
            添加日志信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlLinkQueueTaskPush">
            <summary>
            Sql 操作链表任务队列添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TimerLinkQueuePush">
            <summary>
            定时链表队列添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkPush">
            <summary>
            链表添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkDoublePush">
            <summary>
            双向链表添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldQueuePush">
            <summary>
            队列链表添加节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallbackSetCommandIndex">
            <summary>
            TCP 调用客户端回调保持设置命令会话标识
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MemberMapPoolMemory">
            <summary>
            成员位图内存池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MemberMapPoolFreePop">
            <summary>
            成员位图内存池获取空闲地址
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.UnmanagedPoolFreePop">
            <summary>
            非托管内存池获取空闲地址
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SubBufferPoolPop">
            <summary>
            获取缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SocketAsyncEventArgsPop">
            <summary>
            套接字异步事件对象池弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlConnectionPoolPop">
            <summary>
            Sql 连接池弹出连接
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.FileLogExchangeDebug">
            <summary>
            交换日志队列信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlLinkQueueTaskPop">
            <summary>
            Sql 操作链表任务队列弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TimerLinkQueuePop">
            <summary>
            定时链表队列弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkPop">
            <summary>
            链表弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldLinkDoublePop">
            <summary>
            双向链表弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.YieldQueuePop">
            <summary>
            队列链表弹出节点
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallbackDispose">
            <summary>
            释放 TCP 调用客户端回调保持
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.LockLastDictionaryGet">
            <summary>
            最后关键字缓存字典获取数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.LockLastDictionarySet">
            <summary>
            最后关键字缓存字典设置数据
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlLogStreamLoadMember">
            <summary>
            Sql 日志流成员加载检测
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SqlNowTimeSet">
            <summary>
            Sql 时间设置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TimeVerifyServerSetTicks">
            <summary>
            时间验证服务设置验证时间
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.SocketTimeoutLinkCancelTimeout">
            <summary>
            套接字超时取消等待
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpCommandClientSetSocket">
            <summary>
            设置 TCP 客户端套接字
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallback">
            <summary>
            TCP 服务端保持回调处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.TcpServerKeepCallbackCancel">
            <summary>
            客户端强制终止 TCP 服务端保持回调
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.HtmlTitleHttpClient">
            <summary>
            HTML 标题获取客户端操作
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.CacheServerGetBuffer">
            <summary>
            缓存服务获取数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.MessageQueueGetBuffer">
            <summary>
            消息队列获取数据缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.Type.Count">
            <summary>
            冲突统计类型数量
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.ThreadYield.yieldCounts">
            <summary>
            冲突统计集合（非线程安全）
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.Yield(AutoCSer.Threading.ThreadYield.Type)">
            <summary>
            
            </summary>
            <param name="type">冲突统计类型</param>
        </member>
        <member name="M:AutoCSer.Threading.ThreadYield.YieldOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimerLink`1">
            <summary>
            定时链表
            </summary>
            <typeparam name="timerType"></typeparam>
        </member>
        <member name="F:AutoCSer.Threading.TimerLink`1.seconds">
            <summary>
            超时秒数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerLink`1.count">
            <summary>
            引用次数
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerLink`1.isTimer">
            <summary>
            是否已经触发定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerLink`1.currentSeconds">
            <summary>
            当前秒计数
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimerLink`1.#ctor(System.Int32)">
            <summary>
            定时器双向链表节点
            </summary>
            <param name="seconds">超时秒数</param>
        </member>
        <member name="M:AutoCSer.Threading.TimerLink`1.set(`0)">
            <summary>
            初始化
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Threading.TimerLink`1.free">
            <summary>
            释放定时器
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerLink`1.TimeoutEnd">
            <summary>
            定时链表
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerLink`1.timeoutLock">
            <summary>
            定时链表集合访问锁
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimerLink`1.Free(`0@)">
            <summary>
            释放套接字超时
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:AutoCSer.Threading.TimerLink`1.FreeNotNull(`0)">
            <summary>
            释放套接字超时
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="T:AutoCSer.Threading.TimerTask">
            <summary>
            定时任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTask.taskHeap">
            <summary>
            已排序任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTask.taskLock">
            <summary>
            任务访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTask.nearTime">
            <summary>
            最近时间
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTask.isTimer">
            <summary>
            是否已经触发定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimerTask.#ctor">
            <summary>
            定时任务
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimerTask.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimerTask.add(System.Object,AutoCSer.Threading.Thread.CallType,AutoCSer.Threading.TimerTaskThreadType,System.DateTime)">
            <summary>
            添加新任务
            </summary>
            <param name="value">任务委托</param>
            <param name="type">调用类型</param>
            <param name="threadType">定时任务线程模式</param>
            <param name="runTime">执行时间</param>
        </member>
        <member name="M:AutoCSer.Threading.TimerTask.Add(System.Action,System.DateTime,AutoCSer.Threading.TimerTaskThreadType)">
            <summary>
            添加任务
            </summary>
            <param name="run">任务执行委托</param>
            <param name="runTime">执行时间</param>
            <param name="threadType">定时任务线程模式</param>
        </member>
        <member name="M:AutoCSer.Threading.TimerTask.OnTimer(System.DateTime)">
            <summary>
            触发定时任务
            </summary>
            <param name="now"></param>
        </member>
        <member name="M:AutoCSer.Threading.TimerTask.onTimer">
            <summary>
            线程池任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTask.Default">
            <summary>
            默认定时任务（不保证任务触发的及时性）
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimerTaskInfo">
            <summary>
            定时任务信息
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTaskInfo.Value">
            <summary>
            任务委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTaskInfo.CallType">
            <summary>
            调用类型
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTaskInfo.ThreadType">
            <summary>
            是否启动线程池线程
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.TimerTaskInfo.Start(AutoCSer.Threading.ThreadPool)">
            <summary>
            任务抛到线程池
            </summary>
            <param name="threadPool"></param>
        </member>
        <member name="M:AutoCSer.Threading.TimerTaskInfo.Call">
            <summary>
            任务调用
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.TimerTaskThreadType">
            <summary>
            定时任务线程模式
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTaskThreadType.ThreadPool">
            <summary>
            线程池处理
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTaskThreadType.Queue">
            <summary>
            队列处理，阻塞定时任务，适应于快速执行任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.TimerTaskThreadType.OnTimer">
            <summary>
            独占定时线程处理，不阻塞定时任务
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UnionType.Action">
            <summary>
            委托
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UnionType.LinkTask">
            <summary>
            链表任务
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UnionType.LinkTaskConfig">
            <summary>
            链表任务配置
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UnionType.ThreadPool">
            <summary>
            线程池
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.UnionType.TypeArray">
            <summary>
            类型数组
            </summary>
        </member>
        <member name="T:AutoCSer.Threading.WaitHandle">
            <summary>
            同步等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.WaitHandle.waitLock">
            <summary>
            同步等待锁
            </summary>
        </member>
        <member name="F:AutoCSer.Threading.WaitHandle.isSet">
            <summary>
            是否等待中
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.WaitHandle.Set(System.Int32)">
            <summary>
            初始化同步等待锁
            </summary>
            <param name="isSet">是否等待中</param>
        </member>
        <member name="M:AutoCSer.Threading.WaitHandle.Reset">
            <summary>
            重置等待
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.WaitHandle.Wait">
            <summary>
            等待结束
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.WaitHandle.Set">
            <summary>
            结束等待
            </summary>
        </member>
        <member name="M:AutoCSer.Threading.WaitHandle.PulseReset">
            <summary>
            结束等待并重置
            </summary>
        </member>
        <member name="T:AutoCSer.UniqueDictionary`2">
            <summary>
            唯一静态哈希字典
            </summary>
            <typeparam name="keyType">键值类型</typeparam>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.UniqueDictionary`2.array">
            <summary>
            哈希数据数组
            </summary>
        </member>
        <member name="M:AutoCSer.UniqueDictionary`2.#ctor(AutoCSer.KeyValue{`0,`1}[],System.Int32)">
            <summary>
            唯一静态哈希字典
            </summary>
            <param name="values">数据集合</param>
            <param name="size">哈希容器尺寸</param>
        </member>
        <member name="M:AutoCSer.UniqueDictionary`2.fromArray(AutoCSer.KeyValue{`0,`1}[],System.Int32,System.Int32)">
            <summary>
            唯一静态哈希字典
            </summary>
            <param name="values">数据集合</param>
            <param name="count">数据数量</param>
            <param name="size">哈希容器尺寸</param>
        </member>
        <member name="M:AutoCSer.UniqueDictionary`2.Get(`0,`1@)">
            <summary>
            获取匹配数据
            </summary>
            <param name="key">哈希键值</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.UniqueHashSet`1">
            <summary>
            唯一静态哈希
            </summary>
            <typeparam name="valueType">数据类型</typeparam>
        </member>
        <member name="F:AutoCSer.UniqueHashSet`1.array">
            <summary>
            哈希数据数组
            </summary>
        </member>
        <member name="M:AutoCSer.UniqueHashSet`1.#ctor(`0[],System.Int32)">
            <summary>
            唯一静态哈希
            </summary>
            <param name="values">数据集合</param>
            <param name="size">哈希容器尺寸</param>
        </member>
        <member name="M:AutoCSer.UniqueHashSet`1.Contains(`0)">
            <summary>
            判断是否存在某值
            </summary>
            <param name="value">待匹配值</param>
            <returns>是否存在某值</returns>
        </member>
        <member name="T:AutoCSer.Unmanaged">
            <summary>
            非托管内存
            </summary>
            <summary>
            非托管内存
            </summary>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetSize64(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.FreeStatic(AutoCSer.Pointer.Size@)">
            <summary>
            释放内存
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:AutoCSer.Unmanaged.Free(AutoCSer.Pointer.Size@,System.Boolean)">
            <summary>
            释放内存
            </summary>
            <param name="data"></param>
            <param name="isStaticUnmanaged"></param>
        </member>
        <member name="F:AutoCSer.Unmanaged.NullByte8">
            <summary>
            8个0字节（公用）
            </summary>
        </member>
        <member name="F:AutoCSer.Unmanaged.staticSize">
            <summary>
            不释放的固定内存申请大小
            </summary>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetStatic64(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear">是否需要清除</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.FreeStatic(System.Byte*@,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="F:AutoCSer.Unmanaged.totalSize">
            <summary>
            非托管内存申请字节数
            </summary>
        </member>
        <member name="M:AutoCSer.Unmanaged.Get(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.Get64(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetSizeUnsafe64(System.Int32,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size">内存字节数</param>
            <param name="isClear">是否需要清除</param>
            <returns>非托管内存起始指针</returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.Free(System.Byte*,System.Int32)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.Unmanaged.Free(AutoCSer.Pointer.Size@)">
            <summary>
            释放内存
            </summary>
            <param name="data">非托管内存起始指针</param>
        </member>
        <member name="M:AutoCSer.Unmanaged.GetStatic(System.Int32,System.Boolean)">
            <summary>
            静态类型初始化申请非托管内存(不释放的固定内存)
            </summary>
            <param name="size"></param>
            <param name="isClear">是否需要清除</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Unmanaged.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            申请非托管内存
            </summary>
            <param name="size"></param>
            <param name="isClear"></param>
            <param name="isStaticUnmanaged"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.UnmanagedPool">
            <summary>
            非托管内存池
            </summary>
            <summary>
            非托管内存池
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetSize(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="minSize">数据字节长度</param>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetSize">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.Push(AutoCSer.Pointer.Size@)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetOrCreate(System.Int32)">
            <summary>
            获取非托管内存池
            </summary>
            <param name="size">缓冲区字节大小</param>
            <returns>非托管内存池</returns>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.TinySize">
            <summary>
            微型缓冲区池字节大小 256B
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.DefaultSize">
            <summary>
            默认缓冲区池字节大小 4KB
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.free">
            <summary>
            空闲内存地址
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.freeLock">
            <summary>
            空闲内存地址访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.Size">
            <summary>
            缓冲区尺寸
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.#ctor(System.Int32)">
            <summary>
            内存池
            </summary>
            <param name="size">缓冲区尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.TryGet">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区,失败返回null</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.Get">
            <summary>
            获取缓冲区
            </summary>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetSize64(System.Int32)">
            <summary>
            获取缓冲区
            </summary>
            <param name="minSize">数据字节长度</param>
            <returns>缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.Push(System.Byte*)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.PushOnly(AutoCSer.Pointer.Size@)">
            <summary>
            保存缓冲区
            </summary>
            <param name="buffer">缓冲区</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.clear(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.clear(System.Byte*)">
            <summary>
            释放缓冲区
            </summary>
            <param name="head"></param>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.pools">
            <summary>
            内存池
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.poolLock">
            <summary>
            内存池访问锁
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.Tiny">
            <summary>
            微型缓冲区池(256B)
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedPool.Default">
            <summary>
            默认缓冲区池(4KB)
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.GetDefaultPool(System.Int32)">
            <summary>
            获取临时缓冲区
            </summary>
            <param name="length">缓冲区字节长度</param>
            <returns>临时缓冲区</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedPool.ClearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.UnmanagedStream">
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.#ctor(System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.GetSubBuffer(AutoCSer.SubBuffer.PoolBufferFull@,System.Int32)">
            <summary>
            转换成字节数组
            </summary>
            <param name="buffer"></param>
            <param name="index">复制起始位置</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.GetSubBuffer(AutoCSer.SubBuffer.PoolBufferFull@)">
            <summary>
            转换成字节数组
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.WriteNotNull(System.Byte[])">
            <summary>
            写数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Byte[])">
            <summary>
            写数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.WriteNotEmpty(System.Byte*,System.Int32)">
            <summary>
            写入数据
            </summary>
            <param name="data"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(AutoCSer.SubArray{System.Byte})">
            <summary>
            写数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            写数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWriteNotEmpty(AutoCSer.SubArray{System.Byte}@)">
            <summary>
            写数据
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.#ctor(System.Byte*,System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data">无需释放的数据</param>
            <param name="dataSize">容器初始字节数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.PrepLength(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="length">增加长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.GetPrepSizeCurrent(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="size">增加长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.AddSize(System.Int32)">
            <summary>
            增加流长度并返回增加后的流长度
            </summary>
            <param name="length">增加长度</param>
            <returns>增加后的流长度</returns>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.Write(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Boolean)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Byte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.SByte)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Int16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.UInt16)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Int32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.UInt32)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Int64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.UInt64)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.DateTime)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Single)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Double)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Decimal)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.UnsafeWrite(System.Guid)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.SerializeFill(System.Int32)">
            <summary>
            二进制序列化填充空白字符
            </summary>
            <param name="fillSize">字节数量</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.SerializeFillWithStartIndex(System.Int32)">
            <summary>
            补白对齐 4 字节
            </summary>
            <param name="startIndex">起始位置</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStream.GetArray">
            <summary>
            转换成字节数组
            </summary>
            <returns>字节数组</returns>
        </member>
        <member name="T:AutoCSer.UnmanagedStreamBase">
            <summary>
            非托管内存数据流
            </summary>
            <summary>
            非托管内存数据流
            </summary>
        </member>
        <member name="P:AutoCSer.UnmanagedStreamBase.FreeSize">
            <summary>
            空闲字节数
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.MoveSize(System.Int32)">
            <summary>
            移动当前位置
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(AutoCSer.SubString)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.String[])">
            <summary>
            写字符串集合
            </summary>
            <param name="values">字符串集合</param>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.Data">
            <summary>
            数据指针
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.ByteSize">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="P:AutoCSer.UnmanagedStreamBase.CurrentData">
            <summary>
            当前写入位置
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.LastPrepSize">
            <summary>
            最后一次预增目标数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.UnmanagedStreamBase.IsUnmanaged">
            <summary>
            是否非托管内存数据
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.#ctor(System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="length">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.#ctor(System.Byte*,System.Int32)">
            <summary>
            非托管内存数据流
            </summary>
            <param name="data">无需释放的数据</param>
            <param name="dataLength">容器初始尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Dispose">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Close">
            <summary>
            释放数据容器
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.setStreamLength(System.Int32)">
            <summary>
            设置容器尺寸
            </summary>
            <param name="length">容器尺寸</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.prepSize(System.Int32)">
            <summary>
            预增数据流长度
            </summary>
            <param name="length">增加长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.Char)">
            <summary>
            写数据
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.String)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.UnsafeWrite(System.String,System.Int32,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
            <param name="index">起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.WriteNotNull(System.Char*,System.Int32)">
            <summary>
            写字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="count">写入字符数</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Write(AutoCSer.SubString@)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.WriteNotEmpty(AutoCSer.SubString@)">
            <summary>
            写字符串
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Reset(System.Byte*,System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="data">数据</param>
            <param name="length">数据字节长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.Reset(System.Int32)">
            <summary>
            重置数据
            </summary>
            <param name="length">数据字节长度</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.From(AutoCSer.UnmanagedStreamBase)">
            <summary>
            内存数据流转换
            </summary>
            <param name="stream">内存数据流</param>
        </member>
        <member name="M:AutoCSer.UnmanagedStreamBase.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="T:AutoCSer.WebView.ClientTypeAttribute">
            <summary>
            客户端视图绑定类型
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.ClientTypeAttribute.DefaultMemberName">
            <summary>
            默认绑定成员名称
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.ClientTypeAttribute.Null">
            <summary>
            默认客户端视图绑定类型
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.ClientTypeAttribute.Name">
            <summary>
            客户端视图绑定类型名称（PrefixName 为 null 时有效）
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.ClientTypeAttribute.PrefixName">
            <summary>
            客户端视图绑定类型前缀
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.ClientTypeAttribute.MemberName">
            <summary>
            绑定成员名称,默认为Id
            </summary>
        </member>
        <member name="M:AutoCSer.WebView.ClientTypeAttribute.GetClientName(System.Type)">
            <summary>
            客户端视图绑定类型名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.WebView.HashUrl">
            <summary>
            #!转换URL
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.HashUrl.Path">
            <summary>
            URL路径
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.HashUrl.Query">
            <summary>
            URL查询
            </summary>
        </member>
        <member name="M:AutoCSer.WebView.HashUrl.ToString">
            <summary>
            转换成字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.WebView.OutputAjaxAttribute">
            <summary>
            Ajax视图输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.OutputAjaxAttribute.Null">
            <summary>
            默认Ajax视图输出参数
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.OutputAjaxAttribute.BindingName">
            <summary>
            输出绑定名称
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.OutputAjaxAttribute.IsIgnoreNull">
            <summary>
            默认为 false 表示不忽略 null 值输出
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.OutputAjaxAttribute.IsAllMember">
            <summary>
            默认为 false 表示仅输出当前成员，否则输出所有子级成员
            </summary>
        </member>
        <member name="T:AutoCSer.WebView.PathAttribute">
            <summary>
            WEB Path 配置
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.PathAttribute.AutoCSerPubPathName">
            <summary>
            AutoCSer 默认公共 Path 名称
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.PathAttribute.Flag">
            <summary>
            导出二进制位标识
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.PathAttribute.QueryName">
            <summary>
            查询名称，默认为 Type.Name + "Id"
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.PathAttribute.MemberName">
            <summary>
            服务端生成属性名称
            </summary>
        </member>
        <member name="F:AutoCSer.WebView.PathAttribute.Type">
            <summary>
            默认绑定类型
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ConfigLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ConfigLoader.GetUnion(System.Type,System.String)">
            <summary>
            获取配置数据
            </summary>
            <param name="type">配置类型</param>
            <param name="name">配置名称</param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.CustomAttribute">
            <summary>
            自定义类型函数标识配置
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.IgnoreMemberAttribute">
            <summary>
            XML 序列化成员忽略配置
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.IgnoreMemberAttribute.GetIsIgnoreCurrent">
            <summary>
            禁止当前安装
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.MemberAttribute">
            <summary>
            XML序列化成员配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.MemberAttribute.ItemName">
            <summary>
            集合子节点名称(不能包含非法字符)
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.Node">
            <summary>
            XML节点
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Node.attributes">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Node.nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Node.Nodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Node.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Node.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Node.Item(System.String)">
            <summary>
            根据名称获取 XML 节点
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetString(System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetString(System.String,System.Int32,System.Int32)">
            <summary>
            设置字符串
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetNode(AutoCSer.LeftArray{AutoCSer.KeyValue{AutoCSer.SubString,AutoCSer.Xml.Node}}@)">
            <summary>
            设置子节点集合
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.SetAttribute(System.String,AutoCSer.KeyValue{AutoCSer.Range,AutoCSer.Range}[])">
            <summary>
            属性集合
            </summary>
            <param name="xml"></param>
            <param name="attributes"></param>
        </member>
        <member name="M:AutoCSer.Xml.Node.GetAttribute(System.Char*,System.Int32,AutoCSer.Range@)">
            <summary>
            获取属性索引位置
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.NodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.EncodeString">
            <summary>
            未解码字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.TempString">
            <summary>
            未解码可修改字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.Node">
            <summary>
            子节点
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.NodeType.ErrorString">
            <summary>
            字符串解析失败
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ParseConfig">
            <summary>
            XML 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.Constructor">
            <summary>
            自定义构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.BootNodeName">
            <summary>
            根节点名称(不能包含非法字符)
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.ItemName">
            <summary>
            集合子节点名称(不能包含非法字符)
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.IsAttribute">
            <summary>
            是否保存属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.IsTempString">
            <summary>
            是否临时字符串(可修改)
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseConfig.IsMatchEnum">
            <summary>
            是否强制匹配枚举值
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ParseMethod">
            <summary>
            解析类型
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.Parser">
            <summary>
            XML 解析器
            </summary>
            <summary>
            XML 解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Boolean@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Boolean}@)">
            <summary>
            逻辑值解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Byte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.SByte}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.UInt16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Int16}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Int32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.UInt64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Int64}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Single@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Single}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Double@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Double}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Decimal@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Decimal}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Char@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Char}@)">
            <summary>
            字符解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.DateTime@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.DateTime}@)">
            <summary>
            时间解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Guid@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Nullable{System.Guid}@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(AutoCSer.SubString@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(System.Object@)">
            <summary>
            对象解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse(AutoCSer.Xml.Node@)">
            <summary>
            XML节点解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="F:AutoCSer.Xml.Parser.parseMethods">
            <summary>
            基本类型解析函数
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.GetParseMethod(System.Type)">
            <summary>
            获取基本类型解析函数
            </summary>
            <param name="type">基本类型</param>
            <returns>解析函数</returns>
        </member>
        <member name="F:AutoCSer.Xml.Parser.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributes">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Parser.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Parser.ArrayItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.anonymousTypes">
            <summary>
            匿名类型数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.xml">
            <summary>
            XML字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.xmlFixed">
            <summary>
            XML字符串起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.current">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Parser.CustomRead">
            <summary>
            自定义序列化获取当前读取数据位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.end">
            <summary>
            解析结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.valueStart">
            <summary>
            当前数据起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.valueSize">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributeNameStartIndex">
            <summary>
            属性名称起始位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributeNameEndIndex">
            <summary>
            属性名称结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.sign">
            <summary>
            数字符号
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.IsCData">
            <summary>
            当前数据是否CDATA
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.isTagEnd">
            <summary>
            名称解析节点是否结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse``1(AutoCSer.SubString@,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="xml">XML字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse``1(System.String,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="xml">XML字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>解析状态</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse``1(``0@)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.TypeParse``1(``0@)">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.TypeParse``1">
            <summary>
            自定义反序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.VerifyRead(System.Int32)">
            <summary>
            自定义序列化重置当前读取数据位置
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.MoveRead(System.Int32)">
            <summary>
            移动当前读取数据位置，负数表示自定义序列化失败
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.free">
            <summary>
            释放XML解析器
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.space">
            <summary>
            空格过滤
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.endSpace">
            <summary>
            空格过滤
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.searchValue">
            <summary>
            查找数据起始位置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.SearchValueEnd">
            <summary>
            数据结束处理
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getValue">
            <summary>
            获取文本数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getValueEnd">
            <summary>
            数据结束处理
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.searchCData2">
            <summary>
            查找CDATA数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.SearchCDataValue">
            <summary>
            查找CDATA数据结束位置
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IgnoreValue">
            <summary>
            忽略数据
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.isNaN">
            <summary>
            是否非数字 NaN
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.isPositiveInfinity">
            <summary>
            是否 Infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.isNegativeInfinity">
            <summary>
            是否 -Infinity
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getName(System.Int32@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.getNameOnly(System.Int32@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.GetName(System.Int32@,System.Byte@)">
            <summary>
            获取节点名称
            </summary>
            <param name="nameSize">节点名称长度</param>
            <param name="isTagEnd">名称解析节点是否结束</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CheckNameEnd(System.Char*,System.Int32)">
            <summary>
            节点名称结束检测
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.attribute">
            <summary>
            属性解析
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.attributeName">
            <summary>
            属性名称解析
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.attributeValue">
            <summary>
            属性值解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.NextEnumChar">
            <summary>
            读取下一个枚举字符
            </summary>
            <returns>枚举字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.NextCDataEnumChar">
            <summary>
            读取下一个枚举字符
            </summary>
            <returns>枚举字符,结束或者错误返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsNextFlagEnum">
            <summary>
            枚举值是否结束
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsEnumNumber">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IgnoreSearchValue">
            <summary>
            忽略数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsEnumNumberFlag">
            <summary>
            查找枚举数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsName(System.Byte*,System.Int32@)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsNameEnd(System.Byte*)">
            <summary>
            是否匹配默认顺序名称
            </summary>
            <param name="names"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsArrayItem(System.Char*,System.Int32)">
            <summary>
            是否存在数组数据
            </summary>
            <param name="nameStart"></param>
            <param name="nameSize"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex32(System.UInt32@)">
            <summary>
            解析16进制数字
            </summary>
            <param name="value">数值</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseUInt32(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Byte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.SByte@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.UInt16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Int16@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Int32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex64">
            <summary>
            解析16进制数字
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseUInt64(System.UInt32)">
            <summary>
            解析10进制数字
            </summary>
            <param name="value">第一位数字</param>
            <returns>数字</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.UInt64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.ParseNumber(System.Int64@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.decodeChar(System.Char@)">
            <summary>
            字符解码
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex2">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parseHex4">
            <summary>
            解析16进制字符
            </summary>
            <returns>字符</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.parse(AutoCSer.GuidCreator@)">
            <summary>
            Guid解析
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.decodeString(System.Char*,System.Char*)">
            <summary>
            字符串解码
            </summary>
            <param name="write"></param>
            <param name="writeEnd"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.IsValue">
            <summary>
            判断否存存在数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomParse(System.UInt32@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomParse(System.Nullable{System.UInt32}@)">
            <summary>
            数字解析
            </summary>
            <param name="value">数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomParse(System.String@)">
            <summary>
            字符串解析
            </summary>
            <param name="value">数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomEnumByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CustomIgnoreValue">
            <summary>
            忽略数据
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.CheckNoConstructor``1(``0@,System.Boolean)">
            <summary>
            找不到构造函数
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value">目标数据</param>
            <param name="isAnonymousType"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.SetAnonymousType``1(``0)">
            <summary>
            设置匿名类型数据
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.typeParse``1(``0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.structParse``1(``0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.baseParse``2(``1@)">
            <summary>
            基类转换
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.array``1(``0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.nullableEnumParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.nullableParse``1(System.Nullable{``0}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.keyValuePairParse``2(System.Collections.Generic.KeyValuePair{``0,``1}@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.listConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.collectionConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumerableConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.arrayConstructor``2(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.dictionaryConstructor``3(``0@)">
            <summary>
            集合构造函数解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumSByte``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUShort``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUInt``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumLong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumULong``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumSByteFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUShortFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumUIntFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumLongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.enumULongFlags``1(``0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString@,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(AutoCSer.SubString@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(System.String,``0@,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="value">目标数据</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Parser.Parse``1(System.String,AutoCSer.Xml.ParseConfig)">
            <summary>
            XML 解析
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="xml">XML 字符串</param>
            <param name="config">配置参数</param>
            <returns>XML 解析结果</returns>
        </member>
        <member name="F:AutoCSer.Xml.Parser.spaceBit">
            <summary>
            XML解析空格[ ,\t,\r,\n]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.targetStartCheckBit">
            <summary>
            XML解析名称检测
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.attributeNameSearchBit">
            <summary>
            XML解析属性名称查找
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.EncodeSpaceBit">
            <summary>
            XML序列化转换字符[ ,\t,\r,\n,&amp;,>,&lt;]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.EncodeBit">
            <summary>
            XML序列化转换字符[&amp;,>,&lt;]
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.Bits">
            <summary>
            字符状态位
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Parser.decodeSearcher">
            <summary>
            字符 Decode 转码
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.ParseMethodCache">
            <summary>
            类型解析器静态信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Xml.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="field"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.CreateDynamicMethod(System.Type,System.Reflection.PropertyInfo,System.Reflection.MethodInfo)">
            <summary>
            创建解析委托函数
            </summary>
            <param name="type"></param>
            <param name="property"></param>
            <param name="propertyMethod"></param>
            <returns>解析委托函数</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumMethods">
            <summary>
            枚举解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumSByteMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUShortMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUIntMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumLongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumULongMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumSByteFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUShortFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumUIntFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumLongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumULongFlagsMethod">
            <summary>
            枚举值解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举解析调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.valueTypeMethods">
            <summary>
            值类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.structParseMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetValueType(System.Type)">
            <summary>
            获取值类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>值类型解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.typeMethods">
            <summary>
            引用类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.typeParseMethod">
            <summary>
            引用类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetType(System.Type)">
            <summary>
            获取引用类型解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>引用类型解析调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom"></param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.BaseParseMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.arrayMethods">
            <summary>
            数组解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.arrayMethod">
            <summary>
            数组解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetArray(System.Type)">
            <summary>
            获取数组解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableEnumParseMethods">
            <summary>
            可空枚举类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableEnumParseMethod">
            <summary>
            可空枚举类型解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetNullableEnumParse(System.Type,System.Type[])">
            <summary>
            获取可空枚举类型解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <param name="parameterTypes">泛型参数类型集合</param>
            <returns>可空枚举类型解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableParseMethods">
            <summary>
            可空类型解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.nullableParseMethod">
            <summary>
            可空类型解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetNullableParse(System.Type,System.Type[])">
            <summary>
            获取可空类型解析委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <param name="parameterTypes">泛型参数类型集合</param>
            <returns>可空类型解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.keyValuePairMethods">
            <summary>
            键值对解析调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.keyValuePairParseMethod">
            <summary>
            值类型对象解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetKeyValuePair(System.Type)">
            <summary>
            获取键值对解析调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>键值对解析调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumerableConstructorMethods">
            <summary>
            获取枚举构造调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.listConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.collectionConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.enumerableConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.arrayConstructorMethod">
            <summary>
            数组构造解析函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.dictionaryConstructorMethod">
            <summary>
            集合构造解析函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetIEnumerableConstructor(System.Type)">
            <summary>
            获取枚举构造调用函数信息
            </summary>
            <param name="type">集合类型</param>
            <returns>枚举构造调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.customMethods">
            <summary>
            自定义解析调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetCustom(System.Type)">
            <summary>
            自定义解析委托调用函数信息
            </summary>
            <param name="type">数据类型</param>
            <returns>自定义解析委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.genericDefinitionMemberSearchers">
            <summary>
            泛型定义类型成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseMethodCache.genericDefinitionMemberSearcherCreateLock">
            <summary>
            泛型定义类型成员名称查找数据创建锁
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.GetGenericDefinitionMemberSearcher(System.Type,System.String[])">
            <summary>
            获取泛型定义成员名称查找数据
            </summary>
            <param name="type">泛型定义类型</param>
            <param name="names">成员名称集合</param>
            <returns>泛型定义成员名称查找数据</returns>
        </member>
        <member name="M:AutoCSer.Xml.ParseMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Xml.ParseResult">
            <summary>
            XML 解析结果
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.Xml">
            <summary>
            XML 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.Index">
            <summary>
            当前解析位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseResult.State">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.ParseResult.op_Implicit(AutoCSer.Xml.ParseResult)~System.Boolean">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.ParseState">
            <summary>
            解析状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.MemberMap">
            <summary>
            成员位图类型错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NullXml">
            <summary>
            XML字符串参数为空
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.HeaderError">
            <summary>
            xml头部解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundBootNodeEnd">
            <summary>
            没有找到根节点结束标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundBootNodeStart">
            <summary>
            没有找到根节点开始标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundTagStart">
            <summary>
            没有找到名称标签开始符号
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundTagEnd">
            <summary>
            没有找到匹配的结束标签
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundAttributeName">
            <summary>
            属性名称解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundAttributeValue">
            <summary>
            属性值解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundValue">
            <summary>
            没有找到预期数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundValueEnd">
            <summary>
            没有找到预期数据结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotFoundCDATAStart">
            <summary>
            没有找到预期的CDATA开始
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NoteError">
            <summary>
            注释错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.CrashEnd">
            <summary>
            非正常意外结束
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotSupport">
            <summary>
            不支持直接解析 基元类型/可空类型/数组/枚举/指针/字典
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NoConstructor">
            <summary>
            找不到构造函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.DecodeError">
            <summary>
            字符解码失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotBool">
            <summary>
            逻辑值解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotNumber">
            <summary>
            非数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotHex">
            <summary>
            16进制数字解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotChar">
            <summary>
            字符解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotDateTime">
            <summary>
            时间解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotGuid">
            <summary>
            Guid解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotArrayItem">
            <summary>
            数组节点解析错误
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NoFoundEnumValue">
            <summary>
            没有找到匹配的枚举值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.NotEnumChar">
            <summary>
            非枚举字符
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.UnknownNameError">
            <summary>
            未知名称节点自定义解析失败
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.ParseState.Custom">
            <summary>
            自定义序列化失败
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.PropertyMethod">
            <summary>
            属性成员信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.PropertyMethod.Property">
            <summary>
            属性索引
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.PropertyMethod.Method">
            <summary>
            访问函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.PropertyMethod.Attribute">
            <summary>
            自定义属性
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeAttribute">
            <summary>
            XML 序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeAttribute.AnonymousTypeMember">
            <summary>
            匿名类型序列化配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeAttribute.IsBaseType">
            <summary>
            是否作用与派生类型，默认为 true
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.SerializeConfig">
            <summary>
            XML 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.DefaultCheckLoopDepth">
            <summary>
            循环引用检测深度
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.Header">
            <summary>
            XML头部
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.BootNodeName">
            <summary>
            根节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.MemberMap">
            <summary>
            成员位图
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.CheckLoopDepth">
            <summary>
            循环引用检测深度，0 表示实时检测，默认为 64
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.IsOutputNull">
            <summary>
            是否输出空对象
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.IsOutputEmptyString">
            <summary>
            是否输出长度为 0 的字符串，默认为 true
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeConfig.IsMemberMapErrorToDefault">
            <summary>
            成员位图类型不匹配时是否使用默认输出，默认为 true
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeConfig.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMemberDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.CharStreamField">
            <summary>
            获取字符串输出缓冲区属性方法信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.ItemNameField">
            <summary>
            集合子节点名称字段
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.nameStart(System.String,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加成员
            </summary>
            <param name="name">成员名称</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.FieldIndex)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.PushBox(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMemberMapDynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.dynamicMethod">
            <summary>
            动态函数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.generator">
            <summary>
            
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMemberMapDynamicMethod.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.#ctor(System.Type)">
            <summary>
            动态函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.FieldIndex,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加字段
            </summary>
            <param name="field">字段信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Push(AutoCSer.Metadata.PropertyIndex,System.Reflection.MethodInfo,AutoCSer.Xml.MemberAttribute)">
            <summary>
            添加属性
            </summary>
            <param name="property">属性信息</param>
            <param name="propertyMethod">函数信息</param>
            <param name="attribute">XML序列化成员配置</param>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMemberMapDynamicMethod.Create``1">
            <summary>
            创建成员转换委托
            </summary>
            <returns>成员转换委托</returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMethod">
            <summary>
            基本转换类型
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.Serializer">
            <summary>
            XML序列化
            </summary>
            <summary>
            XML序列化
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Boolean)">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Boolean})">
            <summary>
            逻辑值转换
            </summary>
            <param name="value">逻辑值</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Byte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Byte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.SByte)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.SByte})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Int16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Int16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.UInt16)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.UInt16})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Int32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Int32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.UInt32)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.UInt32})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Int64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Int64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.UInt64)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.UInt64})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Single)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Single})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Double)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Double})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Decimal)">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Decimal})">
            <summary>
            数字转换
            </summary>
            <param name="value">数字</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Char})">
            <summary>
            字符转换
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.DateTime})">
            <summary>
            时间转换
            </summary>
            <param name="value">时间</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Guid)">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Nullable{System.Guid})">
            <summary>
            Guid转换
            </summary>
            <param name="value">Guid</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.String)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(AutoCSer.SubString)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(System.Object)">
            <summary>
            字符串转换
            </summary>
            <param name="value">字符串</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize(AutoCSer.Xml.Node)">
            <summary>
            字符串转换
            </summary>
            <param name="value">XML节点</param>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.serializeMethods">
            <summary>
            基本类型转换函数
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.GetSerializeMethod(System.Type)">
            <summary>
            获取基本类型转换函数
            </summary>
            <param name="type">基本类型</param>
            <returns>转换函数</returns>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.DeSerializeAttributeName">
            <summary>
            反序列化配置名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.AllMemberAttribute">
            <summary>
            默认反序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.DefaultAttribute">
            <summary>
            默认序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.DefaultConfig">
            <summary>
            公共默认配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.bits">
            <summary>
            字符状态位查询表格
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.CharStream">
            <summary>
            字符串输出缓冲区
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.Config">
            <summary>
            配置参数
            </summary>
        </member>
        <member name="P:AutoCSer.Xml.Serializer.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.GetItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.forefather">
            <summary>
            祖先节点集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.forefatherCount">
            <summary>
            祖先节点数量
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.Serializer.checkLoopDepth">
            <summary>
            循环检测深度
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize``1(``0,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>Xml字符串</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize``1(``0,AutoCSer.CharStream,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="xmlStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize``1(``0)">
            <summary>
            对象转换XML字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.TypeSerialize``1(``0)">
            <summary>
            自定义序列化调用
            </summary>
            <typeparam name="valueType"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.SetCustomMemberMap(AutoCSer.Metadata.MemberMap)">
            <summary>
            获取并设置自定义序列化成员位图
            </summary>
            <param name="memberMap">序列化成员位图</param>
            <returns>序列化成员位图</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.free">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Push``1(``0)">
            <summary>
            进入对象节点
            </summary>
            <typeparam name="valueType">对象类型</typeparam>
            <param name="value">数据对象</param>
            <returns>是否继续处理对象</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Pop">
            <summary>
            退出对象节点
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.nameStart(System.Char*,System.Int32)">
            <summary>
            标签开始
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.nameEnd(System.Char*,System.Int32)">
            <summary>
            标签结束
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.encodeSpaceSize(System.Char)">
            <summary>
            计算编码增加长度
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.encodeSpace(System.Byte*@,System.Char)">
            <summary>
            字符转换
            </summary>
            <param name="data"></param>
            <param name="value">字符</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.serialize(System.Char*,System.Int32)">
            <summary>
            字符串转换
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.emptyString">
            <summary>
            输出空字符串
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutputSubString(AutoCSer.SubString)">
            <summary>
            是否输出字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutputString(System.String)">
            <summary>
            是否输出字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutput(System.Object)">
            <summary>
            是否输出对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.isOutputNullable``1(System.Nullable{``0})">
            <summary>
            是否输出可空对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.classSerialize``1(``0)">
            <summary>
            引用类型对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structSerialize``1(``0)">
            <summary>
            值类型对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.enumToString``1(``0)">
            <summary>
            字符串转换
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.baseSerialize``2(AutoCSer.Xml.Serializer,``1)">
            <summary>
            基类转换
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structArray``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.array``1(``0[])">
            <summary>
            数组转换
            </summary>
            <param name="array">数组对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.nullableSerialize``1(System.Nullable{``0})">
            <summary>
            值类型对象转换XML字符串
            </summary>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structStructEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="values">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.structClassEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="values">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.classStructEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.classClassEnumerable``2(``0)">
            <summary>
            枚举集合转换
            </summary>
            <param name="value">枚举集合</param>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize``1(``0,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="config">配置参数</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:AutoCSer.Xml.Serializer.Serialize``1(``0,AutoCSer.CharStream,AutoCSer.Xml.SerializeConfig)">
            <summary>
            对象转换 XML 字符串
            </summary>
            <typeparam name="valueType">目标数据类型</typeparam>
            <param name="value">数据对象</param>
            <param name="xmlStream">Xml输出缓冲区</param>
            <param name="config">配置参数</param>
            <returns>警告提示状态</returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeMethodCache">
            <summary>
            XML 序列化函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetFields(AutoCSer.Metadata.FieldIndex[],AutoCSer.Xml.SerializeAttribute)">
            <summary>
            获取字段成员集合
            </summary>
            <param name="fields"></param>
            <param name="typeAttribute">类型配置</param>
            <returns>字段成员集合</returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetProperties(AutoCSer.Metadata.PropertyIndex[],AutoCSer.Xml.SerializeAttribute)">
            <summary>
            获取属性成员集合
            </summary>
            <param name="properties">属性成员集合</param>
            <param name="typeAttribute">类型配置</param>
            <returns>属性成员集合</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.typeMethods">
            <summary>
            未知类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.classSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structSerializeMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetType(System.Type)">
            <summary>
            未知类型枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>未知类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.enumMethods">
            <summary>
            枚举转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.enumToStringMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetEnum(System.Type)">
            <summary>
            获取枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>枚举转换委托调用函数信息</returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetMemberMethodInfo(System.Type,System.Boolean@)">
            <summary>
            获取成员转换函数信息
            </summary>
            <param name="type">成员类型</param>
            <param name="isCustom">成员类型</param>
            <returns>成员转换函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputSubStringMethod">
            <summary>
            是否输出字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputStringMethod">
            <summary>
            是否输出字符串函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputMethod">
            <summary>
            是否输出对象函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetIsOutputMethod(System.Type)">
            <summary>
            获取是否输出对象函数信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputNullableMethods">
            <summary>
            是否输出可空对象函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.isOutputNullableMethod">
            <summary>
            是否输出可空对象函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetIsOutputNullable(System.Type)">
            <summary>
            获取是否输出可空对象函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.BaseSerializeMethod">
            <summary>
            基类转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.arrayMethods">
            <summary>
            数组转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structArrayMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.arrayMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetArray(System.Type)">
            <summary>
            获取数组转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>数组转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nullableMethods">
            <summary>
            可空类型转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nullableSerializeMethod">
            <summary>
            可空类型转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetNullable(System.Type)">
            <summary>
            获取可空类型转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>可空类型转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.enumerableMethods">
            <summary>
            枚举集合转换调用函数信息集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structStructEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.structClassEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.classStructEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.classClassEnumerableMethod">
            <summary>
            字典转换函数信息
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetIEnumerable(System.Type)">
            <summary>
            获取枚举集合转换委托调用函数信息
            </summary>
            <param name="type">枚举类型</param>
            <returns>枚举集合转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.customMethods">
            <summary>
            自定义转换调用函数信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetCustom(System.Type)">
            <summary>
            自定义枚举转换委托调用函数信息
            </summary>
            <param name="type">数组类型</param>
            <returns>自定义转换委托调用函数信息</returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nameStartPools">
            <summary>
            名称数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetNameStartPool(System.String)">
            <summary>
            获取名称数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:AutoCSer.Xml.SerializeMethodCache.nameEndPools">
            <summary>
            名称数据信息集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.GetNameEndPool(System.String)">
            <summary>
            获取名称数据
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:AutoCSer.Xml.SerializeMethodCache.clearCache(System.Int32)">
            <summary>
            清除缓存数据
            </summary>
            <param name="count">保留缓存数据数量</param>
        </member>
        <member name="T:AutoCSer.Xml.SerializeResult">
            <summary>
            序列化结果
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeResult.Xml">
            <summary>
            XML 字符串
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeResult.Warning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.SerializeResult.op_Implicit(AutoCSer.Xml.SerializeResult)~System.String">
            <summary>
            Xml 字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:AutoCSer.Xml.SerializeWarning">
            <summary>
            警告提示状态
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeWarning.None">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.SerializeWarning.MemberMap">
            <summary>
            成员位图类型不匹配
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.StateSearcher">
            <summary>
            枚举状态查找器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.State">
            <summary>
            状态集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charsAscii">
            <summary>
            ASCII字符查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charStart">
            <summary>
            特殊字符串查找表
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charEnd">
            <summary>
            特殊字符串查找表结束位置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.charIndex">
            <summary>
            特殊字符起始值
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.StateSearcher.tableType">
            <summary>
            查询矩阵单位尺寸类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.#ctor(AutoCSer.Pointer)">
            <summary>
            名称查找器
            </summary>
            <param name="data">数据起始位置</param>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.getCharIndex(System.Char)">
            <summary>
            获取特殊字符索引值
            </summary>
            <param name="value">特殊字符</param>
            <returns>索引值,匹配失败返回0</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.SearchEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchEnumOnly(AutoCSer.Xml.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchCDataEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.SearchFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.searchCDataFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="M:AutoCSer.Xml.StateSearcher.NextFlagEnum(AutoCSer.Xml.Parser)">
            <summary>
            根据枚举字符串查找目标索引
            </summary>
            <param name="parser">XML解析器</param>
            <returns>目标索引,null返回-1</returns>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1">
            <summary>
            类型解析器
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumParser">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumParser.enumSearcher">
            <summary>
            枚举名称查找数据
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumParser.parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumParser.getIndex(AutoCSer.Xml.Parser,`0@,System.Int32@,System.Int32@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value"></param>
            <param name="index">第一个枚举索引</param>
            <param name="nextIndex">第二个枚举索引</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumByte.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumByte.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumSByte">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumSByte.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumSByte.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumSByte.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumShort.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumShort.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumUShort">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumUShort.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUShort.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUShort.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumInt.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumInt.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumUInt">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumUInt.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUInt.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumUInt.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumLong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumLong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumLong.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumLong.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.EnumULong">
            <summary>
            枚举值解析
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.EnumULong.enumInts">
            <summary>
            枚举值集合
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumULong.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.EnumULong.ParseFlags(AutoCSer.Xml.Parser,`0@)">
            <summary>
            枚举值解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.TryParseFilter">
            <summary>
            成员解析器过滤
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.TryParseFilter.TryParse">
            <summary>
            成员解析器
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.TryParseFilter.ItemName">
            <summary>
            集合子节点名称
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.TryParseFilter.MemberMapIndex">
            <summary>
            成员位图索引
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.TryParseFilter.Call(AutoCSer.Xml.Parser,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
            <returns>是否存在下一个数据</returns>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.TryParseFilter.Call(AutoCSer.Xml.Parser,AutoCSer.Metadata.MemberMap,`0@)">
            <summary>
            成员解析器
            </summary>
            <param name="parser">XML解析器</param>
            <param name="memberMap">成员位图</param>
            <param name="value">目标数据</param>
            <returns>是否存在下一个数据</returns>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.TryParse">
            <summary>
            解析委托
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="T:AutoCSer.Xml.TypeParser`1.UnknownParse">
            <summary>
            未知名称解析委托
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
            <param name="name">节点名称</param>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.DefaultParser">
            <summary>
            解析委托
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.memberParsers">
            <summary>
            成员解析器集合
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.memberSearcher">
            <summary>
            成员名称查找数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.memberNames">
            <summary>
            默认顺序成员名称数据
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.onUnknownName">
            <summary>
            未知名称节点处理
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.attribute">
            <summary>
            XML解析类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeParser`1.isAnonymousType">
            <summary>
            是否匿名类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.Parse(AutoCSer.Xml.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.parseClass(AutoCSer.Xml.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ParseClass(AutoCSer.Xml.Parser,`0@)">
            <summary>
            引用类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ParseStruct(AutoCSer.Xml.Parser,`0@)">
            <summary>
            值类型对象解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ParseMembers(AutoCSer.Xml.Parser,`0@)">
            <summary>
            数据成员解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.Array(AutoCSer.Xml.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="values">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.ArrayIndex(AutoCSer.Xml.Parser,`0[]@)">
            <summary>
            数组解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="values">目标数据</param>
            <returns>数据数量,-1表示失败</returns>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.notSupport(AutoCSer.Xml.Parser,`0@)">
            <summary>
            不支持基元类型解析
            </summary>
            <param name="parser">XML解析器</param>
            <param name="value">目标数据</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeParser`1.unbox(AutoCSer.Xml.Parser,`0@)">
            <summary>
            包装处理
            </summary>
            <param name="parser"></param>
            <param name="value"></param>
        </member>
        <member name="T:AutoCSer.Xml.TypeSerializer`1">
            <summary>
            类型序列化
            </summary>
            <typeparam name="valueType">目标类型</typeparam>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.memberSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.memberMapSerializer">
            <summary>
            成员转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.defaultSerializer">
            <summary>
            转换委托
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.attribute">
            <summary>
            XML序列化类型配置
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.TypeSerializer`1.isValueType">
            <summary>
            是否值类型
            </summary>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.Serialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.StructSerialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.ClassSerialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            引用类型对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.MemberSerialize(AutoCSer.Xml.Serializer,`0)">
            <summary>
            值类型对象转换XML字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.enumToString(AutoCSer.Xml.Serializer,`0)">
            <summary>
            枚举转换字符串
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="M:AutoCSer.Xml.TypeSerializer`1.ignore(AutoCSer.Xml.Serializer,`0)">
            <summary>
            不支持序列化
            </summary>
            <param name="xmlSerializer">对象转换XML字符串</param>
            <param name="value">数据对象</param>
        </member>
        <member name="T:AutoCSer.Xml.UnionType">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.Value">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.ParseConfig">
            <summary>
            XML 解析配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.SerializeConfig">
            <summary>
            XML 序列化配置参数
            </summary>
        </member>
        <member name="F:AutoCSer.Xml.UnionType.SerializeAttribute">
            <summary>
            XML 序列化类型配置
            </summary>
        </member>
        <member name="T:AutoCSer.Xml.UnknownNameAttribute">
            <summary>
            未知名称解析函数标识配置
            </summary>
        </member>
    </members>
</doc>
